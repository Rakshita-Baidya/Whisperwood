@page
@model Whisperwood.Pages.Book.AddBookModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Add Book";
}

<div class="px-4 py-8">
    <h1 class="text-accent4 mb-6 text-center text-4xl font-bold">Add New Book</h1>

    <form id="add-book-form" class="bg-primary border-accent3 mx-auto rounded-lg border p-6 shadow-md">
        <div class="text-accent4 grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-4">
            <div>
                <label for="title" class="mb-1 block font-medium">Title</label>
                <input type="text" id="title" name="title" class="border-accent1 w-full rounded border p-2" placeholder="Enter book title" required>
            </div>
            <div>
                <label for="isbn" class="mb-1 block font-medium">ISBN</label>
                <input type="text" id="isbn" name="isbn" class="border-accent1 w-full rounded border p-2" placeholder="e.g., 9781234567890" required>
            </div>
            <div>
                <label for="price" class="mb-1 block font-medium">Price</label>
                <input type="number" id="price" name="price" class="border-accent1 w-full rounded border p-2" placeholder="Enter price" min="0.01" step="0.01" required>
            </div>
            <div>
                <label for="stock" class="mb-1 block font-medium">Stock</label>
                <input type="number" id="stock" name="stock" class="border-accent1 w-full rounded border p-2" placeholder="Enter stock quantity" min="0" required>
            </div>
            <div>
                <label for="discountPercentage" class="mb-1 block font-medium">Discount (%)</label>
                <input type="number" id="discountPercentage" name="discountPercentage" class="border-accent1 w-full rounded border p-2" placeholder="e.g., 10" min="0" max="100" step="0.01">
            </div>
            <div>
                <label for="isOnSale" class="mb-1 block font-medium">On Sale</label>
                <select id="isOnSale" name="isOnSale" class="border-accent1 w-full rounded border p-[10px]">
                    <option value="false">No</option>
                    <option value="true">Yes</option>
                </select>
            </div>
            <div>
                <label for="discountStartDate" class="mb-1 block font-medium">Discount Start Date</label>
                <input type="date" id="discountStartDate" name="discountStartDate" class="border-accent1 w-full rounded border p-[6px]">
            </div>
            <div>
                <label for="discountEndDate" class="mb-1 block font-medium">Discount End Date</label>
                <input type="date" id="discountEndDate" name="discountEndDate" class="border-accent1 w-full rounded border p-[6px]">
            </div>
            <div>
                <label for="language" class="mb-1 block font-medium">Language</label>
                <input type="text" id="language" name="language" class="border-accent1 w-full rounded border p-2" placeholder="e.g., English" required>
            </div>
            <div>
                <label for="edition" class="mb-1 block font-medium">Edition</label>
                <input type="number" id="edition" name="edition" class="border-accent1 w-full rounded border p-2" placeholder="Enter edition number" min="1" required>
            </div>
            <div>
                <label for="format" class="mb-1 block font-medium">Format</label>
                <select id="format" name="format" class="border-accent1 w-full rounded border p-[10px]" required>
                    <option value="0">Paperback</option>
                    <option value="1">Hardcover</option>
                    <option value="2">Signed Edition</option>
                    <option value="3">Limited Edition</option>
                    <option value="4">First Edition</option>
                    <option value="5">Collectors Edition</option>
                    <option value="6">Authors Edition</option>
                    <option value="7">Deluxe Edition</option>
                    <option value="8">Ebook</option>
                    <option value="9">Audiobook</option>
                </select>
            </div>
            <div>
                <label for="publishedDate" class="mb-1 block font-medium">Published Date</label>
                <input type="date" id="publishedDate" name="publishedDate" class="border-accent1 w-full rounded border p-[6px]" required>
            </div>
            <div>
                <label for="authors" class="mb-1 block font-medium">Authors</label>
                <select id="authors" name="authorIds" multiple class="border-accent1 w-full rounded border p-2">
                </select>
            </div>
            <div>
                <label for="genres" class="mb-1 block font-medium">Genres</label>
                <select id="genres" name="genreIds" multiple class="border-accent1 w-full rounded border p-2">
                </select>
            </div>
            <div>
                <label for="categories" class="mb-1 block font-medium">Categories</label>
                <select id="categories" name="categoryIds" multiple class="border-accent1 w-full rounded border p-2">
                </select>
            </div>
            <div>
                <label for="publishers" class="mb-1 block font-medium">Publishers</label>
                <select id="publishers" name="publisherIds" multiple class="border-accent1 w-full rounded border p-2">
                </select>
            </div>
            <div class="col-span-full">
                <label for="synopsis" class="mb-1 block font-medium">Synopsis</label>
                <textarea id="synopsis" name="synopsis" class="border-accent1 w-full rounded border p-2" rows="4" placeholder="Enter book synopsis"></textarea>
            </div>
        </div>
        <div class="mt-6 flex justify-center gap-4">
            <button type="submit" class="bg-accent3 rounded px-6 py-2 text-white hover:bg-accent4">Add Book</button>
            <button type="button" onclick="history.back()" class="rounded bg-gray-500 px-6 py-2 text-white hover:bg-gray-600">Cancel</button>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        // checks authentication and redirects if unauthorized
        const checkAuth = () => {
            if (!window.jwtToken) {
                Toast.fire({
                    icon: 'error',
                    title: 'Please log in to add books'
                }).then(() => {
                    window.location.href = '/User/Login';
                });
                return false;
            }
            return true;
        };

        // validates form inputs
        const validateForm = (formData) => {
            const title = formData.get('title')?.trim();
            if (!title) {
                Toast.fire({ icon: 'error', title: 'Title is required' });
                return false;
            }

            const isbn = formData.get('isbn')?.trim();
            if (!isbn || !/^\d{10}$|^\d{13}$/.test(isbn)) {
                Toast.fire({ icon: 'error', title: 'ISBN must be 10 or 13 digits' });
                return false;
            }

            const price = parseFloat(formData.get('price'));
            if (!price || price < 0.01) {
                Toast.fire({ icon: 'error', title: 'Price must be at least 0.01' });
                return false;
            }

            const stock = parseInt(formData.get('stock'), 10);
            if (isNaN(stock) || stock < 0) {
                Toast.fire({ icon: 'error', title: 'Stock must be non-negative' });
                return false;
            }

            const discount = parseFloat(formData.get('discountPercentage'));
            if (discount && (discount < 0 || discount > 100)) {
                Toast.fire({ icon: 'error', title: 'Discount must be between 0 and 100' });
                return false;
            }

            const language = formData.get('language')?.trim();
            if (!language || !/^[a-zA-Z\s]+$/.test(language)) {
                Toast.fire({ icon: 'error', title: 'Language must contain only letters' });
                return false;
            }

            const edition = parseInt(formData.get('edition'), 10);
            if (!edition || edition < 1) {
                Toast.fire({ icon: 'error', title: 'Edition must be a positive number' });
                return false;
            }

            const format = parseInt(formData.get('format'), 10);
            if (isNaN(format)) {
                Toast.fire({ icon: 'error', title: 'Format is required' });
                return false;
            }

            const publishedDate = formData.get('publishedDate');
            if (!publishedDate || new Date(publishedDate) > new Date()) {
                Toast.fire({ icon: 'error', title: 'Published date must not be in the future' });
                return false;
            }

            const synopsis = formData.get('synopsis')?.trim();
            const authorIds = formData.getAll('authorIds');
            const genreIds = formData.getAll('genreIds');
            const categoryIds = formData.getAll('categoryIds');
            const publisherIds = formData.getAll('publisherIds');
            
            const discountStartDate = formData.get('discountStartDate');
            const discountEndDate = formData.get('discountEndDate');
            if (discountStartDate && discountEndDate && new Date(discountStartDate) > new Date(discountEndDate)) {
                Toast.fire({ icon: 'error', title: 'Discount start date cannot be after end date' });
                return false;
            }
            if ((discountStartDate || discountEndDate) && new Date(discountStartDate || discountEndDate) < new Date().setHours(0, 0, 0, 0)) {
                Toast.fire({ icon: 'error', title: 'Discount dates cannot be in the past' });
                return false;
            }

            return true;
        };

        // submits book data to api
        const submitForm = async (form) => {
            if (!checkAuth()) return;

            const formData = new FormData(form);
            if (!validateForm(formData)) return;

            const bookData = {
                title: formData.get('title').trim(),
                isbn: formData.get('isbn').trim(),
                price: parseFloat(formData.get('price')),
                discountPercentage: parseFloat(formData.get('discountPercentage')) || 0,
                isOnSale: formData.get('isOnSale') === 'true',
                discountStartDate: formData.get('discountStartDate') || null,
                discountEndDate: formData.get('discountEndDate') || null,
                synopsis: formData.get('synopsis').trim(),
                publishedDate: formData.get('publishedDate'),
                stock: parseInt(formData.get('stock'), 10),
                language: formData.get('language').trim(),
                format: parseInt(formData.get('format'), 10),
                edition: parseInt(formData.get('edition'), 10),
                authorIds: formData.getAll('authorIds').map(String),
                genreIds: formData.getAll('genreIds').map(String),
                categoryIds: formData.getAll('categoryIds').map(String),
                publisherIds: formData.getAll('publisherIds').map(String),
                coverImageId: "6ea3171c-6311-4203-9972-d87c8f06733c"
            };

            try {
                const response = await fetch('https://localhost:7018/api/Book/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${window.jwtToken}`
                    },
                    body: JSON.stringify(bookData)
                });

                if (response.status === 401) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Please log in to add books'
                    }).then(() => {
                        window.location.href = '/User/Login';
                    });
                    return;
                }

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to add book');
                }

                Toast.fire({
                    icon: 'success',
                    title: 'Book added successfully'
                }).then(() => {
                    window.location.href = '/Book/ManageBook';
                });
                clearForm();
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to add book'
                });
            }
        };

        // initializes event listeners
        document.addEventListener('DOMContentLoaded', () => {
            const elements = {
                form: document.getElementById('add-book-form')
            };

            if (!elements.form) {
                console.warn('form element missing');
                Toast.fire({
                    icon: 'error',
                    title: 'Failed to initialize form'
                });
                return;
            }

            elements.form.addEventListener('submit', (e) => {
                e.preventDefault();
                submitForm(elements.form);
            });

            fetchBookDropdownOptions();
        });
    </script>
}