@page
@model Whisperwood.Pages.User.OrderDetailModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Order Details";
}

@* displays order details *@
<div class="container mx-auto px-6 py-8">
    <div class="mb-6 flex items-center justify-between">
        <h1 class="text-accent4 text-2xl font-bold">Order Details</h1>
        <div id="cancel-button"></div>
    </div>
    <div id="order-details" class="grid hidden grid-cols-1 gap-6 lg:grid-cols-3">
        @* order summary *@
        <div class="lg:col-span-1">
            <div class="bg-primary border-accent1 rounded-lg border p-6 shadow-sm">
                <h2 class="text-accent4 mb-4 text-xl font-semibold">Order Summary</h2>
                <div class="text-accent2 space-y-2">
                    <p><span class="font-medium">Order ID:</span> <span id="order-id"></span></p>
                    <p><span class="font-medium">Placed on:</span> <span id="order-date"></span></p>
                    <p><span class="font-medium">Status:</span> <span id="order-status"></span></p>
                    <p><span class="font-medium">Subtotal:</span> Rs. <span id="order-subtotal"></span></p>
                    <p id="order-promo" class="hidden">Promo Code: <span id="promo-code"></span></p>
                    <p id="order-discount" class="hidden font-medium">Discount: Rs. <span id="discount-amount"></span></p>
                    <div id="bill-details" class="space-y-1"></div>
                    <p class="text-accent4 text-lg font-semibold">Total: Rs. <span id="order-total"></span></p>
                </div>
            </div>
        </div>
        @* order items *@
        <div class="lg:col-span-2">
            <h2 class="text-accent4 mb-4 text-xl font-semibold">Order Items</h2>
            <div class="overflow-x-auto">
                <table class="border-accent1 text-accent2 w-full border shadow-sm">
                    <thead>
                        <tr class="bg-accent4 text-white">
                            <th class="p-3 text-left">Book Title</th>
                            <th class="p-3 text-left">Quantity</th>
                            <th class="p-3 text-left">Unit Price</th>
                            <th class="p-3 text-left">Subtotal</th>
                        </tr>
                    </thead>
                    <tbody id="items-table-body"></tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // caches dom elements
        const elements = {
            details: document.getElementById('order-details'),
            orderId: document.getElementById('order-id'),
            orderDate: document.getElementById('order-date'),
            orderStatus: document.getElementById('order-status'),
            orderSubtotal: document.getElementById('order-subtotal'),
            orderPromo: document.getElementById('order-promo'),
            promoCode: document.getElementById('promo-code'),
            orderDiscount: document.getElementById('order-discount'),
            discountAmount: document.getElementById('discount-amount'),
            orderTotal: document.getElementById('order-total'),
            billDetails: document.getElementById('bill-details'),
            cancelButton: document.getElementById('cancel-button'),
            itemsTableBody: document.getElementById('items-table-body')
        };

        // fetches order
        const fetchOrder = async (orderId) => {
            if (!window.checkAuth('view order details')) return null;
            try {
                const response = await fetch(`https://localhost:7018/api/Order/getbyid/${orderId}`, {
                    headers: { 'Authorization': `Bearer ${window.jwtToken}` }
                });
                if (response.status === 401) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Please log in to view order details'
                    }).then(() => {
                        window.location.href = '/User/Login';
                    });
                    return null;
                }
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to fetch order');
                }
                return await response.json();
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to fetch order'
                });
                return null;
            }
        };

        // cancels order
        const cancelOrder = async (orderId) => {
            const result = await Swal.fire({
                title: 'Cancel Order',
                text: 'Are you sure you want to cancel this order?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#E74C3C',
                cancelButtonColor: '#2C3E50',
                confirmButtonText: 'Cancel Order',
                cancelButtonText: 'Keep Order'
            });
            if (!result.isConfirmed) return false;

            try {
                const response = await fetch(`https://localhost:7018/api/Order/update/${orderId}`, {
                    method: 'PUT',
                    headers: {
                        'Authorization': `Bearer ${window.jwtToken}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ status: 1 })
                });
                if (response.status === 401) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Please log in to cancel order'
                    }).then(() => {
                        window.location.href = '/User/Login';
                    });
                    return false;
                }
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to cancel order');
                }
                return true;
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to cancel order'
                });
                return false;
            }
        };

        // gets status text and badge class
        const getStatusText = (status) => {
            switch (status) {
                case 0: return { text: 'Pending'};
                case 1: return { text: 'Cancelled'};
                case 2: return { text: 'Fulfilled'};
                default: return { text: 'Unknown'};
            }
        };

        // loads order details
        const loadOrderDetails = async () => {
            if (!window.checkAuth('view order details')) return;

            Toast.fire({
                icon: 'info',
                title: 'Loading order details...',
                timer: 1000
            });

            const urlParams = new URLSearchParams(window.location.search);
            const orderId = urlParams.get('orderId');
            if (!orderId) {
                Toast.fire({
                    icon: 'error',
                    title: 'Order ID not provided'
                });
                return;
            }

            const order = await fetchOrder(orderId);
            if (!order) return;

            elements.details.classList.remove('hidden');
            elements.orderId.textContent = order.id;
            elements.orderDate.textContent = new Date(order.orderedAt).toLocaleString();
            const statusInfo = getStatusText(order.status);
            elements.orderStatus.textContent = statusInfo.text;
            elements.orderSubtotal.textContent = order.subTotal.toFixed(2);
            if (order.promoCode) {
                elements.promoCode.textContent = order.promoCode;
                elements.orderPromo.classList.remove('hidden');
            }
            if (order.discount > 0) {
                elements.discountAmount.textContent = order.discount.toFixed(2);
                elements.orderDiscount.classList.remove('hidden');
            }
            elements.orderTotal.textContent = order.totalAmount.toFixed(2);

            if (order.bill) {
                elements.billDetails.innerHTML = `
                    <p class="text-accent2"><span class="font-medium">Promo Discount:</span> Rs. ${order.bill.promoDiscount.toFixed(2)}</p>
                    <p class="text-accent2"><span class="font-medium">Bulk Discount:</span> Rs. ${order.bill.bulkDiscount.toFixed(2)}</p>
                    <p class="text-accent2"><span class="font-medium">Loyal Discount:</span> Rs. ${order.bill.loyalDiscount.toFixed(2)}</p>
                    <p class="text-accent2"><span class="font-medium">Claim Code:</span> ${order.bill.claimCode || '-'}</p>
                `;
            }

            if (order.status === 0) {
                elements.cancelButton.innerHTML = `<button class="cancel-order bg-accent4 rounded-lg px-4 py-2 text-white hover:bg-red-600" data-order-id="${order.id}">Cancel Order</button>`;
                document.querySelector('.cancel-order')?.addEventListener('click', async () => {
                    const success = await cancelOrder(orderId);
                    if (success) {
                        Toast.fire({
                            icon: 'success',
                            title: 'Order cancelled successfully'
                        }).then(() => {
                            location.reload();
                        });
                    }
                });
            }

            elements.itemsTableBody.innerHTML = order.orderItems.map(item => `
                <tr class="border-accent1 border-b bg-white">
                    <td class="p-3">${item.book?.title || 'Unknown Book'}</td>
                    <td class="p-3">${item.quantity}</td>
                    <td class="p-3">Rs. ${item.unitPrice.toFixed(2)}</td>
                    <td class="p-3">Rs. ${item.subTotal.toFixed(2)}</td>
                </tr>
            `).join('');
        };

        // initializes page
        document.addEventListener('DOMContentLoaded', loadOrderDetails);
    </script>
}