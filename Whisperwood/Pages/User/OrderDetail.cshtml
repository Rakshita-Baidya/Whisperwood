@page
@model Whisperwood.Pages.User.OrderDetailModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Order Details";
}

<div class="container mx-auto px-6 py-8">
    <div class="flex justify-between align-middle  mb-4">
        <h1 class="text-3xl font-bold text-accent4">Order Details</h1>
        <div id="cancel-button"></div>
    </div>
    <div id="error-message" class="hidden mb-4 text-center text-red-600"></div>
    <div id="success-message" class="hidden mb-4 text-center text-green-600"></div>
    <div id="loading-message" class="text-center text-accent2 text-lg">Loading order details...</div>

    <div id="order-details" class="hidden">
        <div class="border border-accent1 bg-primary p-4 rounded shadow mb-6">
            <p class="text-lg font-semibold text-accent3">Order ID: <span id="order-id"></span></p>
            <p class="text-accent1">Placed on: <span id="order-date"></span></p>
            <p class="text-accent1">Status: <span id="order-status"></span></p>
            <p class="text-accent1">Subtotal: Rs. <span id="order-subtotal"></span></p>
            <p class="text-accent1" id="order-promo"></p>
            <p class="text-accent1" id="order-discount"></p>
            <p class="text-accent1 font-semibold">Total: Rs. <span id="order-total"></span></p>
            <div id="bill-details" class="mt-2"></div>
            <div id="bill-download" class="mt-2"></div>
        </div>

        <h2 class="text-xl font-semibold text-accent4 mb-4">Order Items</h2>
        <table class="w-full text-accent2 border border-accent1">
            <thead>
                <tr class="bg-accent3 text-white">
                    <th class="p-2 text-left">Book Title</th>
                    <th class="p-2 text-left">Quantity</th>
                    <th class="p-2 text-left">Unit Price</th>
                    <th class="p-2 text-left">Subtotal</th>
                </tr>
            </thead>
            <tbody id="items-table-body"></tbody>
        </table>
    </div>
</div>

@section Scripts {
    <script>
        const orderDetails = document.getElementById("order-details");
        const error = document.getElementById("error-message");
        const success = document.getElementById("success-message");
        const loading = document.getElementById("loading-message");
        const orderIdSpan = document.getElementById("order-id");
        const orderDate = document.getElementById("order-date");
        const orderStatus = document.getElementById("order-status");
        const orderSubtotal = document.getElementById("order-subtotal");
        const orderPromo = document.getElementById("order-promo");
        const orderDiscount = document.getElementById("order-discount");
        const orderTotal = document.getElementById("order-total");
        const billDetails = document.getElementById("bill-details");
        const billDownload = document.getElementById("bill-download");
        const cancelButton = document.getElementById("cancel-button");
        const itemsTableBody = document.getElementById("items-table-body");

        function showError(message) {
            error.textContent = message;
            error.classList.remove("hidden");
            success.classList.add("hidden");
            loading.classList.add("hidden");
            orderDetails.classList.add("hidden");
        }

        function showSuccess(message) {
            success.textContent = message;
            success.classList.remove("hidden");
            error.classList.add("hidden");
            loading.classList.add("hidden");
        }

        async function fetchOrder(orderId) {
            try {
                const response = await fetch(`https://localhost:7018/api/Order/getbyid/${orderId}`, {
                    headers: { "Authorization": `Bearer ${window.jwtToken || ''}` }
                });
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || "Failed to fetch order.");
                }
                return await response.json();
            } catch (err) {
                showError(err.message);
                return null;
            }
        }

        async function cancelOrder(orderId) {
            try {
                const response = await fetch(`https://localhost:7018/api/Order/update/${orderId}`, {
                    method: 'PUT',
                    headers: {
                        "Authorization": `Bearer ${window.jwtToken || ''}`,
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({ status: 1 })
                });
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || "Failed to cancel order.");
                }
                return true;
            } catch (err) {
                showError(err.message);
                return false;
            }
        }

        function getStatusText(status) {
            return status === 0 ? "Pending" : status === 1 ? "Cancelled" : status === 2 ? "Fulfilled" : "Unknown";
        }

        async function loadOrderDetails() {
            if (!window.isAuthenticated || !window.userId) {
                showError("Please log in.");
                setTimeout(() => window.location.href = '/User/Login', 1000);
                return;
            }

            const urlParams = new URLSearchParams(window.location.search);
            const orderId = urlParams.get('orderId');
            if (!orderId) {
                showError("Order ID not provided.");
                return;
            }

            const order = await fetchOrder(orderId);
            if (!order) return;

            loading.classList.add("hidden");
            orderDetails.classList.remove("hidden");

            orderIdSpan.textContent = order.id;
            orderDate.textContent = new Date(order.orderedAt).toLocaleString();
            orderStatus.textContent = getStatusText(order.status);
            orderSubtotal.textContent = order.subTotal.toFixed(2);
            orderPromo.textContent = order.promoCode ? `Promo Code: ${order.promoCode}` : '';
            orderDiscount.textContent = order.discount > 0 ? `Discount: Rs. ${order.discount.toFixed(2)}` : '';
            orderTotal.textContent = order.totalAmount.toFixed(2);

            if (order.bill) {
                billDetails.innerHTML = `
                    <p class="text-accent1">Promo Discount: Rs. ${order.bill.promoDiscount.toFixed(2)}</p>
                    <p class="text-accent1">Bulk Discount: Rs. ${order.bill.bulkDiscount.toFixed(2)}</p>
                    <p class="text-accent1">Loyal Discount: Rs. ${order.bill.loyalDiscount.toFixed(2)}</p>
                    <p class="text-accent1">Claim Code: ${order.bill.claimCode || '-'}</p>
                `;
                if (order.bill.billUrl) {
                    billDownload.innerHTML = `<a href="${order.bill.billUrl}" class="text-blue-500 hover:text-blue-600" download>Download Bill</a>`;
                }
            }

            if (order.status === 0) {
                cancelButton.innerHTML = `<button class="cancel-order bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600" data-order-id="${order.id}">Cancel Order</button>`;
                document.querySelector('.cancel-order')?.addEventListener('click', async () => {
                    if (confirm("Are you sure you want to cancel this order?")) {
                        const success = await cancelOrder(orderId);
                        if (success) {
                            showSuccess("Order cancelled successfully.");
                            setTimeout(() => location.reload(), 1000);
                        }
                    }
                });
            }            

            itemsTableBody.innerHTML = order.orderItems.map(item => `
                <tr class="border-b border-accent1">
                    <td class="p-2">${item.book?.title || 'Unknown Book'}</td>
                    <td class="p-2">${item.quantity}</td>
                    <td class="p-2">Rs. ${item.unitPrice.toFixed(2)}</td>
                    <td class="p-2">Rs. ${item.subTotal.toFixed(2)}</td>
                </tr>
            `).join('');
        }

        document.addEventListener("DOMContentLoaded", loadOrderDetails);
    </script>
}