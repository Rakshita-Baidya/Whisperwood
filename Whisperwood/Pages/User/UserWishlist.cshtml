@page
@model Whisperwood.Pages.User.UserWishlistModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "My Wishlist";
}

<div class="px-4 py-8">
    <div class="mb-4 flex justify-between">
        <h1 class="text-accent3 text-center text-4xl font-bold">My Wishlist</h1>
    </div>

    <div id="error-message" class="mb-4 hidden text-center text-red-600"></div>

    <div id="wishlist-container" class="grid grid-cols-1 gap-6 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5">
        <div id="loading" class="text-accent2 col-span-full text-center text-lg">Loading wishlist...</div>
    </div>

    <div id="no-wishlist" class="text-accent2 mt-4 hidden text-center text-lg">Your wishlist is empty.</div>
</div>

@section Scripts {
    <script>
        async function renderWishlist() {
            const wishlistContainer = document.getElementById('wishlist-container');
            const noWishlistElement = document.getElementById('no-wishlist');
            const loadingElement = document.getElementById('loading');
            const errorMessageElement = document.getElementById('error-message');

            if (loadingElement) {
                loadingElement.classList.remove('hidden');
            }
            wishlistContainer.innerHTML = '';
            noWishlistElement.classList.add('hidden');
            errorMessageElement.classList.add('hidden');

            try {
                if (!window.isAuthenticated) {
                    errorMessageElement.textContent = 'Please log in to view your wishlist.';
                    errorMessageElement.classList.remove('hidden');
                    loadingElement.classList.add('hidden');
                    return;
                }

                const response = await fetch('https://localhost:7018/api/WishlistItem/getbyuserid', {
                    headers: { 'Authorization': `Bearer ${window.jwtToken}` }
                });
                if (!response.ok) {
                    throw new Error('Failed to load wishlist. Please try again later.');
                }
                const wishlist = await response.json();
                const wishlistItems = wishlist.wishListItems || [];

                loadingElement.classList.add('hidden');

                if (wishlistItems.length === 0) {
                    noWishlistElement.classList.remove('hidden');
                    return;
                }

                wishlistItems.forEach(item => {
                    const book = item.book;
                    const authorNames = book.authorBooks && book.authorBooks.length > 0
                        ? book.authorBooks.map(ab => ab.author.name).join(', ')
                        : 'Unknown Author';
                    const isOnSale = book.isOnSale;

                    const bookElement = document.createElement('a');
                    bookElement.href = `/Book/Details/${book.id}`;
                    bookElement.className = 'block bg-primary border-accent1 rounded-lg border-[2px] p-4 shadow-md transition-shadow hover:shadow-xl';
                    bookElement.innerHTML = `
                        ${book.coverImage && book.coverImage.coverImageURL
                            ? `<img src="${book.coverImage.coverImageURL}" alt="${book.title}" class="mb-4 h-64 w-full rounded-md object-cover" />`
                            : `<div class="text-accent3 mb-4 h-64 w-full rounded-md flex items-center justify-center">No Image</div>`
                        }
                        <h2 class="text-accent3 truncate text-xl font-semibold">${book.title}</h2>
                        <p class="text-accent1 font-medium">${authorNames}</p>
                        <div class="mb-3 flex justify-between">
                            <p class="text-accent3">★ ${book.averageRating.toFixed(1)}</p>
                            <div class="text-right">
                                ${isOnSale
                                    ? `<p class="text-red-500 font-medium">Rs. ${window.calculateBookPrice(book).toFixed(2)} <span class="line-through text-accent1 text-sm">Rs. ${book.price.toFixed(2)}</span></p>
                                        <p class="text-red-500 text-sm">${book.discountPercentage}% Off <span class="bg-red-500 text-white text-xs px-1 rounded">On Sale</span></p>`
                                    : `<p class="text-accent1 font-medium">Rs. ${book.price.toFixed(2)}</p>`
                                }
                            </div>
                        </div>
                        <div class="flex gap-2">
                            <button id="wishlist-${book.id}" class="bg-accent3 flex flex-1 items-center justify-center rounded py-2 text-white hover:bg-accent4"></button>
                            <a href="/Review/BookReview?BookId=${book.id}" class="bg-accent3 flex flex-1 items-center justify-center rounded py-2 text-white hover:bg-accent4">
                                <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#fff" stroke-width="2" stroke-linejoin="round" d="M12 4 9.22 9.27 3 10.11l4.5 4.1L6.44 20 12 17.27 17.56 20l-1.06-5.79 4.5-4.1-6.22-.84z"/></svg>
                            </a>
                            <button id="cart-${book.id}" class="bg-accent3 flex flex-1 items-center justify-center rounded py-2 text-white hover:bg-accent4"></button>
                        </div>
                    `;
                    wishlistContainer.appendChild(bookElement);

                    window.initializeWishlistButton(`wishlist-${book.id}`, book.id);
                    window.initializeCartButton(`cart-${book.id}`, book.id, book);
                });
            } catch (error) {
                console.error('Error fetching wishlist:', error);
                loadingElement.classList.add('hidden');
                errorMessageElement.textContent = error.message;
                errorMessageElement.classList.remove('hidden');
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            renderWishlist();
        });
    </script>
}