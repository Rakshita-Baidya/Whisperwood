@page
@model Whisperwood.Pages.User.UserWishlistModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "My Wishlist";
}

<div class="px-4 py-8">
        <h1 class="text-accent4 mb-4 text-4xl font-bold">My Wishlist</h1>

    <div id="wishlist-container" class="grid grid-cols-1 gap-6 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
        <div id="loading" class="text-accent4 col-span-full text-center text-lg">Loading wishlist...</div>
    </div>

    <div id="no-wishlist" class="text-accent4 mt-4 hidden text-center text-lg">Your wishlist is empty.</div>
</div>

@section Scripts {
    <script>
        // renders wishlist items
        const renderWishlist = async () => {
            const elements = {
                container: document.getElementById('wishlist-container'),
                loading: document.getElementById('loading'),
                noWishlist: document.getElementById('no-wishlist')
            };

            elements.loading.classList.remove('hidden');
            elements.container.innerHTML = '';
            elements.noWishlist.classList.add('hidden');

            if (!window.checkAuth('view wishlist')) {
                elements.loading.classList.add('hidden');
                return;
            }

            try {
                const response = await fetch('https://localhost:7018/api/WishlistItem/getbyuserid', {
                    headers: { 'Authorization': `Bearer ${window.jwtToken}` }
                });

                if (response.status === 401) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Please log in to view wishlist'
                    }).then(() => {
                        window.location.href = '/User/Login';
                    });
                    elements.loading.classList.add('hidden');
                    return;
                }

                if (!response.ok) throw new Error('Failed to load wishlist');

                const wishlist = await response.json();
                const wishlistItems = wishlist.wishListItems || [];

                elements.loading.classList.add('hidden');

                if (wishlistItems.length === 0) {
                    elements.noWishlist.classList.remove('hidden');
                    return;
                }

                wishlistItems.forEach(item => {
                    const book = item.book;
                    const authorNames = book.authorBooks?.length > 0
                        ? book.authorBooks.map(ab => ab.author.name).join(', ')
                        : 'Unknown Author';
                    const isOnSale = book.isOnSale;

                    const bookElement = document.createElement('a');
                    bookElement.href = `/Book/Details/${book.id}`;
                    bookElement.className = 'block bg-primary border-accent3 rounded border-[2px] p-4 shadow-md transition-shadow hover:shadow-xl';
                    bookElement.innerHTML = `
                        ${book.coverImage?.coverImageURL
                            ? `<img src="${book.coverImage.coverImageURL}" alt="${book.title}" class="mb-4 h-64 w-full rounded-md object-cover" />`
                            : `<div class="text-accent4 bg-secondary mb-4 flex h-64 w-full items-center justify-center rounded-md">No Image</div>`
                        }
                        <h2 class="text-accent4 truncate text-xl font-semibold">${book.title}</h2>
                        <p class="text-accent4 font-medium">${authorNames}</p>
                        <div class="mb-3 flex justify-between">
                            <p class="text-accent4">★ ${book.averageRating.toFixed(1)}</p>
                            <div class="text-right">
                                ${isOnSale
                                    ? `<p class="text-accent4 font-medium">Rs. ${window.calculateBookPrice(book).toFixed(2)} <span class="text-accent1 text-sm line-through">Rs. ${book.price.toFixed(2)}</span></p>
                                       <p class="text-accent4 text-sm">${book.discountPercentage}% Off <span class="bg-accent4 rounded px-1 py-1 text-xs text-white">On Sale</span></p>`
                                    : `<p class="text-accent4 font-medium">Rs. ${book.price.toFixed(2)}</p>`
                                }
                            </div>
                        </div>
                        <div class="flex gap-2">
                            <button id="wishlist-${book.id}" class="bg-accent3 flex flex-1 items-center justify-center rounded py-2 text-white hover:bg-accent4"></button>
                            
                            <button id="cart-${book.id}" class="bg-accent3 flex flex-1 items-center justify-center rounded py-2 text-white hover:bg-accent4"></button>
                        </div>
                    `;
                    elements.container.appendChild(bookElement);

                    window.initializeWishlistButton(`wishlist-${book.id}`, book.id);
                    window.initializeCartButton(`cart-${book.id}`, book.id, book);
                });
            } catch (error) {
                elements.loading.classList.add('hidden');
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to load wishlist'
                });
            }
        };

        // initializes wishlist rendering
        document.addEventListener('DOMContentLoaded', () => {
            renderWishlist();
        });
    </script>
}