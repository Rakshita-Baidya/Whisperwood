@page
@model Whisperwood.Pages.User.RegisterModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Register";
}

<div class="min-h-screen flex items-center justify-center">
    <div class="mx-auto w-2/3 text-center  bg-primary p-6 border border-accent3 rounded shadow-md">
        <h1 class="text-accent4 mb-4 text-4xl font-bold">Register</h1>
        <form id="register-form" class="grid grid-cols-2 gap-6">
            <div>
                <label class="text-accent4 block text-lg font-medium" for="name">Name</label>
                <input type="text" id="name" name="name" class="border-accent2 w-full rounded border p-2 text-gray-800 focus:outline-none focus:ring-2 focus:ring-accent3" required />
            </div>
            <div>
                <label class="text-accent4 block text-lg font-medium" for="phone">Phone</label>
                <input type="text" id="phone" name="phone" class="border-accent2 w-full rounded border p-2 text-gray-800 focus:outline-none focus:ring-2 focus:ring-accent3" placeholder="1234567890" />
            </div>
            <div>
                <label class="text-accent4 block text-lg font-medium" for="username">Username</label>
                <input type="text" id="username" name="username" class="border-accent2 w-full rounded border p-2 text-gray-800 focus:outline-none focus:ring-2 focus:ring-accent3" />
            </div>
            <div>
                <label class="text-accent4 block text-lg font-medium" for="email">Email</label>
                <input type="email" id="email" name="email" class="border-accent2 w-full rounded border p-2 text-gray-800 focus:outline-none focus:ring-2 focus:ring-accent3" required />
            </div>
            <div>
                <label class="text-accent4 block text-lg font-medium" for="password">Password</label>
                <input type="password" id="password" name="password" class="border-accent2 w-full rounded border p-2 text-gray-800 focus:outline-none focus:ring-2 focus:ring-accent3" required title="Password must be at least 6 characters, including a number, letter, and special character" />
                <p class="text-accent2 mt-1 text-sm">Password must be 6+ characters, with a number, letter, and special character.</p>
            </div>
            <div>
                <label class="text-accent4 block text-lg font-medium" for="confirm-password">Confirm Password</label>
                <input type="password" id="confirm-password" name="confirm-password" class="border-accent2 w-full rounded border p-2 text-gray-800 focus:outline-none focus:ring-2 focus:ring-accent3" required />
            </div>
            <div class="col-span-full">
                <button type="submit" class="bg-accent3 rounded px-4 py-2 text-lg font-medium text-white hover:bg-accent4 w-full focus:outline-none focus:ring-2 focus:ring-accent3">Register</button>
                <p class="text-accent2 mt-4">
                    Already have an account? <a href="/User/Login" class="text-accent1 hover:text-accent4">Login</a>
                </p>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        // handling form submission
        document.getElementById('register-form').addEventListener('submit', async (event) => {
            event.preventDefault();

            // collecting form data
            const name = document.getElementById('name').value;
            const phone = document.getElementById('phone').value;
            const username = document.getElementById('username').value;
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;
            const confirmPassword = document.getElementById('confirm-password').value;

            // validating inputs
            if (!name || !email || !password || !confirmPassword) {
                Toast.fire({
                    icon: 'error',
                    title: 'Please fill in all required fields.'
                });
                return;
            }

        if (!/^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/.test(email)) {
                Toast.fire({
                    icon: 'error',
                    title: 'Please enter a valid email address.'
                });
                return;
            }

            if (!/^(?=.*[A-Za-z])(?=.*\d)(?=.*[@@$!%*?&])[A-Za-z\d@@$!%*?&]{6,}$/.test(password)) {
                Toast.fire({
                    icon: 'error',
                    title: 'Password must be 6+ characters, with a number, letter, and special character.'
                });
                return;
            }

            if (password !== confirmPassword) {
                Toast.fire({
                    icon: 'error',
                    title: 'Passwords do not match.'
                });
                return;
            }

            if (phone && !/^\d{10}$/.test(phone)) {
                Toast.fire({
                    icon: 'error',
                    title: 'Phone number must be a 10-digit number.'
                });
                return;
            }

            // preparing payload
            const payload = {
                Name: name,
                Username: username || null,
                Email: email,
                Password: password,
                PhoneNumber: phone || null,
                ConfirmPassword: confirmPassword,
                ImageURL: null
            };

            try {
                // sending registration request
                const response = await fetch('/api/auth/register', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(payload),
                    credentials: 'include'
                });

                if (response.ok) {
                    // showing success toast
                    Toast.fire({
                        icon: 'success',
                        title: 'Successfully registered!'
                    }).then(() => {
                        window.location.href = '/User/Login';
                    });
                } else {
                    // handling non-ok responses
                    Toast.fire({
                        icon: 'error',
                        title: 'Registration failed. Please check your inputs.'
                    });
                }
            } catch (error) {
                // handling network errors
                Toast.fire({
                    icon: 'error',
                    title: 'Failed to connect to the server. Please try again.'
                });
            }
        });
    </script>
}