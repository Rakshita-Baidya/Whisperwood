@page
@model Whisperwood.Pages.User.UserCartModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Cart";
}

<div class="px-6 py-8">
    <h1 class="text-3xl font-bold text-center text-accent4 mb-6">My Cart</h1>

    <div id="error-message" class="hidden mb-4 text-center text-red-600"></div>
    <div id="success-message" class="hidden mb-4 text-center text-green-600"></div>
    <div id="cart-item-list" class="space-y-2 max-w-5xl mx-auto"></div>
    <p id="no-cart-items" class="hidden text-center text-accent2 text-lg">You haven’t added any books to your cart yet.</p>
</div>

@section Scripts {
    <script>
        const list = document.getElementById("cart-item-list");
        const error = document.getElementById("error-message");
        const success = document.getElementById("success-message");
        const empty = document.getElementById("no-cart-items");

        async function loadCartItems() {
            try {
                const cartItems = await fetchCartItems();
                if (!cartItems || cartItems.length === 0) {
                    empty.classList.remove("hidden");
                    return;
                }

                const books = [];
                for (const ci of cartItems) {
                    const response = await fetch(`https://localhost:7018/api/Book/getbyid/${ci.bookId}`, {
                        headers: { "Authorization": `Bearer ${window.jwtToken || ''}` }
                    });
                    if (!response.ok) {
                        throw new Error(`Failed to fetch book with ID ${ci.bookId}`);
                    }
                    const book = await response.json();
                    books.push(book);
                }

                const itemsByDate = {};
                cartItems.forEach((ci, index) => {
                    const date = new Date(ci.dateAdded).toLocaleDateString();
                    if (!itemsByDate[date]) itemsByDate[date] = [];
                    itemsByDate[date].push({ cartItem: ci, book: books[index] });
                });

                list.innerHTML = ''; 
                for (const [date, items] of Object.entries(itemsByDate)) {
                    const dateHeader = document.createElement("h2");
                    dateHeader.className = "text-xl font-semibold text-accent4 mt-4";
                    dateHeader.textContent = date;
                    list.appendChild(dateHeader);

                    items.forEach(item => {
                        const { cartItem: ci, book } = item;
                        if (!book) return;

                        const authorNames = book.authorBooks && book.authorBooks.length > 0
                            ? book.authorBooks.map(ab => ab.author.name).join(', ')
                            : 'Unknown Author';

                        const div = document.createElement("div");
                        div.className = "border border-accent1 bg-primary p-4 rounded shadow flex items-center justify-between ml-4";
                        div.innerHTML = `
                            <div class="flex-1">
                                <p class="text-lg font-semibold text-accent3">${book.title}</p>
                                <p class="text-accent1">${authorNames}</p>
                                <p class="text-accent1">Price: Rs. ${book.price}</p>
                                <p class="text-accent1">SubTotal: Rs. ${ci.subTotal.toFixed(2)}</p>
                            </div>
                            <div class="flex items-center gap-2">
                                <input type="number" id="quantity-${ci.bookId}" value="${ci.quantity}" min="1" class="border-accent1 w-16 rounded border p-1 text-center">
                                <button onclick="updateCartItem('${ci.bookId}', document.getElementById('quantity-${ci.bookId}').value, showSuccess, showError)" class="bg-accent3 rounded px-3 py-1 text-white hover:bg-accent2">Update</button>
                                <button onclick="deleteCartItem('${ci.bookId}', showSuccess, showError)" class="bg-red-500 rounded px-3 py-1 text-white hover:bg-red-600">Delete</button>
                            </div>
                        `;
                        list.appendChild(div);
                    });
                }
            } catch (err) {
                console.error('Error loading cart items:', err);
                showError(err.message);
            }
        }

        function showSuccess(message) {
            success.textContent = message;
            success.classList.remove("hidden");
            error.classList.add("hidden");
            location.reload();
        }

        function showError(message) {
            error.textContent = message;
            error.classList.remove("hidden");
            success.classList.add("hidden");
        }

        document.addEventListener("DOMContentLoaded", () => {
            if (!window.jwtToken) {
                window.location.href = '/User/Login';
                return;
            }
            loadCartItems();
        });
    </script>
}