@page
@model Whisperwood.Pages.User.UserCartModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Cart";
}

<div class="container mx-auto px-6 py-8">
    <h1 class="text-accent4 mb-6 text-center text-3xl font-bold">My Cart</h1>

    <div class="grid grid-cols-1 gap-6 lg:grid-cols-3">
        <div class="col-span-2">
            <div id="cart-item-list" class="space-y-2"></div>
            <p id="no-cart-items" class="text-accent2 hidden text-center text-lg">You haven’t added any books to your cart yet.</p>
        </div>

        <div class="col-span-1">
            <div class="bg-primary border-accent1 rounded border p-6 shadow">
                <h2 class="text-accent4 border-accent4 mb-2 border-b-2 pb-2 text-xl font-semibold">Cart Summary</h2>
                <div class="text-accent2 space-y-2">
                    <p><span class="font-medium">Book Subtotal (after book discounts):</span> Rs. <span id="cart-subtotal">0.00</span></p>
                    <p id="book-discount-row" class="hidden"><span class="font-medium">Book Discounts (included in subtotal):</span> Rs. <span id="book-discount">0.00</span></p>
                    <div class="flex items-center gap-2">
                        <input type="text" id="promo-code" placeholder="Enter promo code (optional)" class="border-accent1 w-full rounded border p-1">
                        <button id="apply-promo" class="bg-accent3 rounded px-3 py-1 text-white hover:bg-accent2">Apply</button>
                    </div>
                    <div id="discount-details" class="space-y-1">
                        <p id="promo-discount-row" class="hidden"><span class="font-medium">Promo Code Discount:</span> Rs. <span id="promo-discount">0.00</span></p>
                        <p id="bulk-discount-row" class="hidden"><span class="font-medium">Bulk Items Discount (5%):</span> Rs. <span id="bulk-discount">0.00</span></p>
                        <p id="loyal-discount-row" class="hidden"><span class="font-medium">Loyal Customer Discount (10%):</span> Rs. <span id="loyal-discount">0.00</span></p>
                    </div>
                    <p id="total-discount-row" class="hidden"><span class="font-medium">Total Additional Discount:</span> Rs. <span id="cart-discount">0.00</span></p>
                    <p class="text-accent4 text-lg font-semibold"><span class="font-bold">Total:</span> Rs. <span id="cart-total">0.00</span></p>
                </div>
                <button id="proceed-to-order" class="bg-accent3 mt-4 w-full rounded px-3 py-2 text-white hover:bg-accent2">Proceed to Order</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // caches dom elements
        const elements = {
            list: document.getElementById('cart-item-list'),
            empty: document.getElementById('no-cart-items'),
            subtotal: document.getElementById('cart-subtotal'),
            bookDiscount: document.getElementById('book-discount'),
            bookDiscountRow: document.getElementById('book-discount-row'),
            promoDiscount: document.getElementById('promo-discount'),
            bulkDiscount: document.getElementById('bulk-discount'),
            loyalDiscount: document.getElementById('loyal-discount'),
            totalDiscount: document.getElementById('cart-discount'),
            promoDiscountRow: document.getElementById('promo-discount-row'),
            bulkDiscountRow: document.getElementById('bulk-discount-row'),
            loyalDiscountRow: document.getElementById('loyal-discount-row'),
            totalDiscountRow: document.getElementById('total-discount-row'),
            total: document.getElementById('cart-total'),
            promoInput: document.getElementById('promo-code'),
            applyPromo: document.getElementById('apply-promo'),
            proceed: document.getElementById('proceed-to-order')
        };

        // initializes state
        let cartItems = [];
        let books = [];
        let subtotal = 0;
        let bookDiscount = 0;
        let discounts = { promo: 0, bulk: 0, loyal: 0, total: 0 };
        let orderPromotion = null;
        let userOrdersCount = 0;

        // fetches user orders count
        const fetchUserOrdersCount = async () => {
            if (!window.checkAuth('view cart')) return 0;

            try {
                const response = await fetch('https://localhost:7018/api/Auth/user', {
                    headers: { 'Authorization': `Bearer ${window.jwtToken}` }
                });

                if (response.status === 401) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Please log in to view cart'
                    }).then(() => {
                        window.location.href = '/User/Login';
                    });
                    return 0;
                }

                if (!response.ok) throw new Error('Failed to fetch user');

                const data = await response.json();
                return data.ordersCount || 0;
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to fetch user'
                });
                return 0;
            }
        };

        // validates promo code
        const validatePromoCode = async (promoCode) => {
            if (!promoCode) return null;
            if (!window.checkAuth('manage cart')) return null;

            try {
                const response = await fetch(`https://localhost:7018/api/Promotion/validate/${promoCode}`, {
                    headers: { 'Authorization': `Bearer ${window.jwtToken}` }
                });

                if (response.status === 401) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Please log in to manage cart'
                    }).then(() => {
                        window.location.href = '/User/Login';
                    });
                    return null;
                }

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Invalid promo code');
                }

                return await response.json();
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Invalid promo code'
                });
                return null;
            }
        };

        // calculates discounts
        const calculateDiscount = (subTotal, totalItems, userOrdersCount, orderPromotion) => {
            let currentSubTotal = subTotal;
            let promoDiscount = 0;
            let bulkDiscount = 0;
            let loyalDiscount = 0;

            if (orderPromotion) {
                promoDiscount = currentSubTotal * (orderPromotion.discountPercent / 100);
                currentSubTotal -= promoDiscount;
            }

            if (totalItems >= 5) {
                bulkDiscount = currentSubTotal * 0.05;
                currentSubTotal -= bulkDiscount;
            }

            if (userOrdersCount >= 10) {
                loyalDiscount = currentSubTotal * 0.10;
            }

            const totalDiscount = promoDiscount + bulkDiscount + loyalDiscount;
            return { promo: promoDiscount, bulk: bulkDiscount, loyal: loyalDiscount, total: totalDiscount };
        };

        // updates cart summary
        const updateSummary = () => {
            elements.subtotal.textContent = subtotal.toFixed(2);
            elements.bookDiscount.textContent = bookDiscount.toFixed(2);
            elements.promoDiscount.textContent = discounts.promo.toFixed(2);
            elements.bulkDiscount.textContent = discounts.bulk.toFixed(2);
            elements.loyalDiscount.textContent = discounts.loyal.toFixed(2);
            elements.totalDiscount.textContent = discounts.total.toFixed(2);
            elements.total.textContent = (subtotal - discounts.total).toFixed(2);

            elements.bookDiscountRow.classList.toggle('hidden', bookDiscount === 0);
            elements.promoDiscountRow.classList.toggle('hidden', discounts.promo === 0);
            elements.bulkDiscountRow.classList.toggle('hidden', discounts.bulk === 0);
            elements.loyalDiscountRow.classList.toggle('hidden', discounts.loyal === 0);
            elements.totalDiscountRow.classList.toggle('hidden', discounts.total === 0);
        };

        // renders cart items
        const renderCartItems = async () => {
            if (!Object.values(elements).every(el => el)) {
                Toast.fire({
                    icon: 'error',
                    title: 'Cart elements not found'
                });
                return;
            }

            elements.list.innerHTML = '';
            elements.empty.classList.add('hidden');
            elements.proceed.disabled = true;

            if (!window.checkAuth('view cart')) return;

            try {
                userOrdersCount = await fetchUserOrdersCount();
                cartItems = await window.fetchCartItems();

                if (!cartItems?.length) {
                    elements.empty.classList.remove('hidden');
                    subtotal = 0;
                    bookDiscount = 0;
                    discounts = { promo: 0, bulk: 0, loyal: 0, total: 0 };
                    updateSummary();
                    return;
                }

                books = [];
                for (const ci of cartItems) {
                    try {
                        const response = await fetch(`https://localhost:7018/api/Book/getbyid/${ci.bookId}`, {
                            headers: { 'Authorization': `Bearer ${window.jwtToken}` }
                        });
                        books.push(response.ok ? await response.json() : null);
                    } catch (error) {
                        Toast.fire({
                            icon: 'error',
                            title: `Failed to fetch book with ID ${ci.bookId}`
                        });
                        books.push(null);
                    }
                }

                if (books.every(book => !book)) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Failed to load book details'
                    });
                    return;
                }

                subtotal = 0;
                bookDiscount = 0;
                cartItems.forEach((ci, index) => {
                    const book = books[index];
                    if (!book) return;
                    const effectivePrice = window.calculateBookPrice(book);
                    ci.subTotal = ci.quantity * effectivePrice;
                    subtotal += ci.subTotal;
                    bookDiscount += ci.quantity * (book.price - effectivePrice);
                });

                const totalItems = cartItems.reduce((sum, ci) => sum + ci.quantity, 0);
                const promoCode = elements.promoInput.value.trim();
                orderPromotion = await validatePromoCode(promoCode);
                discounts = calculateDiscount(subtotal, totalItems, userOrdersCount, orderPromotion);
                updateSummary();
                elements.proceed.disabled = false;

                const itemsByDate = {};
                cartItems.forEach((ci, index) => {
                    const date = new Date(ci.dateAdded).toLocaleDateString();
                    if (!itemsByDate[date]) itemsByDate[date] = [];
                    itemsByDate[date].push({ cartItem: ci, book: books[index] });
                });

                for (const [date, items] of Object.entries(itemsByDate)) {
                    const dateHeader = document.createElement('div');
                    dateHeader.className = 'flex items-center gap-4 ml-2';

                    const dateText = document.createElement('h2');
                    dateText.className = 'text-xl font-semibold text-accent4 whitespace-nowrap';
                    dateText.textContent = date;

                    const divider = document.createElement('div');
                    divider.className = 'flex-1 border-t-2 border-accent4';

                    dateHeader.appendChild(dateText);
                    dateHeader.appendChild(divider);
                    elements.list.appendChild(dateHeader);

                    items.forEach(item => {
                        const { cartItem: ci, book } = item;
                        if (!book) return;

                        const authorNames = book.authorBooks?.map(ab => ab.author.name).join(', ') || 'Unknown Author';
                        const effectivePrice = window.calculateBookPrice(book);
                        const isOnSale = effectivePrice < book.price;
                        const div = document.createElement('div');
                        div.className = 'border border-accent1 bg-primary p-4 rounded shadow flex items-center justify-between ml-4';
                        div.innerHTML = `
                            <div class="flex-1">
                                <p class="text-accent3 text-lg font-semibold">${book.title}</p>
                                <p class="text-accent1">${authorNames}</p>
                                <p class="text-accent1">Price: ${isOnSale ? `<span class="text-accent4">Rs. ${effectivePrice.toFixed(2)}</span> <span class="text-accent1 line-through">Rs. ${book.price.toFixed(2)}</span>` : `Rs. ${book.price.toFixed(2)}`}</p>
                                <p class="text-accent1">Subtotal: Rs. ${ci.subTotal.toFixed(2)}</p>
                                <p class="text-accent1">Stock: ${book.availabilityStatus && book.stock > 0 ? `In Stock (${book.stock})` : 'Out of Stock'}</p>
                            </div>
                            <div class="flex items-center gap-2">
                                <input type="number" id="quantity-${ci.bookId}" value="${ci.quantity}" min="1" max="${book.stock}" class="border-accent1 w-16 rounded border p-1 text-center" ${book.stock <= 0 ? 'disabled' : ''}>
                                <button id="update-${ci.bookId}" class="bg-accent3 rounded px-3 py-1 text-white hover:bg-accent4" ${book.stock <= 0 ? 'disabled' : ''}>Update</button>
                                <button id="delete-${ci.bookId}" class="bg-accent3 rounded px-3 py-1 text-white hover:bg-red-600">Delete</button>
                            </div>
                        `;
                        elements.list.appendChild(div);

                        window.initializeCartButton(`update-${ci.bookId}`, ci.bookId, book);
                        window.initializeCartButton(`delete-${ci.bookId}`, ci.bookId, book);
                    });
                }
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to load cart items'
                });
            }
        };

        // applies promo code
        const applyPromoCode = async () => {
            const promoCode = elements.promoInput.value.trim();
            orderPromotion = await validatePromoCode(promoCode);
            const totalItems = cartItems.reduce((sum, ci) => sum + ci.quantity, 0);
            discounts = calculateDiscount(subtotal, totalItems, userOrdersCount, orderPromotion);
            if (promoCode && !orderPromotion) {
                Toast.fire({
                    icon: 'info',
                    title: 'Promo code removed'
                });
            } else if (orderPromotion) {
                Toast.fire({
                    icon: 'success',
                    title: `Promo code "${promoCode}" applied`
                });
            }
            updateSummary();
        };

        // proceeds to order summary
        const proceedToOrder = () => {
            if (!window.checkAuth('manage cart')) return;

            const orderData = {
                cartItems: cartItems.map((ci, index) => ({
                    bookId: ci.bookId,
                    quantity: ci.quantity,
                    subTotal: ci.subTotal,
                    book: books[index]
                })),
                subtotal,
                bookDiscount,
                discounts,
                total: subtotal - discounts.total,
                promoCode: elements.promoInput.value.trim()
            };
            localStorage.setItem('orderData', JSON.stringify(orderData));
            window.location.href = '/User/OrderSummary';
        };

        // initializes cart page
        document.addEventListener('DOMContentLoaded', () => {
            elements.applyPromo.addEventListener('click', applyPromoCode);
            elements.proceed.addEventListener('click', proceedToOrder);
            renderCartItems();
        });
    </script>
}