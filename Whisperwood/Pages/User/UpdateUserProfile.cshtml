@page "{id}"
@model Whisperwood.Pages.User.UpdateUserProfileModel
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@{
    var httpContext = HttpContextAccessor.HttpContext;
    string jwtToken = httpContext?.Request.Cookies["JwtToken"];
    bool isAdmin = false;

    try
    {
        var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
        var token = handler.ReadJwtToken(jwtToken);
        isAdmin = token?.Claims.Any(c => c.Type == "IsAdmin" && c.Value.Equals("true", StringComparison.OrdinalIgnoreCase)) ?? false;

        if (token.ValidTo < DateTime.UtcNow)
        {
            isAdmin = false;
        }
    }
    catch
    {
        isAdmin = false;
    }

    Layout = "_Layout";
    ViewData["Title"] = "Update Profile";
}

<div class="px-4 py-8">
    <h1 class="text-accent4 mb-4 text-4xl font-bold">Update Profile</h1>

    <div class="bg-primary border-accent4 mx-auto rounded border p-6 shadow-md">
        <div id="loading" class="text-accent2 hidden text-center text-lg">Updating profile...</div>

        <form id="update-profile-form" class="flex flex-col gap-6">
            <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
                <div>
                    <label for="name" class="text-accent4 font-semibold">Name</label>
                    <input type="text" id="name" name="name" class="border-accent3 text-accent3 w-full rounded border p-2"
                           placeholder="Enter your name" />
                </div>
                <div>
                    <label for="username" class="text-accent4 font-semibold">Username</label>
                    <input type="text" id="username" name="username" class="border-accent3 text-accent3 w-full rounded border p-2"
                           placeholder="Enter your username" />
                </div>
                <div>
                    <label for="email" class="text-accent4 font-semibold">Email</label>
                    <input type="email" id="email" name="email" class="border-accent3 text-accent3 w-full rounded border p-2"
                           placeholder="Enter your email" />
                </div>
                <div>
                    <label for="phoneNumber" class="text-accent4 font-semibold">Phone Number</label>
                    <input type="tel" id="phoneNumber" name="phoneNumber" class="border-accent3 text-accent3 w-full rounded border p-2"
                           placeholder="Enter your phone number" />
                </div>
                <div>
                    <label for="imageURL" class="text-accent4 font-semibold">Profile Image URL</label>
                    <input type="url" id="imageURL" name="imageURL" class="border-accent3 text-accent3 w-full rounded border p-2"
                           placeholder="Enter image URL" />
                </div>
                <!-- Admin-only fields -->
                <div id="admin-fields" class="grid hidden grid-cols-1 gap-4 sm:grid-cols-3">
                    <div>
                        <label for="isAdmin" class="text-accent4 font-semibold">Admin Status</label>
                        <select id="isAdmin" name="isAdmin" class="border-accent3 text-accent3 w-full rounded border p-2">
                            <option value="true">True</option>
                            <option value="false">False</option>
                        </select>
                    </div>
                    <div>
                        <label for="isStaff" class="text-accent4 font-semibold">Staff Status</label>
                        <select id="isStaff" name="isStaff" class="border-accent3 text-accent3 w-full rounded border p-2">
                            <option value="true">True</option>
                            <option value="false">False</option>
                        </select>
                    </div>
                    <div>
                        <label for="isActive" class="text-accent4 font-semibold">Active Status</label>
                        <select id="isActive" name="isActive" class="border-accent3 text-accent3 w-full rounded border p-2">
                            <option value="true">True</option>
                            <option value="false">False</option>
                        </select>
                    </div>
                </div>
            </div>
            <div class="flex justify-end gap-4">
                <button type="button" id="cancel-button" class="bg-accent2 text-primary rounded px-4 py-2 hover:bg-accent3">Cancel</button>
                <button type="submit" id="submit-button" class="bg-accent4 text-primary rounded px-4 py-2 hover:bg-accent5">Update Profile</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', async () => {
            const form = document.getElementById('update-profile-form');
            const loadingElement = document.getElementById('loading');
            const cancelButton = document.getElementById('cancel-button');
            const adminFields = document.getElementById('admin-fields');

            // Get userId
            const targetUserId = window.location.pathname.split('/').pop();

            // Check if logged-in user is admin 
            async function checkAdminStatus() {
            try {
                const response = await fetch('https://localhost:7018/api/Auth/user', {
                    headers: {
                        'Authorization': `Bearer ${window.jwtToken}`
                    }
                });

                if (response.ok) {
                    const loggedInUser = await response.json();
                    window.loggedInUserId = loggedInUser.id;
                    // Only show admin fields if editing another user
                    if (loggedInUser.isAdmin && loggedInUser.id !== targetUserId) {
                        adminFields.classList.remove('hidden');
                    }
                }
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: 'Failed to verify admin status.'
                });
            }
        }


            // Fetch current user data to prefill form
            async function fetchUserProfile() {
                try {
                    const endpoint = `https://localhost:7018/api/Auth/getuserbyid/${targetUserId}`;
                    const response = await fetch(endpoint, {
                        headers: {
                            'Authorization': `Bearer ${window.jwtToken}`
                        }
                    });
                    if (!response.ok) {
                        throw new Error('Failed to load profile.');
                    }
                    const user = await response.json();
                    document.getElementById('name').value = user.name || '';
                    document.getElementById('username').value = user.userName || '';
                    document.getElementById('email').value = user.email || '';
                    document.getElementById('phoneNumber').value = user.phoneNumber || '';
                    document.getElementById('imageURL').value = user.imageURL || '';
                    if (user.isAdmin || user.isStaff || user.isActive) {
                        document.getElementById('isAdmin').value = user.isAdmin ? 'true' : user.isAdmin === false ? 'false' : '';
                        document.getElementById('isStaff').value = user.isStaff ? 'true' : user.isStaff === false ? 'false' : '';
                        document.getElementById('isActive').value = user.isActive ? 'true' : user.isActive === false ? 'false' : '';
                    }
                } catch (error) {
                    Toast.fire({
                        icon: 'error',
                        title: error.message || 'Failed to fetch user profile'
                    });
                }
            }

            // Form validation
            function validateForm() {
                let isValid = true;
                const name = document.getElementById('name').value.trim();
                const email = document.getElementById('email').value.trim();
                const errors = [];

                if (!name) {
                    errors.push('Name is required');
                    isValid = false;
                }

                if (!email || !/^[^\s]+[^\s]+\.[^\s]+$/.test(email)) {
                    errors.push('Valid email is required');
                    isValid = false;
                }

                if (errors.length > 0) {
                    Toast.fire({
                        icon: 'error',
                        title: errors.join('\n')
                    });
                }

                return isValid;
            }

            // Handle form submission
            form.addEventListener('submit', async (e) => {
                e.preventDefault();
                if (!validateForm()) return;

                loadingElement.classList.remove('hidden');
                const userId = targetUserId || await loggedInUserId();
                if (!userId) {
                    Toast.fire({
                        icon: 'error',
                        title: 'User ID not found.'
                    });
                    loadingElement.classList.add('hidden');
                    return;
                }

                function getFieldBooleanValue(fieldId) {
                    if (adminFields.classList.contains('hidden')) return null;
                    const value = document.getElementById(fieldId).value;
                    return value === '' ? null : value === 'true';
                }

                const formData = {
                    id: userId,
                    name: document.getElementById('name').value.trim(),
                    username: document.getElementById('username').value.trim() || null,
                    email: document.getElementById('email').value.trim(),
                    phoneNumber: document.getElementById('phoneNumber').value.trim() || null,
                    imageURL: document.getElementById('imageURL').value.trim() || null,
                    isAdmin: getFieldBooleanValue('isAdmin'),
                    isStaff: getFieldBooleanValue('isStaff'),
                    isActive: getFieldBooleanValue('isActive')
                };


                try {
                    const response = await fetch(`https://localhost:7018/api/Auth/updateuserbyid/${userId}`, {
                        method: 'PUT',
                        headers: {
                            'Authorization': `Bearer ${window.jwtToken}`,
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(formData)
                    });

                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Failed to update profile.');
                    }

                    Toast.fire({
                        icon: 'success',
                        title: 'Profile updated successfully!'
                    });
                    setTimeout(() => {
                        window.location = document.referrer;
                    }, 1000);
                } catch (error) {
                    Toast.fire({
                        icon: 'error',
                        title: error.message || 'Failed to update profile'
                    });
                } finally {
                    loadingElement.classList.add('hidden');
                }
            });

            // Handle cancel button
            cancelButton.addEventListener('click', () => {
                window.history.back();
            });

            // Get logged-in user ID for API calls
            async function loggedInUserId() {
                const response = await fetch('https://localhost:7018/api/Auth/user', {
                    headers: {
                        'Authorization': `Bearer ${window.jwtToken}`
                    }
                });
                if (response.ok) {
                    const user = await response.json();
                    return user.id;
                }
                return null;
            }

            await checkAdminStatus();
            await fetchUserProfile();
        });
    </script>
}