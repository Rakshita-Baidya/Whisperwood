@page
@model Whisperwood.Pages.User.UserOrderModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "My Orders";
}

<div class="container mx-auto px-6 py-8">
    <h1 class="text-3xl font-bold text-center text-accent4 mb-6">My Orders</h1>

    <div id="error-message" class="hidden mb-4 text-center text-red-600"></div>
    <div id="success-message" class="hidden mb-4 text-center text-green-600"></div>
    <div id="loading-message" class="text-center text-accent2 text-lg">Loading orders...</div>

    <div id="order-list" class="hidden">
        <table class="w-full text-accent2 border border-accent1">
            <thead>
                <tr class="bg-accent3 text-white">
                    <th class="p-2 text-left">Order ID</th>
                    <th class="p-2 text-left">Date</th>
                    <th class="p-2 text-left">Status</th>
                    <th class="p-2 text-left">Total</th>
                    <th class="p-2 text-left">Actions</th>
                </tr>
            </thead>
            <tbody id="order-table-body"></tbody>
        </table>
    </div>
    <p id="no-orders" class="hidden text-center text-accent2 text-lg">No orders found.</p>
</div>

@section Scripts {
    <script>
        const orderList = document.getElementById("order-list");
        const orderTableBody = document.getElementById("order-table-body");
        const error = document.getElementById("error-message");
        const success = document.getElementById("success-message");
        const noOrders = document.getElementById("no-orders");
        const loading = document.getElementById("loading-message");

        function showError(message) {
            error.textContent = message;
            error.classList.remove("hidden");
            success.classList.add("hidden");
            loading.classList.add("hidden");
            orderList.classList.add("hidden");
        }

        function showSuccess(message) {
            success.textContent = message;
            success.classList.remove("hidden");
            error.classList.add("hidden");
            loading.classList.add("hidden");
        }

        async function fetchOrders(userId) {
            try {
                const response = await fetch(`https://localhost:7018/api/Order/getbyuser/${userId}`, {
                    headers: { "Authorization": `Bearer ${window.jwtToken || ''}` }
                });
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || "Failed to fetch orders.");
                }
                return await response.json();
            } catch (err) {
                showError(err.message);
                return [];
            }
        }

        async function cancelOrder(orderId) {
            try {
                const response = await fetch(`https://localhost:7018/api/Order/update/${orderId}`, {
                    method: 'PUT',
                    headers: {
                        "Authorization": `Bearer ${window.jwtToken || ''}`,
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({ status: 1 })
                });
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || "Failed to cancel order.");
                }
                return true;
            } catch (err) {
                showError(err.message);
                return false;
            }
        }

        function getStatusText(status) {
            return status === 0 ? "Pending" : status === 1 ? "Cancelled" : status === 2 ? "Fulfilled" : "Unknown";
        }

        async function loadOrders() {
            if (!window.isAuthenticated || !window.userId) {
                showError("Please log in.");
                setTimeout(() => window.location.href = '/User/Login', 1000);
                return;
            }

            const orders = await fetchOrders(window.userId);
            loading.classList.add("hidden");

            if (!orders || orders.length === 0) {
                noOrders.classList.remove("hidden");
                return;
            }

            orderList.classList.remove("hidden");
            orderTableBody.innerHTML = orders.map(order => `
                <tr class="border-b border-accent1">
                    <td class="p-2">${order.id}</td>
                    <td class="p-2">${new Date(order.orderedAt).toLocaleDateString()}</td>
                    <td class="p-2">${getStatusText(order.status)}</td>
                    <td class="p-2">Rs. ${order.totalAmount.toFixed(2)}</td>
                    <td class="p-2">
                        <a href="/User/OrderDetail?orderId=${order.id}" class="text-accent3 hover:text-accent4">View Details</a>
                        ${order.bill?.billUrl ? ` | <a href="${order.bill.billUrl}" class="text-blue-500 hover:text-blue-600" download>Download Bill</a>` : ''}
                        ${order.status === 0 ? ` | <button class="cancel-order text-red-500 hover:text-red-600" data-order-id="${order.id}">Cancel</button>` : ''}
                    </td>
                </tr>
            `).join('');

            document.querySelectorAll('.cancel-order').forEach(button => {
                button.addEventListener('click', async () => {
                    const orderId = button.dataset.orderId;
                    if (confirm("Are you sure you want to cancel this order?")) {
                        const success = await cancelOrder(orderId);
                        if (success) {
                            showSuccess("Order cancelled successfully.");
                            setTimeout(() => location.reload(), 1000);
                        }
                    }
                });
            });
        }

        document.addEventListener("DOMContentLoaded", loadOrders);
    </script>
}