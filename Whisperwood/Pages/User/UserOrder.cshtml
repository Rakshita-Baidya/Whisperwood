@page
@model Whisperwood.Pages.User.UserOrderModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "My Orders";
}

<div class="container mx-auto px-6 py-8">
    <h1 class="text-accent4 mb-6 text-center text-3xl font-bold">My Orders</h1>
    <div id="order-list" class="hidden">
        <table class="border-accent1 text-accent2 w-full border">
            <thead>
                <tr class="bg-accent4 text-white">
                    <th class="p-2 text-left">Order ID</th>
                    <th class="p-2 text-left">Date</th>
                    <th class="p-2 text-left">Status</th>
                    <th class="p-2 text-left">Total</th>
                    <th class="p-2 text-left">Actions</th>
                </tr>
            </thead>
            <tbody id="order-table-body"></tbody>
        </table>
    </div>
    <p id="no-orders" class="text-accent2 hidden text-center text-lg">No orders found.</p>
</div>

@section Scripts {
    <script>
        // caches dom elements
        const elements = {
            list: document.getElementById('order-list'),
            tableBody: document.getElementById('order-table-body'),
            noOrders: document.getElementById('no-orders')
        };

        // fetches user id
        const fetchUserId = async () => {
            if (!window.checkAuth('view orders')) return null;
            try {
                const response = await fetch('https://localhost:7018/api/Auth/user', {
                    headers: { 'Authorization': `Bearer ${window.jwtToken}` }
                });
                if (response.status === 401) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Please log in to view orders'
                    }).then(() => window.location.href = '/User/Login');
                    return null;
                }
                if (!response.ok) throw new Error('Failed to fetch user');
                const data = await response.json();
                return data.id;
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to fetch user'
                });
                return null;
            }
        };

        // fetches orders
        const fetchOrders = async (userId) => {
            if (!userId) return [];
            try {
                const response = await fetch(`https://localhost:7018/api/Order/getbyuser/${userId}`, {
                    headers: { 'Authorization': `Bearer ${window.jwtToken}` }
                });
                if (response.status === 401) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Please log in to view orders'
                    }).then(() => window.location.href = '/User/Login');
                    return [];
                }
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to fetch orders');
                }
                return await response.json();
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to fetch orders'
                });
                return [];
            }
        };

        // cancels order
        const cancelOrder = async (orderId, button) => {
            const result = await Swal.fire({
                title: 'Cancel Order',
                text: 'Are you sure you want to cancel this order?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: 'red',
                cancelButtonColor: 'grey',
                confirmButtonText: 'Cancel Order',
                cancelButtonText: 'Keep'
            });
            if (!result.isConfirmed) return false;

            button.disabled = true;
            button.textContent = 'Cancelling...';
            try {
                const response = await fetch(`https://localhost:7018/api/Order/update/${orderId}`, {
                    method: 'PUT',
                    headers: {
                        'Authorization': `Bearer ${window.jwtToken}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ status: 1 })
                });
                if (response.status === 401) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Please log in to cancel order'
                    }).then(() => window.location.href = '/User/Login');
                    return false;
                }
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to cancel order');
                }
                return true;
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to cancel order'
                });
                return false;
            } finally {
                button.disabled = false;
                button.textContent = 'Cancel';
            }
        };

        // gets status text
        const getStatusText = (status) => {
            return status === 0 ? 'Pending' : status === 1 ? 'Cancelled' : status === 2 ? 'Fulfilled' : 'Unknown';
        };

        // loads orders
        const loadOrders = async () => {
            if (!window.checkAuth('view orders')) return;
            
            
            Toast.fire({
                icon: 'info',
                title: 'Loading orders...',
                timer: 1000
            });

            const userId = await fetchUserId();
            if (!userId) return;

            const orders = await fetchOrders(userId);
            if (!orders?.length) {
                elements.noOrders.classList.remove('hidden');
                return;
            }
            // Sort by status, then by date
            orders.sort((a, b) => {
                if (a.status !== b.status) return a.status - b.status;
                return new Date(b.orderedAt) - new Date(a.orderedAt);
            });

            elements.list.classList.remove('hidden');
            elements.tableBody.innerHTML = orders.map(order => `
                <tr class="border-accent1 border-b bg-white">
                    <td class="p-2">${order.id}</td>

                    <td class="p-2">${new Date(order.orderedAt).toLocaleDateString()}</td>
                    <td class="p-2">${getStatusText(order.status)}</td>
                    <td class="p-2">Rs. ${order.totalAmount.toFixed(2)}</td>
                    <td class="space-x-2">
                        <a href="/User/OrderDetail?orderId=${order.id}" class="bg-accent3 inline-block rounded px-3 py-1 text-center text-white hover:bg-accent4">View Details</a>
                        ${order.status === 0 ? `<button class="cancel-order rounded bg-red-500 px-3 py-1 text-white hover:bg-red-600" data-order-id="${order.id}"> Cancel </button>` : ''}
                    </td>
                </tr>
            `).join('');

            document.querySelectorAll('.cancel-order').forEach(button => {
                button.addEventListener('click', async () => {
                    const orderId = button.dataset.orderId;
                    const success = await cancelOrder(orderId, button);
                    if (success) {
                        Toast.fire({
                            icon: 'success',
                            title: 'Order cancelled successfully'
                        }).then(() => location.reload());
                    }
                });
            });
        };

        // initializes page
        document.addEventListener('DOMContentLoaded', loadOrders);
    </script>
}