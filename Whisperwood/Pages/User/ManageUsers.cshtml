@page
@model Whisperwood.Pages.User.ManageUsersModel
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@{
    var httpContext = HttpContextAccessor.HttpContext;
    string jwtToken = httpContext?.Request.Cookies["JwtToken"];
    bool isAdmin = false;

    if (!string.IsNullOrEmpty(jwtToken))
    {
        try
        {
            var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
            var token = handler.ReadJwtToken(jwtToken);
            isAdmin = token?.Claims.Any(c => c.Type == "IsAdmin" && c.Value.Equals("true", StringComparison.OrdinalIgnoreCase)) ?? false;

            if (token.ValidTo < DateTime.UtcNow)
            {
                isAdmin = false;
            }
        }
        catch
        {
            isAdmin = false;
        }
    }

    if (!isAdmin)
    {
        httpContext.Response.Redirect("/Error");
        return;
    }

    Layout = "_Layout";
    ViewData["Title"] = "Manage Users";
}

<div class="px-4 py-8">
    <div class="mb-4 flex justify-between">
        <h1 class="text-accent4 text-center text-4xl font-bold">Manage Users</h1>
        <div class="flex space-x-4 text-white">
            <button id="filter-button" class="bg-accent3 rounded px-4 py-2 hover:bg-accent4">Filter Users</button>
        </div>
    </div>
    <div id="filter-section" class="bg-primary border-accent3 mb-8 hidden rounded border p-6 shadow-md">
        <form id="filter-form" class="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3">
            <div>
                <label for="search" class="text-accent3 mb-1 block font-medium">Search</label>
                <input type="text" id="search" name="search" class="border-accent1 w-full rounded border p-2" placeholder="Search by name, username, or email" />
            </div>
            <div>
                <label for="sortBy" class="text-accent3 mb-1 block font-medium">Sort By</label>
                <select id="sortBy" name="sortBy" class="border-accent1 w-full rounded border p-[10px]">
                    <option value="name">Name</option>
                    <option value="username">Username</option>
                    <option value="email">Email</option>
                    <option value="isAdmin">Admin Status</option>
                    <option value="isStaff">Staff Status</option>
                    <option value="isActive">Active Status</option>
                </select>
            </div>
            <div>
                <label for="sortOrder" class="text-accent3 mb-1 block font-medium">Sort Order</label>
                <select id="sortOrder" name="sortOrder" class="border-accent1 w-full rounded border p-[10px]">
                    <option value="asc">Ascending</option>
                    <option value="desc">Descending</option>
                </select>
            </div>
            <div>
                <label for="isAdmin" class="text-accent3 mb-1 block font-medium">Admin Status</label>
                <select id="isAdmin" name="isAdmin" class="border-accent1 w-full rounded border p-[10px]">
                    <option value="">All</option>
                    <option value="true">True</option>
                    <option value="false">False</option>
                </select>
            </div>
            <div>
                <label for="isStaff" class="text-accent3 mb-1 block font-medium">Staff Status</label>
                <select id="isStaff" name="isStaff" class="border-accent1 w-full rounded border p-[10px]">
                    <option value="">All</option>
                    <option value="true">True</option>
                    <option value="false">False</option>
                </select>
            </div>
            <div>
                <label for="isActive" class="text-accent3 mb-1 block font-medium">Active Status</label>
                <select id="isActive" name="isActive" class="border-accent1 w-full rounded border p-[10px]">
                    <option value="">All</option>
                    <option value="true">True</option>
                    <option value="false">False</option>
                </select>
            </div>
            <div class="flex items-end justify-end gap-2">
                <button type="submit" class="bg-accent3 rounded px-4 py-2 text-white hover:bg-accent4">Apply Filters</button>
                <button type="button" id="clear-filters" class="rounded bg-gray-500 px-4 py-2 text-white hover:bg-gray-600">Clear Filters</button>
            </div>
        </form>
    </div>

    <div id="user-list" class="hidden">
        <table class="text-accent2 border-accent1 w-full border">
            <thead>
                <tr class="bg-accent4 text-white">
                    <th class="p-2 text-left">Name</th>
                    <th class="p-2 text-left">Username</th>
                    <th class="p-2 text-left">Email</th>
                    <th class="p-2 text-left">Phone Number</th>
                    <th class="p-2 text-left">Admin</th>
                    <th class="p-2 text-left">Staff</th>
                    <th class="p-2 text-left">Active</th>
                    <th class="p-2 text-center">Actions</th>
                </tr>
            </thead>
            <tbody id="users-table-body" class="bg-white"></tbody>
        </table>
    </div>

    <div id="no-users" class="text-accent2 mt-4 hidden text-center text-lg">No users found.</div>

    <div id="pagination-container" class="mt-6 flex justify-center gap-2"></div>
</div>

@section Scripts {
    <script>
        // Configuration constants
        const pageSize = 8;
        let currentPage = 1;
        let allUsers = [];
        let originalUsers = [];

        // Formats boolean values
        const formatBoolean = (value) => {
            return value ? 'Yes' : value === false ? 'No' : '-';
        };

        // Validates filter inputs
        const validateFilters = (params) => {
            // Validate status fields (if selected, must be valid)
            if (params.isAdmin && !['true', 'false'].includes(params.isAdmin)) {
                Toast.fire({
                    icon: 'error',
                    title: 'Invalid admin status selected.'
                });
                return false;
            }
            if (params.isStaff && !['true', 'false'].includes(params.isStaff)) {
                Toast.fire({
                    icon: 'error',
                    title: 'Invalid staff status selected.'
                });
                return false;
            }
            if (params.isActive && !['true', 'false'].includes(params.isActive)) {
                Toast.fire({
                    icon: 'error',
                    title: 'Invalid active status selected.'
                });
                return false;
            }
            return true;
        };

        // Fetches all users from API
        const fetchUsers = async () => {
            try {
                const response = await fetch('https://localhost:7018/api/Auth/getallusers', {
                    headers: {
                        'Authorization': `Bearer ${window.jwtToken}`
                    }
                });
                if (!response.ok) {
                    throw new Error('Failed to load users.');
                }

                originalUsers = await response.json();
                allUsers = [...originalUsers];
                renderUsers(currentPage);
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to load users.'
                });
            }
        };

        // Renders users for the current page
        const renderUsers = (page) => {
            const usersTableBody = document.getElementById('users-table-body');
            const noUsersElement = document.getElementById('no-users');
            const paginationContainer = document.getElementById('pagination-container');
            const userList = document.getElementById('user-list');

            usersTableBody.innerHTML = '';

            if (allUsers.length === 0) {
                noUsersElement.classList.remove('hidden');
                userList.classList.add('hidden');
                paginationContainer.innerHTML = '';
                return;
            }

            const startIndex = (page - 1) * pageSize;
            const endIndex = Math.min(startIndex + pageSize, allUsers.length);
            const paginatedUsers = allUsers.slice(startIndex, endIndex);

            if (paginatedUsers.length > 0) {
                userList.classList.remove('hidden');
                noUsersElement.classList.add('hidden');

                paginatedUsers.forEach(user => {
                    const row = document.createElement('tr');
                    row.className = 'border-b border-accent1';
                    row.innerHTML = `
                        <td class="p-2">${user.name || '-'}</td>
                        <td class="p-2">${user.userName || '-'}</td>
                        <td class="p-2">${user.email || '-'}</td>
                        <td class="p-2">${user.phoneNumber || '-'}</td>
                        <td class="p-2">${formatBoolean(user.isAdmin)}</td>
                        <td class="p-2">${formatBoolean(user.isStaff)}</td>
                        <td class="p-2">${formatBoolean(user.isActive)}</td>
                        <td class="p-2">
                            <div class="flex justify-center space-x-2">
                                <a href="/User/UpdateUserProfile/${user.id}" class="bg-accent3 rounded px-3 py-1 text-white hover:bg-accent4">Edit</a>
                            </div>
                        </td>
                    `;
                    usersTableBody.appendChild(row);
                });

                const totalPages = Math.ceil(allUsers.length / pageSize);
                createPaginationControls('pagination-container', totalPages, page, (newPage) => {
                    currentPage = newPage;
                    renderUsers(newPage);
                });
            } else {
                noUsersElement.classList.remove('hidden');
                userList.classList.add('hidden');
                paginationContainer.innerHTML = '';
            }
        };

        // Gets filter parameters from form
        const getUserFilterParams = () => ({
            search: document.getElementById('search').value.trim().toLowerCase(),
            isAdmin: document.getElementById('isAdmin').value,
            isStaff: document.getElementById('isStaff').value,
            isActive: document.getElementById('isActive').value,
            sortBy: document.getElementById('sortBy').value,
            sortOrder: document.getElementById('sortOrder').value
        });

        // Filters users based on parameters
        const filterUsers = (users, params) => {
            return users
                .filter(u => {
                    // Filter by search (name, username, or email)
                    if (params.search) {
                        return (u.name?.toLowerCase().includes(params.search) ||
                                u.userName?.toLowerCase().includes(params.search) ||
                                u.email?.toLowerCase().includes(params.search));
                    }
                    return true;
                })
                .filter(u => {
                    // Filter by admin status
                    if (params.isAdmin) {
                        return u.isAdmin === (params.isAdmin === 'true');
                    }
                    return true;
                })
                .filter(u => {
                    // Filter by staff status
                    if (params.isStaff) {
                        return u.isStaff === (params.isStaff === 'true');
                    }
                    return true;
                })
                .filter(u => {
                    // Filter by active status
                    if (params.isActive) {
                        return u.isActive === (params.isActive === 'true');
                    }
                    return true;
                })
                .sort((a, b) => {
                    // Sort by selected field and order
                    let fieldA, fieldB;
                    switch (params.sortBy) {
                        case 'name':
                            fieldA = a.name?.toLowerCase() || '';
                            fieldB = b.name?.toLowerCase() || '';
                            break;
                        case 'username':
                            fieldA = a.userName?.toLowerCase() || '';
                            fieldB = b.userName?.toLowerCase() || '';
                            break;
                        case 'email':
                            fieldA = a.email?.toLowerCase() || '';
                            fieldB = b.email?.toLowerCase() || '';
                            break;
                        case 'isAdmin':
                            fieldA = a.isAdmin ? 1 : 0;
                            fieldB = b.isAdmin ? 1 : 0;
                            break;
                        case 'isStaff':
                            fieldA = a.isStaff ? 1 : 0;
                            fieldB = b.isStaff ? 1 : 0;
                            break;
                        case 'isActive':
                            fieldA = a.isActive ? 1 : 0;
                            fieldB = b.isActive ? 1 : 0;
                            break;
                    }
                    const comparison = fieldA > fieldB ? 1 : fieldA < fieldB ? -1 : 0;
                    return params.sortOrder === 'asc' ? comparison : -comparison;
                });
        };

        // Clears filter form inputs
        const clearUserFilters = () => {
            document.getElementById('search').value = '';
            document.getElementById('isAdmin').value = '';
            document.getElementById('isStaff').value = '';
            document.getElementById('isActive').value = '';
            document.getElementById('sortBy').value = 'name';
            document.getElementById('sortOrder').value = 'asc';
        };

        // Initializes event listeners on DOM load
        document.addEventListener('DOMContentLoaded', () => {
            // Cache DOM elements
            const filterButton = document.getElementById('filter-button');
            const filterSection = document.getElementById('filter-section');
            const filterForm = document.getElementById('filter-form');
            const clearUserFiltersButton = document.getElementById('clear-filters');

            // Toggle filter section visibility
            filterButton.addEventListener('click', () => {
                filterSection.classList.toggle('hidden');
            });

            // Handle filter form submission
            filterForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const params = getUserFilterParams();
                if (!validateFilters(params)) return;
                allUsers = filterUsers(originalUsers, params);
                currentPage = 1;
                renderUsers(currentPage);
            });

            // Handle clear filters
            clearUserFiltersButton.addEventListener('click', () => {
                clearUserFilters();
                allUsers = [...originalUsers];
                currentPage = 1;
                renderUsers(currentPage);
            });

            // Fetch initial users
            fetchUsers();
        });
    </script>
}