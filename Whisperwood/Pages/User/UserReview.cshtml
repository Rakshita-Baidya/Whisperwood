@page
@model Whisperwood.Pages.User.UserReviewModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "My Reviews";
}

<div class="container mx-auto px-6 py-8">
    <h1 class="text-accent4 mb-4 text-4xl font-bold">My Reviews</h1>

    <!-- Pending Reviews Section -->
    <div id="pending-reviews-section" class="mb-8">
        <h2 class="text-accent4 mb-4 text-2xl font-semibold">Pending Reviews</h2>
        <div id="pending-reviews-list" class="hidden">
            <table class="border-accent1 text-accent2 w-full border">
                <thead>
                    <tr class="bg-accent4 text-white">
                        <th class="p-2 text-left">Book Image</th>
                        <th class="p-2 text-left">Book Title</th>
                        <th class="p-2 text-left">ISBN</th>
                        <th class="p-2 text-left">Price</th>
                        <th class="p-2 text-left">Language</th>
                        <th class="p-2 text-center">Action</th>
                    </tr>
                </thead>
                <tbody id="pending-reviews-table-body"></tbody>
            </table>
        </div>
        <p id="no-pending-reviews" class="text-accent2 hidden text-center text-lg">No pending reviews. All fulfilled orders have been reviewed.</p>
    </div>

    <!-- Existing Reviews Section -->
    <div id="review-list" class="hidden">
        <h2 class="text-accent4 mb-4 text-2xl font-semibold">My Posted Reviews</h2>
        <table class="border-accent1 text-accent2 w-full border">
            <thead>
                <tr class="bg-accent4 text-white">
                    <th class="p-2 text-left">Book Image</th>
                    <th class="p-2 text-left">Book Title</th>
                    <th class="p-2 text-left">ISBN</th>
                    <th class="p-2 text-left">Price</th>
                    <th class="p-2 text-left">Language</th>
                    <th class="p-2 text-left">Rating</th>
                    <th class="p-2 text-left">Comment</th>
                    <th class="p-2 text-left">Posted Date</th>
                    <th class="p-2 text-center">Actions</th>
                </tr>
            </thead>
            <tbody id="review-table-body"></tbody>
        </table>
        <div id="pagination-controls" class="mt-4 flex justify-center space-x-2"></div>
    </div>
    <p id="no-reviews" class="text-accent2 hidden text-center text-lg">You haven’t posted any reviews yet.</p>
</div>

@section Scripts {
    <script>
        // caches DOM elements
        const elements = {
            list: document.getElementById('review-list'),
            tableBody: document.getElementById('review-table-body'),
            noReviews: document.getElementById('no-reviews'),
            pagination: document.getElementById('pagination-controls'),
            pendingList: document.getElementById('pending-reviews-list'),
            pendingTableBody: document.getElementById('pending-reviews-table-body'),
            noPendingReviews: document.getElementById('no-pending-reviews')
        };

        // pagination settings
        const reviewsPerPage = 5;
        let currentPage = 1;
        let allReviews = [];
        let pendingReviews = [];

        // fetches user ID
        const fetchUserId = async () => {
            if (!window.checkAuth('view reviews')) return null;
            try {
                const response = await fetch('https://localhost:7018/api/Auth/user', {
                    headers: { 'Authorization': `Bearer ${window.jwtToken}` }
                });
                if (response.status === 401) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Please log in to view reviews'
                    }).then(() => window.location.href = '/User/Login');
                    return null;
                }
                if (!response.ok) throw new Error('Failed to fetch user');
                const data = await response.json();
                return data.id;
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to fetch user'
                });
                return null;
            }
        };

        // fetches user reviews
        const fetchReviews = async () => {
            if (!window.checkAuth('view reviews')) return [];
            try {
                const response = await fetch('https://localhost:7018/api/Review/getbyuserid', {
                    headers: { 'Authorization': `Bearer ${window.jwtToken}` }
                });
                if (response.status === 401) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Please log in to view reviews'
                    }).then(() => window.location.href = '/User/Login');
                    return [];
                }
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to fetch reviews');
                }
                const reviews = await response.json();
                return reviews;
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to fetch reviews'
                });
                return [];
            }
        };

        // fetches user orders
        const fetchOrders = async (userId) => {
            if (!window.checkAuth('view orders')) return [];
            try {
                const response = await fetch(`https://localhost:7018/api/Order/getbyuser/${userId}`, {
                    headers: { 'Authorization': `Bearer ${window.jwtToken}` }
                });
                if (response.status === 401) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Please log in to view orders'
                    }).then(() => window.location.href = '/User/Login');
                    return [];
                }
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to fetch orders');
                }
                const orders = await response.json();
                return orders;
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to fetch orders'
                });
                return [];
            }
        };

        // deletes review
        const deleteReview = async (reviewId, button) => {
            const result = await Swal.fire({
                title: 'Delete Review',
                text: 'Are you sure you want to delete this review?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: 'red',
                cancelButtonColor: 'grey',
                confirmButtonText: 'Delete Review',
                cancelButtonText: 'Keep'
            });
            if (!result.isConfirmed) return false;

            button.disabled = true;
            button.textContent = 'Deleting...';
            try {
                const response = await fetch(`https://localhost:7018/api/Review/delete/${reviewId}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${window.jwtToken}` }
                });
                if (response.status === 401) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Please log in to delete review'
                    }).then(() => window.location.href = '/User/Login');
                    return false;
                }
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to delete review');
                }
                return true;
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to delete review'
                });
                return false;
            } finally {
                button.disabled = false;
                button.textContent = 'Delete';
            }
        };

        // renders pending reviews
        const renderPendingReviews = () => {
            elements.pendingTableBody.innerHTML = pendingReviews.map(book => `
                <tr class="border-accent1 border-b bg-white">
                    <td class="p-2">
                        ${book.image
                            ? `<img src="${book.image}" alt="${book.title}" class="border-2 border-accent2 h-20 w-16 object-cover" />`
                            : `<div class="text-accent3 flex h-20 w-16 items-center justify-center">No Image</div>`
                        }
                    </td>
                    <td class="p-2">${book.title || 'Unknown'}</td>
                    <td class="p-2">${book.isbn || 'N/A'}</td>
                    <td class="p-2">Rs. ${book.price?.toFixed(2) || '0.00'}</td>
                    <td class="p-2">${book.language || 'N/A'}</td>
                    <td class="flex justify-center p-2">
                        <a href="/Review/AddReview?BookId=${book.id}" class="bg-accent3 rounded px-3 py-1 text-center text-white hover:bg-accent4">Add Review</a>
                    </td>
                </tr>
            `).join('');
            if (pendingReviews.length > 0) {
                elements.pendingList.classList.remove('hidden');
                elements.noPendingReviews.classList.add('hidden');
            } else {
                elements.pendingList.classList.add('hidden');
                elements.noPendingReviews.classList.remove('hidden');
            }
        };

        // renders reviews for the current page
        const renderReviews = (page) => {
            currentPage = page;
            const start = (page - 1) * reviewsPerPage;
            const end = start + reviewsPerPage;
            const paginatedReviews = allReviews.slice(start, end);

            elements.tableBody.innerHTML = paginatedReviews.map(review => `
                <tr class="border-accent1 border-b bg-white">
                    <td class="p-2">
                        ${review.books.coverImage?.coverImageURL
                            ? `<img src="${review.books.coverImage.coverImageURL}" alt="${review.books.title}" class="border-2 border-accent2 h-20 w-16 object-cover" />`
                            : `<div class="text-accent3 flex h-20 w-16 items-center justify-center">No Image</div>`
                        }
                    </td>
                    <td class="p-2">${review.books?.title || 'Unknown'}</td>
                    <td class="p-2">${review.books?.isbn || 'N/A'}</td>
                    <td class="p-2">Rs. ${review.books?.price?.toFixed(2) || '0.00'}</td>
                    <td class="p-2">${review.books?.language || 'N/A'}</td>
                    <td class="p-2">★ ${review.rating}</td>
                    <td class="max-w-xs truncate p-2">${review.message || 'No comment'}</td>
                    <td class="p-2">${new Date(review.createdAt).toLocaleDateString()}</td>
                    <td class="flex justify-center space-x-2 p-2">
                        <a href="/Review/EditReview/${review.id}" class="bg-accent3 rounded px-3 py-1 text-center text-white hover:bg-accent4">Edit</a>
                        <button class="delete-review rounded bg-red-500 px-3 py-1 text-white hover:bg-red-600" data-review-id="${review.id}">Delete</button>
                    </td>
                </tr>
            `).join('');

            const totalPages = Math.ceil(allReviews.length / reviewsPerPage);

            window.createPaginationControls('pagination-controls', totalPages, currentPage, renderReviews);

            document.querySelectorAll('.delete-review').forEach(button => {
                button.addEventListener('click', async () => {
                    const reviewId = button.dataset.reviewId;
                    const success = await deleteReview(reviewId, button);
                    if (success) {
                        Toast.fire({
                            icon: 'success',
                            title: 'Review deleted successfully'
                        }).then(() => location.reload());
                    }
                });
            });
        };

        // loads reviews and pending reviews
        const loadReviews = async () => {
            if (!window.checkAuth('view reviews')) return;
            const userId = await fetchUserId();
            if (!userId) return;

            // Fetch reviews and orders concurrently
            const reviews = await fetchReviews(); 
            const orders = await fetchOrders(userId);

            // Process reviews
            allReviews = reviews;
            if (!allReviews?.length) {
                elements.noReviews.classList.remove('hidden');
            } else {
                allReviews.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
                elements.list.classList.remove('hidden');
                renderReviews(1);
            }

            // Process pending reviews
            const fulfilledOrders = orders.filter(order => order.status === 2);

            // Extract unique books from order items
            const orderedBooks = [];
            fulfilledOrders.forEach(order => {
                order.orderItems?.forEach(item => {
                    if (item.book && !orderedBooks.some(b => b.id === item.book.id)) {
                        orderedBooks.push({
                            id: item.book.id,
                            image: item.book.coverImage.coverImageURL,
                            title: item.book.title,
                            isbn: item.book.isbn,
                            price: item.book.price,
                            language: item.book.language
                        });
                    }
                });
            });
;
            // Filter books not reviewed
            pendingReviews = orderedBooks.filter(book =>
                !allReviews.some(review => review.books?.id === book.id)
            );

            // Render pending reviews
            renderPendingReviews();
        };

        // initializes page
        document.addEventListener('DOMContentLoaded', loadReviews);
    </script>
}