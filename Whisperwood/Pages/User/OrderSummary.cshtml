@page
@model Whisperwood.Pages.User.OrderSummaryModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Order Summary";
}

<div class="container mx-auto px-6 py-8">
    <h1 class="text-accent4 mb-6 text-center text-3xl font-bold">Order Summary</h1>

    <div id="error-message" class="mb-4 hidden text-center text-red-600"></div>
    <div id="success-message" class="mb-4 hidden text-center text-green-600"></div>

    <div class="grid grid-cols-1 gap-6 lg:grid-cols-3">
        <div class="lg:col-span-2">
            <div class="overflow-x-auto">
                <table id="order-item-table" class="border-accent1 w-full border-collapse border">
                    <thead>
                        <tr class="bg-accent4 text-white">
                            <th class="border-accent1 border p-3 text-left">Book</th>
                            <th class="border-accent1 border p-3 text-left">Unit Cost</th>
                            <th class="border-accent1 border p-3 text-left">Quantity</th>
                            <th class="border-accent1 border p-3 text-left">Price</th>
                        </tr>
                    </thead>
                    <tbody id="order-item-list" class="space-y-2"></tbody>
                </table>
            </div>
            <p id="no-order-items" class="text-accent2 mt-4 hidden text-center text-lg">No items in your order.</p>
        </div>

        <div class="lg:col-span-1">
            <div class="bg-primary border-accent1 rounded border p-6 shadow">
                <h2 class="text-accent4 mb-4 text-xl font-semibold">Order Summary</h2>
                <div class="text-accent2 space-y-2">
                    <p><span class="font-medium">Subtotal (after book discounts):</span> Rs. <span id="order-subtotal">0.00</span></p>
                    <p id="book-discount-row" class="hidden"><span class="font-medium">Book Discounts (included in subtotal):</span> Rs. <span id="book-discount">0.00</span></p>
                    <p id="promo-row" class="hidden"><span class="font-medium">Promo Code:</span> <span id="promo-code"></span></p>
                    <p id="promo-discount-row" class="hidden"><span class="font-medium">Promo Code Discount:</span> Rs. <span id="promo-discount">0.00</span></p>
                    <p id="bulk-discount-row" class="hidden"><span class="font-medium">Bulk Items Discount (5%):</span> Rs. <span id="bulk-discount">0.00</span></p>
                    <p id="loyal-discount-row" class="hidden"><span class="font-medium">Loyal Customer Discount (10%):</span> Rs. <span id="loyal-discount">0.00</span></p>
                    <p id="total-discount-row" class="hidden"><span class="font-medium">Total Additional Discount:</span> Rs. <span id="total-discount">0.00</span></p>
                    <p class="text-lg font-semibold"><span class="font-medium">Total:</span> Rs. <span id="order-total">0.00</span></p>
                </div>
                <button id="confirm-order" class="bg-accent3 mt-4 w-full rounded px-3 py-2 text-white hover:bg-accent2 hover:text-white">Confirm Order</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const list = document.getElementById("order-item-list");
        const error = document.getElementById("error-message");
        const success = document.getElementById("success-message");
        const empty = document.getElementById("no-order-items");
        const subtotalElement = document.getElementById("order-subtotal");
        const bookDiscountElement = document.getElementById("book-discount");
        const promoDiscountElement = document.getElementById("promo-discount");
        const bulkDiscountElement = document.getElementById("bulk-discount");
        const loyalDiscountElement = document.getElementById("loyal-discount");
        const totalDiscountElement = document.getElementById("total-discount");
        const bookDiscountRow = document.getElementById("book-discount-row");
        const promoDiscountRow = document.getElementById("promo-discount-row");
        const bulkDiscountRow = document.getElementById("bulk-discount-row");
        const loyalDiscountRow = document.getElementById("loyal-discount-row");
        const totalDiscountRow = document.getElementById("total-discount-row");
        const promoElement = document.getElementById("promo-code");
        const promoRow = document.getElementById("promo-row");
        const totalElement = document.getElementById("order-total");
        const confirmButton = document.getElementById("confirm-order");

        let orderData;

        function loadOrderSummary() {
            const storedData = localStorage.getItem('orderData');
            if (!storedData) {
                empty.classList.remove("hidden");
                confirmButton.disabled = true;
                return;
            }

            orderData = JSON.parse(storedData);
            if (!orderData.cartItems || orderData.cartItems.length === 0) {
                empty.classList.remove("hidden");
                confirmButton.disabled = true;
                return;
            }

            list.innerHTML = '';
            orderData.cartItems.forEach(item => {
                if (!item.book) {
                    console.warn(`Skipping item for bookId ${item.bookId} due to missing book data`);
                    return;
                }

                const authorNames = item.book.authorBooks && item.book.authorBooks.length > 0
                    ? item.book.authorBooks.map(ab => ab.author.name).join(', ')
                    : 'Unknown Author';

                const effectivePrice = window.calculateBookPrice ? window.calculateBookPrice(item.book) : item.book.price;
                const isOnSale = effectivePrice < item.book.price;

                const row = document.createElement("tr");
                row.className = "border-b border-accent1 bg-primary";
                row.innerHTML = `
                    <td class="border-accent1 border p-3">
                        <p class="text-accent3 text-lg font-semibold">${item.book.title} <span class="text-accent1 font-normal italic"> by ${authorNames}</span></p>
                    </td>
                    <td class="border-accent1 text-accent1 border p-3">${isOnSale ? `<span class="text-red-500">Rs. ${effectivePrice.toFixed(2)}</span> <span class="text-accent1 line-through">Rs. ${item.book.price.toFixed(2)}</span>` : `Rs. ${item.book.price.toFixed(2)}`}</td>
                    <td class="border-accent1 text-accent1 border p-3">${item.quantity}</td>
                    <td class="border-accent1 text-accent1 border p-3">Rs. ${item.subTotal.toFixed(2)}</td>
                `;
                list.appendChild(row);
            });

            subtotalElement.textContent = orderData.subtotal.toFixed(2);
            bookDiscountElement.textContent = orderData.bookDiscount.toFixed(2);
            promoDiscountElement.textContent = orderData.discounts.promo.toFixed(2);
            bulkDiscountElement.textContent = orderData.discounts.bulk.toFixed(2);
            loyalDiscountElement.textContent = orderData.discounts.loyal.toFixed(2);
            totalDiscountElement.textContent = orderData.discounts.total.toFixed(2);
            totalElement.textContent = orderData.total.toFixed(2);

            if (orderData.promoCode) {
                promoElement.textContent = orderData.promoCode;
                promoRow.classList.remove("hidden");
            }

            bookDiscountRow.classList.toggle("hidden", orderData.bookDiscount === 0);
            promoDiscountRow.classList.toggle("hidden", orderData.discounts.promo === 0);
            bulkDiscountRow.classList.toggle("hidden", orderData.discounts.bulk === 0);
            loyalDiscountRow.classList.toggle("hidden", orderData.discounts.loyal === 0);
            totalDiscountRow.classList.toggle("hidden", orderData.discounts.total === 0);
        }

        function showSuccess(message) {
            success.textContent = message;
            success.classList.remove("hidden");
            error.classList.add("hidden");
        }

        function showError(message) {
            error.textContent = message;
            error.classList.remove("hidden");
            success.classList.add("hidden");
        }

        confirmButton.addEventListener("click", async () => {
            try {
                const response = await fetch("https://localhost:7018/api/Order/add", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "Authorization": `Bearer ${window.jwtToken || ''}`
                    },
                    body: JSON.stringify({ promoCode: orderData.promoCode })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || "Failed to place order.");
                }

                const result = await response.json();
                showSuccess("Order placed successfully! Order ID: " + result.orderId);
                localStorage.removeItem('orderData');
                setTimeout(() => {
                    window.location.href = '/User/UserCart';
                }, 5000);
            } catch (err) {
                console.error('Error placing order:', err);
                showError(err.message);
            }
        });

        document.addEventListener("DOMContentLoaded", () => {
            if (!window.jwtToken) {
                window.location.href = '/User/Login';
                return;
            }
            loadOrderSummary();
        });
    </script>
}