@page
@model Whisperwood.Pages.User.OrderSummaryModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Order Summary";
}

@* displays order summary *@
<div class="container mx-auto px-6 py-8">
    <h1 class="text-accent4 mb-6 text-center text-3xl font-bold">Order Summary</h1>
    <div class="grid grid-cols-1 gap-6 lg:grid-cols-3">
        @* order items table *@
        <div class="lg:col-span-2">
            <div class="overflow-x-auto">
                <table id="order-item-table" class="border-accent1 w-full border-collapse border">
                    <thead>
                        <tr class="bg-accent4 text-white">
                            <th class="border-accent1 border p-3 text-left">Book</th>
                            <th class="border-accent1 border p-3 text-left">Unit Cost</th>
                            <th class="border-accent1 border p-3 text-left">Quantity</th>
                            <th class="border-accent1 border p-3 text-left">Price</th>
                        </tr>
                    </thead>
                    <tbody id="order-item-list"></tbody>
                </table>
            </div>
            <p id="no-order-items" class="text-accent2 mt-4 hidden text-center text-lg">No items in your order.</p>
        </div>
        @* order summary details *@
        <div class="lg:col-span-1">
            <div class="bg-primary border-accent1 rounded border p-6 shadow">
                <h2 class="text-accent4 mb-4 text-xl font-semibold">Order Summary</h2>
                <div class="text-accent2 space-y-2">
                    <p><span class="font-medium">Subtotal (after book discounts):</span> Rs. <span id="order-subtotal">0.00</span></p>
                    <p id="book-discount-row" class="hidden"><span class="font-medium">Book Discounts (included in subtotal):</span> Rs. <span id="book-discount">0.00</span></p>
                    <p id="promo-row" class="hidden"><span class="font-medium">Promo Code:</span> <span id="promo-code"></span></p>
                    <p id="promo-discount-row" class="hidden"><span class="font-medium">Promo Code Discount:</span> Rs. <span id="promo-discount">0.00</span></p>
                    <p id="bulk-discount-row" class="hidden"><span class="font-medium">Bulk Items Discount (5%):</span> Rs. <span id="bulk-discount">0.00</span></p>
                    <p id="loyal-discount-row" class="hidden"><span class="font-medium">Loyal Customer Discount (10%):</span> Rs. <span id="loyal-discount">0.00</span></p>
                    <p id="total-discount-row" class="hidden"><span class="font-medium">Total Additional Discount:</span> Rs. <span id="total-discount">0.00</span></p>
                    <p class="text-accent4 text-lg font-semibold">Total: Rs. <span id="order-total">0.00</span></p>
                </div>
                <button id="confirm-order" class="bg-accent3 mt-4 w-full rounded px-3 py-2 text-white hover:bg-accent2">Confirm Order</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // caches dom elements
        const elements = {
            list: document.getElementById('order-item-list'),
            empty: document.getElementById('no-order-items'),
            subtotal: document.getElementById('order-subtotal'),
            bookDiscount: document.getElementById('book-discount'),
            promo: document.getElementById('promo-code'),
            promoDiscount: document.getElementById('promo-discount'),
            bulkDiscount: document.getElementById('bulk-discount'),
            loyalDiscount: document.getElementById('loyal-discount'),
            totalDiscount: document.getElementById('total-discount'),
            total: document.getElementById('order-total'),
            bookDiscountRow: document.getElementById('book-discount-row'),
            promoRow: document.getElementById('promo-row'),
            promoDiscountRow: document.getElementById('promo-discount-row'),
            bulkDiscountRow: document.getElementById('bulk-discount-row'),
            loyalDiscountRow: document.getElementById('loyal-discount-row'),
            totalDiscountRow: document.getElementById('total-discount-row'),
            confirm: document.getElementById('confirm-order')
        };

        // loads order summary from localstorage
        const loadOrderSummary = () => {
            if (!window.checkAuth('place order')) return;

            const storedData = localStorage.getItem('orderData');
            if (!storedData) {
                elements.empty.classList.remove('hidden');
                elements.confirm.disabled = true;
                return;
            }

            const orderData = JSON.parse(storedData);
            if (!orderData.cartItems?.length) {
                elements.empty.classList.remove('hidden');
                elements.confirm.disabled = true;
                return;
            }

            elements.list.innerHTML = '';
            orderData.cartItems.forEach(item => {
                if (!item.book) return;
                const authorNames = item.book.authorBooks?.map(ab => ab.author.name).join(', ') || 'Unknown Author';
                const effectivePrice = window.calculateBookPrice(item.book);
                const isOnSale = effectivePrice < item.book.price;
                const row = document.createElement('tr');
                row.className = 'border-b border-accent1 bg-primary';
                row.innerHTML = `
                    <td class="border-accent1 border p-3"><p class="text-accent3 text-lg font-semibold">${item.book.title} <span class="text-accent1 font-normal italic">by ${authorNames}</span></p></td>
                    <td class="border-accent1 text-accent1 border p-3">${isOnSale ? `<span class="text-accent4">Rs. ${effectivePrice.toFixed(2)}</span> <span class="text-accent1 line-through">Rs. ${item.book.price.toFixed(2)}</span>` : `Rs. ${item.book.price.toFixed(2)}`}</td>
                    <td class="border-accent1 text-accent1 border p-3">${item.quantity}</td>
                    <td class="border-accent1 text-accent1 border p-3">Rs. ${item.subTotal.toFixed(2)}</td>
                `;
                elements.list.appendChild(row);
            });

            elements.subtotal.textContent = orderData.subtotal.toFixed(2);
            elements.bookDiscount.textContent = orderData.bookDiscount.toFixed(2);
            elements.promoDiscount.textContent = orderData.discounts.promo.toFixed(2);
            elements.bulkDiscount.textContent = orderData.discounts.bulk.toFixed(2);
            elements.loyalDiscount.textContent = orderData.discounts.loyal.toFixed(2);
            elements.totalDiscount.textContent = orderData.discounts.total.toFixed(2);
            elements.total.textContent = orderData.total.toFixed(2);

            if (orderData.promoCode) {
                elements.promo.textContent = orderData.promoCode;
                elements.promoRow.classList.remove('hidden');
            }

            elements.bookDiscountRow.classList.toggle('hidden', orderData.bookDiscount === 0);
            elements.promoDiscountRow.classList.toggle('hidden', orderData.discounts.promo === 0);
            elements.bulkDiscountRow.classList.toggle('hidden', orderData.discounts.bulk === 0);
            elements.loyalDiscountRow.classList.toggle('hidden', orderData.discounts.loyal === 0);
            elements.totalDiscountRow.classList.toggle('hidden', orderData.discounts.total === 0);
        };

        // confirms order
        const confirmOrder = async () => {
            if (!window.checkAuth('place order')) return;

            const orderData = JSON.parse(localStorage.getItem('orderData') || '{}');
            try {
                const response = await fetch('https://localhost:7018/api/Order/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${window.jwtToken}`
                    },
                    body: JSON.stringify({ promoCode: orderData.promoCode || '' })
                });

                if (response.status === 401) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Please log in to place order'
                    }).then(() => {
                        window.location.href = '/User/Login';
                    });
                    return;
                }

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to place order');
                }

                const result = await response.json();
                Toast.fire({
                    icon: 'success',
                    title: `Order placed successfully!`
                }).then(() => {
                    localStorage.removeItem('orderData');
                    window.location.href = '/User/UserCart';
                });
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to place order'
                });
            }
        };

        // initializes page
        document.addEventListener('DOMContentLoaded', () => {
            if (!window.checkAuth('place order')) return;
            elements.confirm.addEventListener('click', confirmOrder);
            loadOrderSummary();
        });
    </script>
}