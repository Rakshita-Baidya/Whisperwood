@page
@model Whisperwood.Pages.User.OrderSummaryModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Order Summary";
}

<div class="container mx-auto px-6 py-8">
    <h1 class="text-3xl font-bold text-center text-accent4 mb-6">Order Summary</h1>

    <div id="error-message" class="hidden mb-4 text-center text-red-600"></div>
    <div id="success-message" class="hidden mb-4 text-center text-green-600"></div>

    <div class="grid grid-cols-1 lg:grid-cols-4 gap-6">
        <div class="lg:col-span-3">
            <div class="overflow-x-auto">
                <table id="order-item-table" class="w-full border-collapse border border-accent1">
                    <thead>
                        <tr class="bg-accent4 text-white">
                            <th class="border border-accent1 p-3 text-left">Book</th>
                            <th class="border border-accent1 p-3 text-left">Unit Cost</th>
                            <th class="border border-accent1 p-3 text-left">Quantity</th>
                            <th class="border border-accent1 p-3 text-left">Price</th>
                        </tr>
                    </thead>
                    <tbody id="order-item-list" class="space-y-2"></tbody>
                </table>
            </div>
            <p id="no-order-items" class="hidden text-center text-accent2 text-lg mt-4">No items in your order.</p>
        </div>

        <div class="lg:col-span-1">
            <div class="bg-primary border border-accent1 p-6 rounded shadow">
                <h2 class="text-xl font-semibold text-accent4 mb-4">Order Summary</h2>
                <div class="space-y-2 text-accent2">
                    <p><span class="font-medium">Subtotal:</span> Rs. <span id="order-subtotal">0.00</span></p>
                    <p id="promo-row" class="hidden"><span class="font-medium">Promo Code:</span> <span id="promo-code"></span></p>
                    <p id="discount-row" class="hidden"><span class="font-medium">Discount:</span> Rs. <span id="order-discount">0.00</span></p>
                    <p class="text-lg font-semibold"><span class="font-medium">Total:</span> Rs. <span id="order-total">0.00</span></p>
                </div>
                <button id="confirm-order" class="mt-4 w-full bg-accent3 rounded px-3 py-2 text-white hover:bg-accent2 hover:text-white">Confirm Order</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const list = document.getElementById("order-item-list");
        const error = document.getElementById("error-message");
        const success = document.getElementById("success-message");
        const empty = document.getElementById("no-order-items");
        const subtotalElement = document.getElementById("order-subtotal");
        const discountElement = document.getElementById("order-discount");
        const discountRow = document.getElementById("discount-row");
        const promoElement = document.getElementById("promo-code");
        const promoRow = document.getElementById("promo-row");
        const totalElement = document.getElementById("order-total");
        const confirmButton = document.getElementById("confirm-order");

        let orderData;

        function loadOrderSummary() {
            const storedData = localStorage.getItem('orderData');
            if (!storedData) {
                empty.classList.remove("hidden");
                confirmButton.disabled = true;
                return;
            }

            orderData = JSON.parse(storedData);
            if (!orderData.cartItems || orderData.cartItems.length === 0) {
                empty.classList.remove("hidden");
                confirmButton.disabled = true;
                return;
            }

            list.innerHTML = '';
            orderData.cartItems.forEach(item => {
                if (!item.book) {
                    console.warn(`Skipping item for bookId ${item.bookId} due to missing book data`);
                    return;
                }

                const authorNames = item.book.authorBooks && item.book.authorBooks.length > 0
                    ? item.book.authorBooks.map(ab => ab.author.name).join(', ')
                    : 'Unknown Author';

                const row = document.createElement("tr");
                row.className = "border-b border-accent1 bg-primary";
                row.innerHTML = `
                    <td class="border border-accent1 p-3">
                        <p class="text-lg font-semibold text-accent3">${item.book.title} <span class="text-accent1 font-normal italic"> by ${authorNames}</span></p>
                    </td>
                    <td class="border border-accent1 p-3 text-accent1">Rs. ${item.book.price}</td>
                    <td class="border border-accent1 p-3 text-accent1">${item.quantity}</td>
                    <td class="border border-accent1 p-3 text-accent1">Rs. ${item.subTotal.toFixed(2)}</td>
                `;
                list.appendChild(row);
            });

            subtotalElement.textContent = orderData.subtotal.toFixed(2);
            discountElement.textContent = orderData.discount.toFixed(2);
            totalElement.textContent = orderData.total.toFixed(2);
            if (orderData.promoCode) {
                promoElement.textContent = orderData.promoCode;
                promoRow.classList.remove("hidden");
            }
            discountRow.classList.toggle("hidden", orderData.discount === 0);
        }

        function showSuccess(message) {
            success.textContent = message;
            success.classList.remove("hidden");
            error.classList.add("hidden");
        }

        function showError(message) {
            error.textContent = message;
            error.classList.remove("hidden");
            success.classList.add("hidden");
        }

        confirmButton.addEventListener("click", async () => {
            try {
                const response = await fetch("https://localhost:7018/api/Order/add", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "Authorization": `Bearer ${window.jwtToken || ''}`
                    },
                    body: JSON.stringify({ promoCode: orderData.promoCode })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || "Failed to place order.");
                }

                const result = await response.json();
                showSuccess("Order placed successfully! Order ID: " + result.orderId);
                localStorage.removeItem('orderData');
                setTimeout(() => {
                    window.location.href = '/User/UserCart';
                }, 2000);
            } catch (err) {
                console.error('Error placing order:', err);
                showError(err.message);
            }
        });

        document.addEventListener("DOMContentLoaded", () => {
            if (!window.jwtToken) {
                window.location.href = '/User/Login';
                return;
            }
            loadOrderSummary();
        });
    </script>
}