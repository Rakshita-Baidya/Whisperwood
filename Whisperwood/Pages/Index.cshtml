@page
@model Whisperwood.Pages.IndexModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Home";
}

<div class="px-4 py-8">
    <div class="my-12 grid grid-cols-3 rounded-xl bg-[#eaddc6] px-10 py-12 shadow-xl">
        <div class="col-span-2 flex flex-col items-center justify-center">
            <h1 class="text-accent4 font-serif text-4xl font-bold tracking-wide drop-shadow-md">Welcome to Whisperwood</h1>
            <p class="mt-4 max-w-lg text-center text-base text-[#4b3e2c] drop-shadow-sm">
                Discover Whisperwood, your haven for literary adventures. Nestled in a world of stories, we offer a curated collection of books—from timeless classics to trending bestsellers. Explore mysteries, fantasies, and more, with exclusive promotions to spark your next great read.
            </p>
        </div>
        <section class="flex flex-col items-center justify-center rounded bg-[#c6b28d] p-6 shadow-lg">
            <h2 class="mb-3 text-xl font-bold tracking-widest text-[#3a2f1b] uppercase drop-shadow-md">Trending Now</h2>
            <div id="trending-container" class="flex justify-center">
                <div id="trending-loading" class="text-lg text-[#4b3e2c]">Loading trending book...</div>
            </div>
            <div id="no-trending-books" class="mt-4 hidden text-lg text-[#4b3e2c]">No books found.</div>
        </section>
    </div>

    @* banner announcements *@
    <section class="-mx-24 mb-10 overflow-x-hidden">
        <div class="announcement-slider bg-gradient-to-r relative rounded from-[#eaddc6] to-[#d4a86a] py-8 shadow-2xl">
            <div id="announcement-slides" class="overflow-hidden">
                <div id="announcements-loading" class="flex items-center justify-center text-lg text-[#4b3e2c]">
                    Loading announcements...
                </div>
            </div>
            <button id="announcement-prev" class="bg-accent3 absolute top-1/2 left-4 hidden -translate-y-1/2 transform rounded-full p-2 text-white hover:bg-accent4">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M15 18l-6-6 6-6" />
                </svg>
            </button>
            <button id="announcement-next" class="bg-accent3 absolute top-1/2 right-4 hidden -translate-y-1/2 transform rounded-full p-2 text-white hover:bg-accent4">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M9 18l6-6-6-6" />
                </svg>
            </button>
            <div id="announcement-pagination" class="absolute bottom-4 left-1/2 flex -translate-x-1/2 transform space-x-2"></div>
        </div>
        <div id="no-announcements" class="mt-4 hidden text-center text-lg text-[#4b3e2c]">
            No active announcements found.
        </div>
    </section>

    @* Award Winners *@
    <section class="mb-10">
        <div class="mb-4 flex items-center justify-between">
            <h2 class="text-accent4 text-2xl font-bold uppercase">Award Winners</h2>
            <a href="/Book/BrowseByCategory" class="text-secondary hover:text-lg">See More</a>
        </div>
        <div id="award-winners-container" class="mx-6 grid grid-cols-5 gap-4 overflow-x-auto scroll-smooth">
            <div id="award-loading" class="text-accent2 col-span-full text-center text-lg">Loading award winners...</div>
        </div>
        <div id="no-award-winners" class="text-accent2 mt-4 hidden text-center text-lg">No award-winning books found.</div>
    </section>

    @* Hot Deals (Individual Book Discounts) *@
    <section class="bg-gradient-to-r from-accent1 to-accent4 my-10 rounded px-6 py-6 shadow-md">
        <div class="mb-4 flex items-center justify-between">
            <h2 class="text-2xl font-extrabold tracking-wide text-white uppercase">Hot Deals</h2>
            <a href="/Book/BrowseByCategory" class="text-white hover:text-lg">Browse All</a>
        </div>
        <div id="promo-books-container" class="mx-6 grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-5">
            <div id="promo-loading" class="col-span-full text-center text-lg text-white">Loading promotions...</div>
        </div>
        <div id="no-promo-books" class="mt-4 hidden text-center text-lg text-white">No ongoing promotions found.</div>
    </section>

    @* Active Promotions (Promo Codes) *@
    <section class="my-10 rounded-lg bg-cover bg-center bg-[url('https://images.unsplash.com/photo-1512820790803-83ca734da794')] shadow-lg relative">
        <div class="bg-opacity-60 rounded-lg bg-black px-6 py-6">
            <div class="mb-4 flex items-center justify-between">
                <h2 class="text-2xl font-extrabold tracking-wide text-white uppercase">Active Promotions</h2>
                <a href="/Promotions" class="text-sm text-white hover:text-lg">View All</a>
            </div>
            <div id="promotions-container" class="mx-6 grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-4">
                <div id="promotions-loading" class="col-span-full text-center text-lg text-white">Loading promotions...</div>
            </div>
            <div id="no-promotions" class="mt-4 hidden text-center text-lg text-white">No active promotions found.</div>
        </div>
    </section>

    @* Best Sellers *@
    <section class="mb-10">
        <div class="mb-4 flex items-center justify-between">
            <h2 class="text-accent4 text-2xl font-bold uppercase">Best Sellers</h2>
            <a href="/Book/BrowseByCategory" class="text-secondary hover:text-lg">See More</a>
        </div>
        <div id="best-sellers-container" class="mx-6 grid grid-cols-5 gap-4 overflow-x-auto scroll-smooth">
            <div id="best-sellers-loading" class="text-accent2 col-span-full text-center text-lg">Loading Best Sellers...</div>
        </div>
        <div id="no-best-sellers" class="text-accent2 mt-4 hidden text-center text-lg">No best sellers found.</div>
    </section>

    @* Most Popular Genres *@
    <section class="mb-10">
        <h2 class="text-accent4 mb-4 text-2xl font-bold uppercase">Most Popular Genres</h2>
        <div id="popular-genres-container" class="mx-6 grid grid-cols-5 gap-4 overflow-x-auto scroll-smooth">
            <div id="popular-genres-loading" class="text-accent2 col-span-full text-center text-lg">Loading Popular Genres...</div>
        </div>
    </section>

    @* Recent Top Reviews *@
    <section class="my-10 rounded bg-[#c6b28d] px-6 py-6 shadow-md">
        <h2 class="mb-4 text-2xl font-extrabold tracking-wide text-white uppercase">Recent Top Reviews</h2>
        <div id="recent-reviews-grid" class="mx-6 mb-4 grid grid-cols-4 gap-4">
        </div>
    </section>
</div>

@section Scripts {
    <script>
        // Cache DOM elements
        const elements = {
            trendingContainer: document.getElementById('trending-container'),
            trendingLoading: document.getElementById('trending-loading'),
            noTrendingBooks: document.getElementById('no-trending-books'),
            announcementSlides: document.getElementById('announcement-slides'),
            announcementsLoading: document.getElementById('announcements-loading'),
            noAnnouncements: document.getElementById('no-announcements'),
            announcementPrev: document.getElementById('announcement-prev'),
            announcementNext: document.getElementById('announcement-next'),
            announcementPagination: document.getElementById('announcement-pagination'),
            awardWinnersContainer: document.getElementById('award-winners-container'),
            awardLoading: document.getElementById('award-loading'),
            noAwardWinners: document.getElementById('no-award-winners'),
            promoBooksContainer: document.getElementById('promo-books-container'),
            promoLoading: document.getElementById('promo-loading'),
            noPromoBooks: document.getElementById('no-promo-books'),
            promotionsContainer: document.getElementById('promotions-container'),
            promotionsLoading: document.getElementById('promotions-loading'),
            noPromotions: document.getElementById('no-promotions'),
            bestSellersContainer: document.getElementById('best-sellers-container'),
            bestSellersLoading: document.getElementById('best-sellers-loading'),
            noBestSellers: document.getElementById('no-best-sellers'),
            popularGenresContainer: document.getElementById('popular-genres-container'),
            popularGenresLoading: document.getElementById('popular-genres-loading'),
            recentReviewsGrid: document.getElementById('recent-reviews-grid')
        };

        // Current date for filtering published books
        const TODAY = new Date('2025-05-13');

        let currentSlide = 0;
        let slides = [];
        let slideInterval;

        function showSlide(index) {
            if (slides.length === 0) return;
            currentSlide = (index + slides.length) % slides.length;
            const offset = -currentSlide * 100;
            elements.announcementSlides.style.transform = `translateX(${offset}%)`;
            updatePagination();
        }

        function nextSlide() {
            showSlide(currentSlide + 1);
        }

        function prevSlide() {
            showSlide(currentSlide - 1);
        }

        function startSlider() {
            if (slides.length > 1) {
                slideInterval = setInterval(nextSlide, 5000);
            }
        }

        function stopSlider() {
            clearInterval(slideInterval);
        }

        function updatePagination() {
            elements.announcementPagination.innerHTML = '';
            slides.forEach((_, i) => {
                const dot = document.createElement('div');
                dot.className = `w-3 h-3 rounded-full cursor-pointer ${i === currentSlide ? 'bg-accent3' : 'bg-[#4b3e2c]/50'}`;
                dot.addEventListener('click', () => {
                    stopSlider();
                    showSlide(i);
                    startSlider();
                });
                elements.announcementPagination.appendChild(dot);
            });
        }

        // render announcements slider
        async function renderAnnouncementsSlider() {
            // show loading state
            elements.announcementsLoading.classList.remove('hidden');
            elements.noAnnouncements.classList.add('hidden');

            // construct user object
            const user = {
                isAdmin: window.isAdmin || false,
                isStaff: window.isStaff || false
            };

            // fetch announcements
            const announcements = await announcement.fetchAnnouncements();
            const filteredAnnouncements = announcement.filterAnnouncements(announcements, user);

            // clear loading state
            elements.announcementsLoading.classList.add('hidden');
            elements.announcementSlides.innerHTML = '';

            // handle no announcements
            if (!filteredAnnouncements.length) {
                elements.noAnnouncements.classList.remove('hidden');
                return;
            }

            // create slides
            slides = filteredAnnouncements;
            elements.announcementSlides.className = 'flex transition-transform duration-500';
            slides.forEach(announcement => {
                const slide = document.createElement('div');
                slide.className = 'flex-shrink-0 w-full flex flex-col items-center justify-center px-6 py-8 text-center';
                slide.innerHTML = `
                    <h3 class="text-accent4 mb-2 text-2xl font-bold">${announcement.title || 'Announcement'}</h3>
                    <p class="line-clamp-2 text-[#4b3e2c]">${announcement.message || 'No message'}</p>
                `;
                elements.announcementSlides.appendChild(slide);
            });

            // show navigation if multiple slides
            if (slides.length > 1) {
                elements.announcementPrev.classList.remove('hidden');
                elements.announcementNext.classList.remove('hidden');
                startSlider();
            }

            // initialize navigation
            elements.announcementPrev.addEventListener('click', () => {
                stopSlider();
                prevSlide();
                startSlider();
            });
            elements.announcementNext.addEventListener('click', () => {
                stopSlider();
                nextSlide();
                startSlider();
            });

            // initialize pagination
            updatePagination();
            showSlide(0);
        }

        // Fetch all books
        async function fetchBooks() {
            try {
                const response = await fetch('https://localhost:7018/api/Book/getall');
                if (!response.ok) {
                    throw new Error('Failed to load books. Please try again later.');
                }
                const books = await response.json();
                return books;
            } catch (error) {
                console.error('Error fetching books:', error);
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to load books'
                });
                return [];
            }
        }

        // Check if book is published
        function isBookPublished(book) {
            if (!book.publishedDate) {
                console.warn(`Book ${book.id} has no publishedDate, treating as unpublished`);
                return false;
            }
            try {
                return new Date(book.publishedDate) <= TODAY;
            } catch (error) {
                console.warn(`Invalid publishedDate for book ${book.id}: ${book.publishedDate}`);
                return false;
            }
        }

        // Render trending book
        async function renderTrendingBook() {
            elements.trendingLoading.classList.remove('hidden');
            const books = await fetchBooks();
            if (!books.length) {
                elements.trendingLoading.classList.add('hidden');
                elements.noTrendingBooks.classList.remove('hidden');
                return;
            }
            let topBook = books[0];
            for (let i = 1; i < books.length; i++) {
                if ((books[i].salesCount || 0) > (topBook.salesCount || 0)) {
                    topBook = books[i];
                }
            }
            const authorNames = topBook.authorBooks?.length > 0
                ? topBook.authorBooks.map(ab => ab.author.name).join(', ')
                : 'Unknown Author';
            const isOnSale = window.calculateBookPrice(topBook) < topBook.price;
            const finalPrice = window.calculateBookPrice(topBook);

            const bookElement = document.createElement('a');
            bookElement.href = `/Book/Details/${topBook.id}`;
            bookElement.className = 'block bg-primary border border-accent1 rounded-lg p-4 shadow-md transition-shadow hover:shadow-xl';
            bookElement.innerHTML = `
                ${topBook.coverImage?.coverImageURL
                    ? `<img src="${topBook.coverImage.coverImageURL}" alt="${topBook.title || 'Book'}" class="mb-4 h-36 w-52 rounded-md object-cover" />`
                    : `<div class="text-accent3 bg-accent1 mb-4 flex h-36 w-52 items-center justify-center rounded-md">No Image</div>`
                }
                <h2 class="text-accent3 truncate text-xl font-semibold">${topBook.title || 'Untitled'}</h2>
                <p class="text-accent1 truncate font-medium text-nowrap">${authorNames}</p>
                <div class="mb-3 flex justify-between">
                    <p class="text-accent3">★ ${topBook.averageRating?.toFixed(1) || 0.0}</p>
                    <div class="text-right">
                        ${isOnSale
                            ? `<p class="text-accent4 font-medium">Rs. ${finalPrice.toFixed(2)} <span class="text-accent1 text-sm line-through">Rs. ${topBook.price.toFixed(2)}</span></p>
                               <p class="text-accent4 text-sm">${topBook.discountPercentage}% Off <span class="bg-accent4 rounded px-1 py-1 text-xs text-white">On Sale</span></p>`
                            : `<p class="text-accent4 font-medium">Rs. ${topBook.price.toFixed(2)}</p>`
                        }
                    </div>
                </div>
                <div class="flex gap-2">
                    <button id="wishlist-trending-${topBook.id}" class="bg-accent3 flex flex-1 items-center justify-center rounded py-2 text-white hover:bg-accent4">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" height="24" width="24">
                            <path stroke-width="3" fill="none" stroke="#fff" d="M21.3 28.3 16 23l-5.3 5.3c-.6.6-1.7.2-1.7-.7V5c0-.6.4-1 1-1h12c.6 0 1 .4 1 1v22.6c0 .9-1.1 1.3-1.7.7"/>
                        </svg>
                    </button>
                    <button id="cart-trending-${topBook.id}" class="bg-accent3 flex flex-1 items-center justify-center rounded py-2 text-white hover:bg-accent4">
                        <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" stroke="#fff" stroke-width="2">
                            <path fill="none" stroke-linecap="round" d="M11 20.5h.1m5.9 0h.1M3 3h2.14a1 1 0 0 1 1 .85L6.62 7 8 16l11-1 2-8H6.62"/>
                        </svg>
                    </button>
                </div>
            `;

            elements.trendingContainer.innerHTML = '';
            elements.trendingContainer.appendChild(bookElement);
            elements.trendingLoading.classList.add('hidden');

            // Initialize buttons with timeout
            setTimeout(() => {
                if (window.isAuthenticated) {
                    initializeWishlistButton(`wishlist-trending-${topBook.id}`, topBook.id, topBook);
                    if (isBookPublished(topBook)) {
                        initializeCartButton(`cart-trending-${topBook.id}`, topBook.id, topBook);
                    } else {
                        const cartButton = document.querySelector(`#cart-trending-${topBook.id}`);
                        cartButton.disabled = true;
                        cartButton.classList.add('opacity-50', 'cursor-not-allowed');
                        cartButton.addEventListener('click', (e) => {
                            e.preventDefault();
                            Toast.fire({
                                icon: 'info',
                                title: 'This book is not yet available'
                            });
                        });
                    }
                    } else {
                    bookElement.querySelector(`#wishlist-trending-${topBook.id}`).addEventListener('click', (e) => {
                        e.preventDefault();
                        Toast.fire({
                            icon: 'error',
                            title: 'Please log in to manage wishlist'
                        }).then(() => {
                            window.location.href = '/User/Login';
                        });
                    });
                    bookElement.querySelector(`#cart-trending-${topBook.id}`).addEventListener('click', (e) => {
                        e.preventDefault();
                        Toast.fire({
                            icon: 'error',
                            title: 'Please log in to manage cart'
                        }).then(() => {
                            window.location.href = '/User/Login';
                        });
                    });
                }
            }, 100);
        }

        // Fetch award winners
        async function fetchAwardWinners() {
            const books = await fetchBooks();
            const awardBooks = books.filter(book =>
                book.categoryBooks?.some(cat => cat.category.name.trim().toLowerCase() === 'award winner')
            );
            return awardBooks.slice(0, 5);
        }

        // Render award winners
        async function renderAwardWinners() {
            elements.awardLoading.classList.remove('hidden');
            const books = await fetchAwardWinners();
            if (!books.length) {
                elements.awardLoading.classList.add('hidden');
                elements.noAwardWinners.classList.remove('hidden');
                return;
            }
            elements.awardWinnersContainer.innerHTML = '';

            books.forEach(book => {
                const authorNames = book.authorBooks?.length > 0
                    ? book.authorBooks.map(ab => ab.author.name).join(', ')
                    : 'Unknown Author';
                const isOnSale = window.calculateBookPrice(book) < book.price;
                const finalPrice = window.calculateBookPrice(book);

                const bookElement = document.createElement('a');
                bookElement.href = `/Book/Details/${book.id}`;
                bookElement.className = 'block bg-primary border border-accent1 rounded-lg p-4 shadow-md transition-shadow hover:shadow-xl';
                bookElement.innerHTML = `
                    ${book.coverImage?.coverImageURL
                        ? `<img src="${book.coverImage.coverImageURL}" alt="${book.title || 'Book'}" class="mb-4 h-64 w-52 rounded-md object-cover" />`
                        : `<div class="text-accent3 bg-accent1 mb-4 flex h-64 w-52 items-center justify-center rounded-md">No Image</div>`
                    }
                    <h2 class="text-accent3 truncate text-xl font-semibold">${book.title || 'Untitled'}</h2>
                    <p class="text-accent1 truncate font-medium text-nowrap">${authorNames}</p>
                    <div class="mb-3 flex justify-between">
                        <p class="text-accent3">★ ${book.averageRating?.toFixed(1) || 0.0}</p>
                        <div class="text-right">
                            ${isOnSale
                                ? `<p class="text-accent4 font-medium">Rs. ${finalPrice.toFixed(2)} <span class="text-accent1 text-sm line-through">Rs. ${book.price.toFixed(2)}</span></p>
                                   <p class="text-accent4 text-sm">${book.discountPercentage}% Off <span class="bg-accent4 rounded px-1 py-1 text-xs text-white">On Sale</span></p>`
                                : `<p class="text-accent4 font-medium">Rs. ${finalPrice.toFixed(2)}</p>`
                            }
                        </div>
                    </div>
                    <div class="flex gap-2">
                        <button id="wishlist-award-${book.id}" class="bg-accent3 flex flex-1 items-center justify-center rounded py-2 text-white hover:bg-accent4">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" height="24" width="24">
                                <path stroke-width="3" fill="none" stroke="#fff" d="M21.3 28.3 16 23l-5.3 5.3c-.6.6-1.7.2-1.7-.7V5c0-.6.4-1 1-1h12c.6 0 1 .4 1 1v22.6c0 .9-1.1 1.3-1.7.7"/>
                            </svg>
                        </button>
                        <button id="cart-award-${book.id}" class="bg-accent3 flex flex-1 items-center justify-center rounded py-2 text-white hover:bg-accent4">
                            <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" stroke="#fff" stroke-width="2">
                                <path fill="none" stroke-linecap="round" d="M11 20.5h.1m5.9 0h.1M3 3h2.14a1 1 0 0 1 1 .85L6.62 7 8 16l11-1 2-8H6.62"/>
                            </svg>
                        </button>
                    </div>
                `;

                elements.awardWinnersContainer.appendChild(bookElement);
            });

            elements.awardLoading.classList.add('hidden');

            // Initialize buttons with timeout
            setTimeout(() => {
                books.forEach(book => {
                    if (window.isAuthenticated) {
                        initializeWishlistButton(`wishlist-award-${book.id}`, book.id, book);
                        if (isBookPublished(book)) {
                            initializeCartButton(`cart-award-${book.id}`, book.id, book);
                        } else {
                            const cartButton = document.querySelector(`#cart-award-${book.id}`);
                            cartButton.addEventListener('click', (e) => {
                                e.preventDefault();
                                Toast.fire({
                                    icon: 'error',
                                    title: 'This book is not yet available'
                                });
                            });
                        }
                    } else {
                        const bookElement = document.querySelector(`#wishlist-award-${book.id}`).parentElement.parentElement;
                        bookElement.querySelector(`#wishlist-award-${book.id}`).addEventListener('click', (e) => {
                            e.preventDefault();
                            Toast.fire({
                                icon: 'error',
                                title: 'Please log in to manage wishlist'
                            }).then(() => {
                                window.location.href = '/User/Login';
                            });
                        });
                        bookElement.querySelector(`#cart-award-${book.id}`).addEventListener('click', (e) => {
                            e.preventDefault();
                            Toast.fire({
                                icon: 'error',
                                title: 'Please log in to manage cart'
                            }).then(() => {
                                window.location.href = '/User/Login';
                            });
                        });
                    }
                });
            }, 100);
        }

        // Fetch and render Hot Deals (individual book discounts)
        async function fetchPromoBooks() {
            const books = await fetchBooks();
            const promoBooks = books.filter(book => book.isOnSale === true && isBookPublished(book));
            return promoBooks.slice(0, 5);
        }

        async function renderPromoBooks() {
            elements.promoLoading.classList.remove('hidden');
            const promoBooks = await fetchPromoBooks();
            if (!promoBooks.length) {
                elements.promoLoading.classList.add('hidden');
                elements.noPromoBooks.classList.remove('hidden');
                return;
            }
            elements.promoBooksContainer.innerHTML = '';

            promoBooks.forEach(book => {
                const authorNames = book.authorBooks?.length > 0
                    ? book.authorBooks.map(ab => ab.author.name).join(', ')
                    : 'Unknown Author';
                const finalPrice = window.calculateBookPrice(book);

                const bookElement = document.createElement('a');
                bookElement.href = `/Book/Details/${book.id}`;
                bookElement.className = 'block bg-primary border border-accent1 rounded-lg p-4 shadow-md transition-shadow hover:shadow-xl transform transition-transform hover:scale-105';
                bookElement.innerHTML = `
                    ${book.coverImage?.coverImageURL
                        ? `<img src="${book.coverImage.coverImageURL}" alt="${book.title || 'Book'}" class="mb-4 h-64 w-full rounded-md object-cover" />`
                        : `<div class="text-accent3 bg-accent1 mb-4 flex h-64 w-full items-center justify-center rounded-md">No Image</div>`
                    }
                    <h2 class="text-accent3 truncate text-xl font-semibold">${book.title || 'Untitled'}</h2>
                    <p class="text-accent1 truncate font-medium text-nowrap">${authorNames}</p>
                    <div class="mb-3 flex justify-between">
                        <p class="text-accent3">★ ${book.averageRating?.toFixed(1) || 0.0}</p>
                        <div class="text-right">
                            <p class="text-accent4 font-medium">Rs. ${finalPrice.toFixed(2)} <span class="text-accent1 text-sm line-through">Rs. ${book.price.toFixed(2)}</span></p>
                            <p class="text-accent4 text-sm">${book.discountPercentage}% Off <span class="bg-accent4 rounded px-1 py-1 text-xs text-white">On Sale</span></p>
                        </div>
                    </div>
                    <div class="flex gap-2">
                        <button id="wishlist-promo-${book.id}" class="bg-accent3 flex flex-1 items-center justify-center rounded py-2 text-white hover:bg-accent4">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" height="24" width="24">
                                <path stroke-width="3" fill="none" stroke="#fff" d="M21.3 28.3 16 23l-5.3 5.3c-.6.6-1.7.2-1.7-.7V5c0-.6.4-1 1-1h12c.6 0 1 .4 1 1v22.6c0 .9-1.1 1.3-1.7.7"/>
                            </svg>
                        </button>
                        <button id="cart-promo-${book.id}" class="bg-accent3 flex flex-1 items-center justify-center rounded py-2 text-white hover:bg-accent4">
                            <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" stroke="#fff" stroke-width="2">
                                <path fill="none" stroke-linecap="round" d="M11 20.5h.1m5.9 0h.1M3 3h2.14a1 1 0 0 1 1 .85L6.62 7 8 16l11-1 2-8H6.62"/>
                            </svg>
                        </button>
                    </div>
                `;

                elements.promoBooksContainer.appendChild(bookElement);
            });

            elements.promoLoading.classList.add('hidden');

            // Initialize buttons with timeout
            setTimeout(() => {
                promoBooks.forEach(book => {
                    if (window.isAuthenticated) {
                        initializeWishlistButton(`wishlist-promo-${book.id}`, book.id, book);
                        // Cart button already filtered by fetchPromoBooks (published books only)
                        initializeCartButton(`cart-promo-${book.id}`, book.id, book);
                    } else {
                        const bookElement = document.querySelector(`#wishlist-promo-${book.id}`).parentElement.parentElement;
                        bookElement.querySelector(`#wishlist-promo-${book.id}`).addEventListener('click', (e) => {
                            e.preventDefault();
                            Toast.fire({
                                icon: 'error',
                                title: 'Please log in to manage wishlist'
                            }).then(() => {
                                window.location.href = '/User/Login';
                            });
                        });
                        bookElement.querySelector(`#cart-promo-${book.id}`).addEventListener('click', (e) => {
                            e.preventDefault();
                            Toast.fire({
                                icon: 'error',
                                title: 'Please log in to manage cart'
                            }).then(() => {
                                window.location.href = '/User/Login';
                            });
                        });
                    }
                });
            }, 100);
        }

        // Render Active Promotions (promo codes)
        async function renderPromotions() {
            elements.promotionsLoading.classList.remove('hidden');
            const promotions = await promotion.fetchPromotions();
            const activePromotions = promotion.filterPromotions(promotions, null).slice(0, 4);
            elements.promotionsContainer.innerHTML = '';

            if (activePromotions.length === 0) {
                elements.promotionsLoading.classList.add('hidden');
                elements.noPromotions.classList.remove('hidden');
                return;
            }

            activePromotions.forEach(promotion => {
                const promotionItem = document.createElement('div');
                promotionItem.className = 'bg-primary p-4 rounded-lg border border-accent1 shadow-lg hover:shadow-xl transform transition-transform hover:scale-105';
                promotionItem.innerHTML = `
                    <h3 class="text-accent3 mb-2 text-lg font-semibold">${promotion.name || 'Special Offer'}</h3>
                    <p class="text-accent2 mb-3 line-clamp-2">${promotion.description || 'No description'}</p>
                    <div class="mb-3 flex items-center justify-between">
                        <p class="text-accent2">Use code: <span class="bg-accent1 copy-promo-code cursor-pointer rounded px-2 py-1 font-semibold text-white" data-code="${promotion.code}">${promotion.code}</span></p>
                        <span class="bg-accent4 rounded px-2 py-1 text-xs font-bold text-white">${promotion.discountPercent}% OFF</span>
                    </div>
                    <p class="text-accent1 text-sm">Valid: ${new Date(promotion.startDate).toLocaleDateString()} - ${new Date(promotion.endDate).toLocaleDateString()}</p>
                    ${!window.isAuthenticated ? '<p class="mt-2 text-sm text-red-600">Please log in to use this promotion code.</p>' : ''}
                `;
                elements.promotionsContainer.appendChild(promotionItem);
            });

            elements.promotionsLoading.classList.add('hidden');

            // Add click-to-copy for promo codes
            document.querySelectorAll('.copy-promo-code').forEach(button => {
                button.addEventListener('click', () => {
                    const code = button.dataset.code;
                    navigator.clipboard.writeText(code).then(() => {
                        Toast.fire({
                            icon: 'success',
                            title: `Copied code: ${code}`
                        });
                    }).catch(() => {
                        Toast.fire({
                            icon: 'error',
                            title: 'Failed to copy code'
                        });
                    });
                });
            });
        }

        // Fetch and render Best Sellers
        async function fetchBestSellerBooks() {
            const books = await fetchBooks();
            const bestSellers = books
                .filter(book => isBookPublished(book))
                .sort((a, b) => (b.salesCount || 0) - (a.salesCount || 0))
                .slice(0, 5);
            return bestSellers;
        }

        async function renderBestSellers() {
            elements.bestSellersLoading.classList.remove('hidden');
            const bestSellers = await fetchBestSellerBooks();
            if (!bestSellers.length) {
                elements.bestSellersLoading.classList.add('hidden');
                elements.noBestSellers.classList.remove('hidden');
                return;
            }
            elements.bestSellersContainer.innerHTML = '';

            bestSellers.forEach(book => {
                const authorNames = book.authorBooks?.length > 0
                    ? book.authorBooks.map(ab => ab.author.name).join(', ')
                    : 'Unknown Author';
                const isOnSale = window.calculateBookPrice(book) < book.price;
                const finalPrice = window.calculateBookPrice(book);

                const bookElement = document.createElement('a');
                bookElement.href = `/Book/Details/${book.id}`;
                bookElement.className = 'block bg-primary border border-accent1 rounded-lg p-4 shadow-md transition-shadow hover:shadow-xl';
                bookElement.innerHTML = `
                    ${book.coverImage?.coverImageURL
                        ? `<img src="${book.coverImage.coverImageURL}" alt="${book.title || 'Book'}" class="mb-4 h-64 w-52 rounded-md object-cover" />`
                        : `<div class="text-accent3 bg-accent1 mb-4 flex h-64 w-52 items-center justify-center rounded-md">No Image</div>`
                    }
                    <h2 class="text-accent3 truncate text-xl font-semibold">${book.title || 'Untitled'}</h2>
                    <p class="text-accent1 truncate font-medium text-nowrap">${authorNames}</p>
                    <div class="mb-3 flex justify-between">
                        <p class="text-accent3">★ ${book.averageRating?.toFixed(1) || 0.0}</p>
                        <div class="text-right">
                            ${isOnSale
                                ? `<p class="text-accent4 font-medium">Rs. ${finalPrice.toFixed(2)} <span class="text-accent1 text-sm line-through">Rs. ${book.price.toFixed(2)}</span></p>
                                   <p class="text-accent4 text-sm">${book.discountPercentage}% Off <span class="bg-accent4 rounded px-1 py-1 text-xs text-white">On Sale</span></p>`
                                : `<p class="text-accent4 font-medium">Rs. ${finalPrice.toFixed(2)}</p>`
                            }
                        </div>
                    </div>
                    <div class="flex gap-2">
                        <button id="wishlist-bestseller-${book.id}" class="bg-accent3 flex flex-1 items-center justify-center rounded py-2 text-white hover:bg-accent4">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" height="24" width="24">
                                <path stroke-width="3" fill="none" stroke="#fff" d="M21.3 28.3 16 23l-5.3 5.3c-.6.6-1.7.2-1.7-.7V5c0-.6.4-1 1-1h12c.6 0 1 .4 1 1v22.6c0 .9-1.1 1.3-1.7.7"/>
                            </svg>
                        </button>
                        <button id="cart-bestseller-${book.id}" class="bg-accent3 flex flex-1 items-center justify-center rounded py-2 text-white hover:bg-accent4">
                            <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" stroke="#fff" stroke-width="2">
                                <path fill="none" stroke-linecap="round" d="M11 20.5h.1m5.9 0h.1M3 3h2.14a1 1 0 0 1 1 .85L6.62 7 8 16l11-1 2-8H6.62"/>
                            </svg>
                        </button>
                    </div>
                `;

                elements.bestSellersContainer.appendChild(bookElement);
            });

            elements.bestSellersLoading.classList.add('hidden');

            // Initialize buttons with timeout
            setTimeout(() => {
                bestSellers.forEach(book => {
                    if (window.isAuthenticated) {
                        initializeWishlistButton(`wishlist-bestseller-${book.id}`, book.id, book);
                        // Cart button already filtered by fetchBestSellerBooks (published books only)
                        initializeCartButton(`cart-bestseller-${book.id}`, book.id, book);
                    } else {
                        const bookElement = document.querySelector(`#wishlist-bestseller-${book.id}`).parentElement.parentElement;
                        bookElement.querySelector(`#wishlist-bestseller-${book.id}`).addEventListener('click', (e) => {
                            e.preventDefault();
                            Toast.fire({
                                icon: 'error',
                                title: 'Please log in to manage wishlist'
                            }).then(() => {
                                window.location.href = '/User/Login';
                            });
                        });
                        bookElement.querySelector(`#cart-bestseller-${book.id}`).addEventListener('click', (e) => {
                            e.preventDefault();
                            Toast.fire({
                                icon: 'error',
                                title: 'Please log in to manage cart'
                            }).then(() => {
                                window.location.href = '/User/Login';
                            });
                        });
                    }
                });
            }, 100);
        }

        // Fetch and render Most Popular Genres
        async function fetchBestSellerGenres() {
            const books = await fetchBooks();
            const bestSellers = books
                .filter(book => isBookPublished(book))
                .sort((a, b) => (b.salesCount || 0) - (a.salesCount || 0));
            const genres = new Set();
            bestSellers.forEach(book => {
                book.genreBooks?.forEach(genreObj => {
                    genres.add(genreObj.genre.name);
                });
            });
            return Array.from(genres).slice(0, 5);
        }

        async function renderPopularGenres() {
            elements.popularGenresLoading.classList.remove('hidden');
            const genres = await fetchBestSellerGenres();
            if (!genres.length) {
                elements.popularGenresLoading.classList.add('hidden');
                elements.popularGenresContainer.innerHTML = `<div class="text-accent2 text-center text-lg">No Popular Genres Found.</div>`;
                return;
            }
            elements.popularGenresContainer.innerHTML = '';
            genres.forEach(genre => {
                const genreElement = document.createElement('a');
                genreElement.href = `/Book/Browse`;
                genreElement.className = 'bg-accent1 flex items-center justify-center rounded p-4 text-center text-white hover:bg-accent2 transition-colors';
                genreElement.innerHTML = `
                    <h3 class="font-semibold">${genre}</h3>
                `;
                elements.popularGenresContainer.appendChild(genreElement);
            });
            elements.popularGenresLoading.classList.add('hidden');
        }

        // Fetch and render Recent Top Reviews
        async function fetchTopReviews() {
            try {
                const response = await fetch('https://localhost:7018/api/Review/getall');
                if (!response.ok) throw new Error('Could not load reviews');
                const reviews = await response.json();
                const topReviews = reviews
                    .sort((a, b) => {
                        const ratingDiff = (b.rating || 0) - (a.rating || 0);
                        if (ratingDiff !== 0) return ratingDiff;
                        const dateA = a.updatedAt ? new Date(a.updatedAt) : new Date(a.createdAt);
                        const dateB = b.updatedAt ? new Date(b.updatedAt) : new Date(b.createdAt);
                        return dateB - dateA;
                    })
                    .slice(0, 4);
                elements.recentReviewsGrid.innerHTML = '';
                if (!topReviews.length) {
                    elements.recentReviewsGrid.innerHTML = '<p class="text-accent2 text-center">No recent top reviews available.</p>';
                    return;
                }
                topReviews.forEach(review => {
                    const reviewCard = document.createElement('div');
                    reviewCard.className = 'bg-primary rounded p-4 shadow-md border border-accent2';
                    reviewCard.innerHTML = `
                        <div class="mb-1 flex items-center">
                            <img src="${review.users?.imageURL || '/images/default-user.png'}" class="mr-2 h-8 w-8 rounded-full" alt="${review.users?.name || 'Anonymous'}">
                            <p class="text-accent2 text-xl font-semibold">${review.users?.name || 'Anonymous'}</p>
                        </div>
                        <p class="text-accent4 mb-2 font-bold">${review.books?.title || 'Unknown book'}</p>
                        <p class="text-accent3 mb-2">Rating: ★ ${review.rating || 0}</p>
                        <p class="text-accent1 mb-2 line-clamp-2 italic">"${review.message || 'No comment'}"</p>
                        <p class="text-accent2 text-sm">${new Date(review.createdAt).toLocaleString()}</p>
                    `;
                    elements.recentReviewsGrid.appendChild(reviewCard);
                });
            } catch (error) {
                console.error('Error fetching top reviews:', error);
                Toast.fire({
                    icon: 'error',
                    title: 'Failed to load top reviews'
                });
            }
        }

        // Initialize page
        document.addEventListener('DOMContentLoaded', async () => {
            await renderTrendingBook();
            await renderAnnouncementsSlider();
            await renderAwardWinners();
            await renderPromoBooks();
            await renderPromotions();
            await renderBestSellers();
            await renderPopularGenres();
            await fetchTopReviews();
        });
    </script>
}