@page
@model Whisperwood.Pages.Book.BrowseModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Manage Books";
}

<div class="px-4 py-8">
    <div class="mb-4 flex justify-between">
        <h1 class="text-accent4 text-center text-4xl font-bold">Manage Books</h1>
        <div class="flex gap-4 text-white">
            <a href="/Book/AddBook" class="bg-accent3 rounded px-4 py-2 hover:bg-accent4">Add Book</a>
            <button id="filter-button" class="bg-accent3 rounded px-4 py-2 hover:bg-accent4">Filter Books</button>
        </div>
    </div>

    <div id="filter-section" class="bg-primary border-accent3 mb-8 hidden rounded border p-6 shadow-md">
        <form id="filter-form" class="grid grid-cols-1 gap-4 md:grid-cols-3 lg:grid-cols-4">
            <div>
                <label for="search" class="text-accent3 mb-1 block font-medium">Search</label>
                <input type="text" id="search" name="search" class="border-accent1 w-full rounded border p-2" placeholder="Search by title, ISBN, or synopsis" />
            </div>
            <div>
                <label for="minPrice" class="text-accent3 mb-1 block font-medium">Price Range</label>
                <div class="flex gap-2">
                    <input type="number" id="minPrice" name="minPrice" class="border-accent1 w-1/2 rounded border p-2" placeholder="Min" min="0" />
                    <input type="number" id="maxPrice" name="maxPrice" class="border-accent1 w-1/2 rounded border p-2" placeholder="Max" min="0" />
                </div>
            </div>
            <div>
                <label for="minRating" class="text-accent3 mb-1 block font-medium">Minimum Rating</label>
                <input type="number" id="minRating" name="minRating" min="0" max="5" step="0.1" class="border-accent1 w-full rounded border p-2" placeholder="0-5" />
            </div>
            <div>
                <label for="language" class="text-accent3 mb-1 block font-medium">Language</label>
                <input type="text" id="language" name="language" class="border-accent1 w-full rounded border p-2" placeholder="e.g., English" />
            </div>
            <div>
                <label for="authors" class="text-accent3 mb-1 block font-medium">Authors</label>
                <select id="authors" name="authorIds" multiple class="border-accent1 w-full rounded border p-2"></select>
            </div>
            <div>
                <label for="genres" class="text-accent3 mb-1 block font-medium">Genres</label>
                <select id="genres" name="genreIds" multiple class="border-accent1 w-full rounded border p-2"></select>
            </div>
            <div>
                <label for="publishers" class="text-accent3 mb-1 block font-medium">Publishers</label>
                <select id="publishers" name="publisherIds" multiple class="border-accent1 w-full rounded border p-2"></select>
            </div>
            <div>
                <label for="format" class="text-accent3 mb-1 block font-medium">Format</label>
                <select id="format" name="formats" multiple class="border-accent1 w-full rounded border p-2">
                    <option value="0">Paperback</option>
                    <option value="1">Hardcover</option>
                    <option value="2">Signed Edition</option>
                    <option value="3">Limited Edition</option>
                    <option value="4">First Edition</option>
                    <option value="5">Collectors Edition</option>
                    <option value="6">Authors Edition</option>
                    <option value="7">Deluxe Edition</option>
                    <option value="8">Ebook</option>
                    <option value="9">Audiobook</option>
                </select>
            </div>
            <div>
                <label for="isAvailable" class="text-accent3 mb-1 block font-medium">Availability</label>
                <select id="isAvailable" name="isAvailable" class="border-accent1 w-full rounded border p-2">
                    <option value="">All</option>
                    <option value="true">In Stock</option>
                    <option value="false">Out of Stock</option>
                </select>
            </div>
            <div>
                <label for="sortBy" class="text-accent3 mb-1 block font-medium">Sort By</label>
                <select id="sortBy" name="sortBy" class="border-accent1 w-full rounded border p-2">
                    <option value="0">Title</option>
                    <option value="1">Publication Date</option>
                    <option value="2">Price</option>
                    <option value="3">Popularity</option>
                </select>
            </div>
            <div>
                <label for="sortOrder" class="text-accent3 mb-1 block font-medium">Sort Order</label>
                <select id="sortOrder" name="sortOrder" class="border-accent1 w-full rounded border p-2">
                    <option value="0">Ascending</option>
                    <option value="1">Descending</option>
                </select>
            </div>
            <div class="flex items-end justify-end gap-2">
                <button type="submit" class="bg-accent3 rounded px-4 py-2 text-white hover:bg-accent4">Apply Filters</button>
                <button type="button" id="clear-filters" class="rounded bg-gray-500 px-4 py-2 text-white hover:bg-gray-600">Clear Filters</button>
            </div>
        </form>
    </div>

    <div id="book-list" class="hidden">
        <div class="overflow-x-auto">
            <table class="text-accent2 border-accent1 w-full rounded border">
                <thead>
                    <tr class="bg-accent4 text-white">
                        <th class="p-2 text-left">Image</th>
                        <th class="p-2 text-left">Title</th>
                        <th class="p-2 text-left">Authors</th>
                        <th class="p-2 text-left">Price</th>
                        <th class="p-2 text-left">Stock</th>
                        <th class="p-2 text-center">Actions</th>
                    </tr>
                </thead>
                <tbody id="books-table-body" class="bg-white"></tbody>
            </table>
        </div>
    </div>

    <div id="no-books" class="text-accent2 mt-4 hidden text-center text-lg">No books found.</div>

    <div id="pagination-container" class="mt-6 flex justify-center gap-2"></div>
</div>

@section Scripts {
    <script>
        // configuration constants
        const pageSize = 5;
        let currentPage = 1;
        let allBooks = [];
        let originalBooks = [];

        // checks authentication and redirects if unauthorized
        const checkAuth = () => {
            if (!window.jwtToken) {
                Toast.fire({
                    icon: 'error',
                    title: 'Please log in to manage books'
                }).then(() => {
                    window.location.href = '/User/Login';
                });
                return false;
            }
            return true;
        };

        // fetches all books from api
        const fetchBooks = async () => {
            if (!checkAuth()) return;

            try {
                const response = await fetch('https://localhost:7018/api/Book/getall', {
                    headers: { 'Authorization': `Bearer ${window.jwtToken}` }
                });

                if (response.status === 401) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Please log in to manage books'
                    }).then(() => {
                        window.location.href = '/User/Login';
                    });
                    return;
                }

                if (!response.ok) throw new Error('Failed to load books');

                originalBooks = await response.json();
                allBooks = [...originalBooks];
                renderBooks(currentPage);
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to load books'
                });
            }
        };

        // deletes a book by id
        const deleteBook = async (bookId, bookTitle) => {
            const result = await Swal.fire({
                title: `Are you sure you want to delete "${bookTitle}"?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: 'red',
                calncelButtonColr: 'grey',
                confirmButtonText: 'Delete',
                cancelButtonText: 'Cancel'
            });

            if (!result.isConfirmed) return;
            if (!checkAuth()) return;

            try {
                const response = await fetch(`https://localhost:7018/api/Book/delete/${bookId}`, {
                    method: 'DELETE',
                    headers: { 'Authorization': `Bearer ${window.jwtToken}` }
                });

                if (response.status === 401) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Please log in to delete books'
                    }).then(() => {
                        window.location.href = '/User/Login';
                    });
                    return;
                }

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to delete book');
                }

                Toast.fire({
                    icon: 'success',
                    title: 'Book deleted successfully'
                });
                await fetchBooks();
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to delete book'
                });
            }
        };

        // renders books in table format
        const renderBooks = (page) => {
            const booksTableBody = document.getElementById('books-table-body');
            const noBooksElement = document.getElementById('no-books');
            const paginationContainer = document.getElementById('pagination-container');
            const bookList = document.getElementById('book-list');

            if (!booksTableBody || !noBooksElement || !paginationContainer || !bookList) {
                console.warn('required dom elements missing for rendering books');
                Toast.fire({
                    icon: 'error',
                    title: 'Failed to render books'
                });
                return;
            }

            booksTableBody.innerHTML = '';

            if (!allBooks.length) {
                noBooksElement.classList.remove('hidden');
                bookList.classList.add('hidden');
                paginationContainer.innerHTML = '';
                return;
            }

            const startIndex = (page - 1) * pageSize;
            const endIndex = Math.min(startIndex + pageSize, allBooks.length);
            const paginatedBooks = allBooks.slice(startIndex, endIndex);

            bookList.classList.toggle('hidden', paginatedBooks.length === 0);
            noBooksElement.classList.toggle('hidden', paginatedBooks.length > 0);

            if (paginatedBooks.length) {
                paginatedBooks.forEach(book => {
                    const authorNames = book.authorBooks?.length
                        ? book.authorBooks.map(ab => ab.author.name).join(', ')
                        : 'Unknown Author';

                    const row = document.createElement('tr');
                    row.className = 'border-b border-accent1';
                    row.innerHTML = `
                        <td class="p-2">
                            ${book.coverImage?.coverImageURL
                                ? `<img src="${book.coverImage.coverImageURL}" alt="${book.title}" class="border-2 border-accent2 h-20 w-16 object-cover" />`
                                : `<div class="text-accent3 flex h-20 w-16 items-center justify-center">No Image</div>`
                            }
                        </td>
                        <td class="truncate p-2">${book.title}</td>
                        <td class="truncate p-2">${authorNames}</td>
                        <td class="p-2">Rs. ${book.price.toFixed(2)}</td>
                        <td class="p-2">${book.stock}</td>
                        <td class="p-2">
                            <div class="flex justify-center space-x-2">
                                <a href="/Book/Details/${book.id}" class="bg-accent3 rounded px-3 py-1 text-white hover:bg-accent4">View</a>
                                <a href="/Book/UpdateBook/${book.id}" class="bg-accent3 rounded px-3 py-1 text-white hover:bg-accent4">Update</a>
                                <button class="bg-accent3 delete-btn rounded px-3 py-1 text-white hover:bg-accent4" data-id="${book.id}" data-title="${book.title}">Delete</button>
                            </div>
                        </td>
                    `;
                    booksTableBody.appendChild(row);
                });

                const totalPages = Math.ceil(allBooks.length / pageSize);
                createPaginationControls('pagination-container', totalPages, page, (newPage) => {
                    currentPage = newPage;
                    renderBooks(newPage);
                });
            } else {
                paginationContainer.innerHTML = '';
            }
        };

        // initializes event listeners
        document.addEventListener('DOMContentLoaded', () => {
            const elements = {
                filterButton: document.getElementById('filter-button'),
                filterSection: document.getElementById('filter-section'),
                filterForm: document.getElementById('filter-form'),
                clearFiltersButton: document.getElementById('clear-filters'),
                booksTableBody: document.getElementById('books-table-body')
            };

            if (Object.values(elements).some(el => !el)) {
                console.warn('required dom elements missing for initialization');
                Toast.fire({
                    icon: 'error',
                    title: 'Failed to initialize page'
                });
                return;
            }

            // toggle filter section
            elements.filterButton.addEventListener('click', () => {
                elements.filterSection.classList.toggle('hidden');
            });

            // handle form submission
            elements.filterForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const params = getBookFilterParams();
                if (!validateBookFilterParams(params)) return;
                allBooks = filterBooks(originalBooks, params);
                currentPage = 1;
                renderBooks(currentPage);
            });

            // handle clear filters
            elements.clearFiltersButton.addEventListener('click', () => {
                clearBookFilters();
                allBooks = [...originalBooks];
                currentPage = 1;
                renderBooks(currentPage);
            });

            // handle delete button clicks
            elements.booksTableBody.addEventListener('click', (e) => {
                const deleteBtn = e.target.closest('.delete-btn');
                if (deleteBtn) {
                    const { id, title } = deleteBtn.dataset;
                    deleteBook(id, title);
                }
            });

            // fetch initial data
            fetchBookDropdownOptions();
            fetchBooks();
        });
    </script>
}