@page "{id}"
@model Whisperwood.Pages.Book.DetailsModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Book Details";
}

<div class="container mx-auto px-4 py-8">
    <div id="loading" class="text-accent2 col-span-full text-center text-lg">Loading book details...</div>
    <div id="book-details" class="hidden">
        <div class="flex gap-8">
            <div class="absolute ml-36 flex w-2/3 justify-between">
                <div id="cover-image" class="z-10 h-96 rounded-md shadow-lg"></div>
                <div class="mt-8">
                    <h1 id="book-title" class="text-accent4 mb-2 text-5xl font-bold"></h1>
                    <p id="book-author" class="text-accent2 mb-4 text-3xl italic"></p>
                    <div class="text-accent3 mb-4 flex w-full justify-between text-xl">
                        <div class="mr-64">
                            <p id="book-isbn" class="mb-2"></p>
                            <p id="book-published" class="mb-2"></p>
                            <p id="book-edition" class="mb-2"></p>
                        </div>
                        <div class="text-right">
                            <p id="book-stock" class="mb-2"></p>
                            <p id="book-price" class="font-medium"></p>
                        </div>
                    </div>
                    <div class="mb-4 flex items-center text-xl">
                        <div id="book-rating" class="text-accent3 mr-2"></div>
                        <span class="text-accent2">★★★★★</span>
                    </div>
                </div>
            </div>

            <div class="mt-80 w-full">
                <div class="bg-accent4 mt-4 flex h-24 items-center justify-center gap-2 space-x-2 rounded">
                    <button id="add-to-wishlist" class="bg-accent2 rounded px-2 py-1 text-white hover:bg-accent3">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" height="24" width="24">
                            <path stroke-width="3" fill="none" stroke="#fff" d="M21.3 28.3 16 23l-5.3 5.3c-.6.6-1.7.2-1.7-.7V5c0-.6.4-1 1-1h12c.6 0 1 .4 1 1v22.6c0 .9-1.1 1.3-1.7.7" />
                        </svg>
                    </button>
                    <button id="add-to-cart" class="bg-accent2 rounded px-2 py-1 text-white hover:bg-accent3">
                        <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" stroke="#fff" stroke-width="2">
                            <path fill="none" stroke-linecap="round" d="M11 20.5h.1m5.9 0h.1M3 3h2.14a1 1 0 0 1 1 .85L6.62 7 8 16l11-1 2-8H6.62" />
                        </svg>
                    </button>
                    <button id="add-review" class="bg-accent2 rounded px-2 py-1 text-white hover:bg-accent3">
                        <svg width="24" height="24" fill="none" stroke="#fff" stroke-width="2" stroke-linejoin="round" viewBox="0 0 24 24"><path d="M12 4 9.22 9.27 3 10.11l4.5 4.1L6.44 20 12 17.27 17.56 20l-1.06-5.79 4.5-4.1-6.22-.84z" /></svg>
                    </button>
                    <button id="update-button" class="bg-accent2 hidden rounded px-3 py-1 text-white hover:bg-accent3">Update</button>
                    <button id="delete-button" class="bg-accent2 hidden rounded px-3 py-1 text-white hover:bg-accent3">Delete</button>
                </div>

                <div class="bg-primary rounded-b-lg p-6 shadow-lg">
                    <div class="m-4 grid grid-cols-2 gap-4">
                        <div class="text-accent3 gap-4 space-y-4">
                            <div>
                                <h2 class="text-accent4 text-xl font-semibold">Description</h2>
                                <p id="book-synopsis" class="text-accent2"></p>
                            </div>
                            <div>
                                <h2 class="text-accent4 text-xl font-semibold">Genre</h2>
                                <p id="genre-details"></p>
                            </div>
                            <div>
                                <h2 class="text-accent4 text-xl font-semibold">Language</h2>
                                <p id="book-language"></p>
                            </div>
                            <div>
                                <h2 class="text-accent4 text-xl font-semibold">Format</h2>
                                <p id="book-format"></p>
                            </div>
                        </div>
                        <div class="text-accent3 gap-4 space-y-4">
                            <div>
                                <h2 class="text-accent4 text-xl font-semibold">Author</h2>
                                <p id="author-details"></p>
                            </div>
                        </div>
                    </div>
                </div>

                <div id="reviews-section" class="mt-10 hidden">
                    <h2 class="text-accent3 mb-4 text-center text-2xl font-semibold">Reader Reviews</h2>
                    <div id="reviews-grid" class="grid grid-cols-1 gap-4 px-4 md:grid-cols-2 lg:grid-cols-3">
                    </div>
                    <p id="no-reviews" class="text-accent2 hidden text-center text-lg">No reviews yet for this book.</p>
                    <div id="see-more-reviews" class="mt-4 hidden text-center">
                        <a href="/Book/BookReview/" class="bg-accent3 rounded px-4 py-2 text-white hover:bg-accent4">See More</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Fetches user ID
        async function fetchUserId() {
            if (!window.checkAuth('view profile')) return null;
            try {
                const response = await fetch('https://localhost:7018/api/Auth/user', {
                    headers: { 'Authorization': `Bearer ${window.jwtToken}` }
                });
                if (response.status === 401) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Please log in'
                    }).then(() => window.location.href = '/User/Login');
                    return null;
                }
                if (!response.ok) throw new Error('Failed to fetch user');
                const data = await response.json();
                return data.id;
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to fetch user'
                });
                return null;
            }
        }

        // Fetches user orders
        async function fetchOrders(userId) {
            if (!userId) return [];
            try {
                const response = await fetch(`https://localhost:7018/api/Order/getbyuser/${userId}`, {
                    headers: { 'Authorization': `Bearer ${window.jwtToken}` }
                });
                if (response.status === 401) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Please log in to view orders'
                    }).then(() => window.location.href = '/User/Login');
                    return [];
                }
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to fetch orders');
                }
                return await response.json();
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to fetch orders'
                });
                return [];
            }
        }

        // Checks for fulfilled order with book
        function hasFulfilledOrder(orders, bookId) {
            return orders.some(order =>
                order.status === 2 && // Fulfilled
                order.orderItems?.some(item => item.bookId === bookId)
            );
        }

        // Fetches user reviews
        async function fetchUserReviews(userId) {
            if (!userId) return [];
            try {
                const response = await fetch('https://localhost:7018/api/Review/getbyuserid', {
                    headers: { 'Authorization': `Bearer ${window.jwtToken}` }
                });
                if (response.status === 401) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Please log in to view reviews'
                    }).then(() => window.location.href = '/User/Login');
                    return [];
                }
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to fetch reviews');
                }
                return await response.json();
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to fetch reviews'
                });
                return [];
            }
        }

        // Checks for existing review
        function hasExistingReview(reviews, bookId) {
            return reviews.some(review => review.bookId === bookId);
        }

        async function fetchBookDetails() {
            const elements = {
                loading: document.getElementById('loading'),
                details: document.getElementById('book-details'),
                cover: document.getElementById('cover-image'),
                title: document.getElementById('book-title'),
                author: document.getElementById('book-author'),
                stock: document.getElementById('book-stock'),
                price: document.getElementById('book-price'),
                isbn: document.getElementById('book-isbn'),
                published: document.getElementById('book-published'),
                edition: document.getElementById('book-edition'),
                rating: document.getElementById('book-rating'),
                synopsis: document.getElementById('book-synopsis'),
                language: document.getElementById('book-language'),
                format: document.getElementById('book-format'),
                authorDetails: document.getElementById('author-details'),
                genreDetails: document.getElementById('genre-details'),
                wishlist: document.getElementById('add-to-wishlist'),
                cart: document.getElementById('add-to-cart'),
                review: document.getElementById('add-review'),
                update: document.getElementById('update-button'),
                delete: document.getElementById('delete-button')
            };

            const isAdmin = window.isAdmin;
            const isStaff = window.isStaff;
            const isAuthenticated = window.checkAuth('view profile');
            const id = window.location.pathname.split('/').pop();

            try {
                const response = await fetch(`https://localhost:7018/api/Book/getbyid/${id}`);
                if (!response.ok) throw new Error('Failed to load book details. Please try again later.');

                const book = await response.json();
                const bookFormatMap = {
                    0: 'Paperback',
                    1: 'Hardcover',
                    2: 'Signed Edition',
                    3: 'Limited Edition',
                    4: 'First Edition',
                    5: "Collector's Edition",
                    6: "Author's Edition",
                    7: 'Deluxe Edition',
                    8: 'Ebook',
                    9: 'Audiobook'
                };
                const formatText = (typeof book.format === 'number' && book.format in bookFormatMap)
                    ? bookFormatMap[book.format]
                    : 'Unknown';
                const isOnSale = window.calculateBookPrice(book) < book.price;

                elements.loading.classList.add('hidden');
                elements.details.classList.remove('hidden');

                elements.cover.innerHTML = book.coverImage?.coverImageURL
                    ? `<img src="${book.coverImage.coverImageURL}" alt="${book.title}" class="h-96 w-72 rounded-md object-cover shadow-md" />`
                    : `<div class="bg-accent2 text-accent3 flex h-96 w-72 items-center justify-center rounded-md shadow-md">No Image</div>`;

                elements.title.textContent = book.title || 'Untitled';
                elements.author.textContent = book.authorBooks?.length > 0
                    ? book.authorBooks.map(ab => ab.author.name).join(', ')
                    : 'Unknown Author';
                elements.stock.textContent = `Available Stock: ${book.stock || 0}`;
                elements.price.innerHTML = isOnSale
                    ? `Price: <span class="text-red-500">Rs. ${window.calculateBookPrice(book).toFixed(2)}</span> <span class="text-accent1 line-through">Rs. ${book.price.toFixed(2)}</span>`
                    : `Price: Rs. ${book.price?.toFixed(2) || '0.00'}`;
                elements.isbn.textContent = `ISBN: ${book.isbn || 'N/A'}`;
                elements.published.textContent = `Published Date: ${book.publishedDate || 'N/A'}`;
                elements.edition.textContent = `Edition: ${book.edition || 1}`;
                elements.rating.innerHTML = `${book.averageRating?.toFixed(1) || 0} `;
                elements.rating.nextElementSibling.textContent = '★★★★★'.slice(0, Math.round(book.averageRating || 0)).padEnd(5, '☆');
                elements.synopsis.textContent = book.synopsis || 'No description available';
                elements.language.textContent = book.language || 'Unknown';
                elements.format.textContent = formatText;

                elements.authorDetails.innerHTML = book.authorBooks?.length > 0
                    ? book.authorBooks.map(ab => `
                        <div>
                            ${ab.author.name}<br>
                            Nationality: ${ab.author.nationality || 'Unknown'}<br>
                            DOB: ${ab.author.dob || 'Unknown'}<br>
                            Contact: ${ab.author.contact || 'Unknown'}<br>
                            Email: ${ab.author.email || 'Unknown'}
                        </div>
                    `).join('<hr class="border-accent2 my-2">')
                    : 'No authors listed';

                elements.genreDetails.textContent = book.genreBooks?.length > 0
                    ? book.genreBooks.map(gb => `${gb.genre.name}`).join(', ')
                    : 'No genres listed';

                // Initialize buttons with authentication checks
                if (isAuthenticated) {
                    initializeWishlistButton('add-to-wishlist', id);
                    window.initializeCartButton('add-to-cart', book.id, book);

                    const userId = await fetchUserId();
                    let canReview = false;

                    if (userId) {
                        const orders = await fetchOrders(userId);
                        const reviews = await fetchUserReviews(userId);

                        const hasOrder = hasFulfilledOrder(orders, id);
                        const hasReview = hasExistingReview(reviews, id);

                        if (!hasOrder) {
                            elements.review.addEventListener('click', (e) => {
                                e.preventDefault();
                                Toast.fire({
                                    icon: 'error',
                                    title: 'You can only review books you have purchased and received.'
                                });
                            });
                        } else if (hasReview) {
                            elements.review.addEventListener('click', (e) => {
                                e.preventDefault();
                                Toast.fire({
                                    icon: 'error',
                                    title: 'You have already submitted a review for this book.'
                                });
                            });
                        } else {
                            canReview = true;
                            elements.review.addEventListener('click', (e) => {
                                e.preventDefault();
                                window.location.href = `/Review/AddReview?BookId=${id}`;
                            });
                        }
                    }

                    if (isAdmin || isStaff) {
                        elements.update.classList.remove('hidden');
                        elements.delete.classList.remove('hidden');

                        elements.update.addEventListener('click', (e) => {
                            e.preventDefault();
                            window.location.href = `/Book/UpdateBook/${id}`;
                        });

                        elements.delete.addEventListener('click', (e) => {
                            e.preventDefault();
                            deleteBook(book.id, book.title);
                        });
                    }
                } else {
                    // Prompt login for unauthenticated users
                    elements.wishlist.addEventListener('click', (e) => {
                        e.preventDefault();
                        Toast.fire({
                            icon: 'error',
                            title: 'Please log in to manage wishlist'
                        }).then(() => {
                            window.location.href = '/User/Login';
                        });
                    });

                    elements.cart.addEventListener('click', (e) => {
                        e.preventDefault();
                        Toast.fire({
                            icon: 'error',
                            title: 'Please log in to manage cart'
                        }).then(() => {
                            window.location.href = '/User/Login';
                        });
                    });

                    elements.review.addEventListener('click', (e) => {
                        e.preventDefault();
                        Toast.fire({
                            icon: 'error',
                            title: 'Please log in to add reviews'
                        }).then(() => {
                            window.location.href = '/User/Login';
                        });
                    });
                }

                await fetchReviews(id);
            } catch (error) {
                elements.loading.classList.add('hidden');
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to load book details'
                });
            }
        }

        async function fetchReviews(bookId) {
            try {
                const response = await fetch(`https://localhost:7018/api/Review/getbybook/${bookId}`);
                if (!response.ok) throw new Error('Could not load reviews');

                const reviews = await response.json();
                const section = document.getElementById('reviews-section');
                const grid = document.getElementById('reviews-grid');
                const none = document.getElementById('no-reviews');
                const seeMore = document.getElementById('see-more-reviews');

                section.classList.remove('hidden');
                grid.innerHTML = '';

                if (reviews.length === 0) {
                    none.classList.remove('hidden');
                    seeMore.classList.add('hidden');
                    return;
                }
                
                none.classList.add('hidden');
                seeMore.classList.remove('hidden');
                seeMore.querySelector('a').href = `/Review/BookReview/${bookId}`;

                const recentReviews = reviews
                    .sort((a, b) => {
                        const dateA = a.updatedAt ? new Date(a.updatedAt) : new Date(a.createdAt);
                        const dateB = b.updatedAt ? new Date(b.updatedAt) : new Date(b.createdAt);
                        return dateB - dateA;
                    })
                    .slice(0, 3);

                recentReviews.forEach((review) => {
                    const reviewCard = document.createElement('div');
                    reviewCard.className = 'bg-primary border border-accent2 p-4 rounded shadow-md';
                    reviewCard.innerHTML = `
                        <div class="mb-1 flex items-center">
                            <img src="${review.users?.imageURL}" class="mr-2 h-8 w-8 rounded-full" alt="${review.users?.name || 'Anonymous'}">
                            <p class="text-accent2 text-xl font-semibold">${review.users?.name || 'Anonymous'}</p>
                        </div>
                        <p class="text-accent3 mb-2">Rating: ★ ${review.rating}</p>
                        <p class="text-accent1 mb-2 line-clamp-5 italic">"${review.message || 'No comment'}"</p>
                        <p class="text-accent2 text-sm">${new Date(review.createdAt).toLocaleString()}</p>
                    `;
                    grid.appendChild(reviewCard);
                });
            } catch (error) {
                console.error('Error fetching reviews:', error);
                Toast.fire({
                    icon: 'error',
                    title: 'Failed to load reviews'
                });
            }
        }

        async function deleteBook(bookId) {
            try {
                const response = await fetch(`https://localhost:7018/api/Book/delete/${bookId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${window.jwtToken}`
                    }
                });

                if (response.status === 401) {
                    window.checkAuth('delete books');
                    return;
                }

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to delete book');
                }

                Toast.fire({
                    icon: 'success',
                    title: 'Book deleted successfully'
                });
                setTimeout(() => {
                    window.location.href = '/Book/Browse';
                }, 2000);
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to delete book'
                });
            }
        }

        document.addEventListener('DOMContentLoaded', fetchBookDetails);
    </script>
}