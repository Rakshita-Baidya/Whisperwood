@page "{id:guid}"
@model Whisperwood.Pages.Book.UpdateBookModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Update Book";
}

<div class="px-4 py-8">
    <h1 class="text-accent4 mb-6 text-center text-4xl font-bold">Update Book</h1>

    <div id="error-message" class="mb-4 hidden text-center text-red-600"></div>
    <div id="success-message" class="mb-4 hidden text-center text-green-600"></div>

    <form id="update-book-form" class="bg-primary border-accent3 mx-auto rounded-lg border p-6 shadow-md">
        <div class="text-accent4 grid grid-cols-2 gap-4 md:grid-cols-4">
            <div>
                <label for="title" class="mb-1 block font-medium">Title</label>
                <input type="text" id="title" name="title" class="border-accent1 w-full rounded border p-2" placeholder="Enter book title" required>
            </div>
            <div>
                <label for="isbn" class="mb-1 block font-medium">ISBN</label>
                <input type="text" id="isbn" name="isbn" class="border-accent1 w-full rounded border p-2" placeholder="e.g., 1551977867" required>
            </div>
            <div>
                <label for="price" class="mb-1 block font-medium">Price</label>
                <input type="number" id="price" name="price" class="border-accent1 w-full rounded border p-2" placeholder="Enter price" min="1" step="0.01" required>
            </div>
            <div class="row-span-3">
                <label for="coverImages" class="mb-1 block font-medium">Cover Image</label>
                <select id="coverImages" name="coverImageId" class="border-accent1 w-full rounded border p-2" required>
                    <option value="">Select a cover image</option>
                </select>
                <img id="coverImagePreview" src="" alt="Cover Image Preview" class="mt-2 hidden h-40 w-32" />
            </div>
            <div>
                <label for="stock" class="mb-1 block font-medium">Stock</label>
                <input type="number" id="stock" name="stock" class="border-accent1 w-full rounded border p-2" placeholder="Enter stock quantity" min="0" required>
            </div>
            <div>
                <label for="language" class="mb-1 block font-medium">Language</label>
                <input type="text" id="language" name="language" class="border-accent1 w-full rounded border p-2" placeholder="e.g., English" required>
            </div>
            <div>
                <label for="edition" class="mb-1 block font-medium">Edition</label>
                <input type="number" id="edition" name="edition" class="border-accent1 w-full rounded border p-2" placeholder="Enter edition number" min="1" required>
            </div>
            <div>
                <label for="format" class="mb-1 block font-medium">Format</label>
                <select id="format" name="format" class="border-accent1 w-full rounded border p-[10px]" required>
                    <option value="0">Paperback</option>
                    <option value="1">Hardcover</option>
                    <option value="2">Signed Edition</option>
                    <option value="3">Limited Edition</option>
                    <option value="4">First Edition</option>
                    <option value="5">Collectors Edition</option>
                    <option value="6">Authors Edition</option>
                    <option value="7">Deluxe Edition</option>
                    <option value="8">Ebook</option>
                    <option value="9">Audiobook</option>
                </select>
            </div>
            <div>
                <label for="publishedDate" class="mb-1 block font-medium">Published Date</label>
                <input type="date" id="publishedDate" name="publishedDate" class="border-accent1 w-full rounded border p-[6px]" required>
            </div>
            <div class="col-start-1">
                <label for="discountPercentage" class="mb-1 block font-medium">Discount (%)</label>
                <input type="number" id="discountPercentage" name="discountPercentage" class="border-accent1 w-full rounded border p-2" placeholder="e.g., 10" min="0" max="100" step="0.01">
            </div>
            <div>
                <label for="isOnSale" class="mb-1 block font-medium">On Sale</label>
                <select id="isOnSale" name="isOnSale" class="border-accent1 w-full rounded border p-[10px]">
                    <option value="false">No</option>
                    <option value="true">Yes</option>
                </select>
            </div>
            <div>
                <label for="discountStartDate" class="mb-1 block font-medium">Discount Start Date</label>
                <input type="date" id="discountStartDate" name="discountStartDate" class="border-accent1 w-full rounded border p-[6px]">
            </div>
            <div>
                <label for="discountEndDate" class="mb-1 block font-medium">Discount End Date</label>
                <input type="date" id="discountEndDate" name="discountEndDate" class="border-accent1 w-full rounded border p-[6px]">
            </div>
            
            <div class="col-start-1">
                <label for="authors" class="mb-1 block font-medium">Authors</label>
                <select id="authors" name="authorIds" multiple class="border-accent1 w-full rounded border p-2" required>
                </select>
            </div>
            <div>
                <label for="genres" class="mb-1 block font-medium">Genres</label>
                <select id="genres" name="genreIds" multiple class="border-accent1 w-full rounded border p-2" required>
                </select>
            </div>
            <div>
                <label for="categories" class="mb-1 block font-medium">Categories</label>
                <select id="categories" name="categoryIds" multiple class="border-accent1 w-full rounded border p-2" required>
                </select>
            </div>
            <div>
                <label for="publishers" class="mb-1 block font-medium">Publishers</label>
                <select id="publishers" name="publisherIds" multiple class="border-accent1 w-full rounded border p-2" required>
                </select>
            </div>
            <div class="md:col-span-full">
                <label for="synopsis" class="mb-1 block font-medium">Synopsis</label>
                <textarea id="synopsis" name="synopsis" class="border-accent1 w-full rounded border p-2" rows="3" placeholder="Enter book synopsis" required></textarea>
            </div>
        </div>
        <div class="mt-6 flex justify-center gap-4">
            <button type="submit" class="bg-accent3 rounded px-6 py-2 text-white hover:bg-accent2">Update Book</button>
            <div onclick="history.back()" class="rounded bg-gray-500 px-6 py-2 text-white hover:bg-gray-600">Cancel</div>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        async function fetchDropdownOptions() {
            try {
                // Fetch authors
                const authorsResponse = await fetch('https://localhost:7018/api/Author/getall');
                if (authorsResponse.ok) {
                    const authors = await authorsResponse.json();
                    const authorSelect = document.getElementById('authors');
                    authors.forEach(author => {
                        const option = document.createElement('option');
                        option.value = author.id;
                        option.textContent = author.name;
                        authorSelect.appendChild(option);
                    });
                }

                // Fetch genres
                const genresResponse = await fetch('https://localhost:7018/api/Genre/getall');
                if (genresResponse.ok) {
                    const genres = await genresResponse.json();
                    const genreSelect = document.getElementById('genres');
                    genres.forEach(genre => {
                        const option = document.createElement('option');
                        option.value = genre.id;
                        option.textContent = genre.name;
                        genreSelect.appendChild(option);
                    });
                }

                // Fetch categories
                const categoriesResponse = await fetch('https://localhost:7018/api/Category/getall');
                if (categoriesResponse.ok) {
                    const categories = await categoriesResponse.json();
                    const categorySelect = document.getElementById('categories');
                    categories.forEach(category => {
                        const option = document.createElement('option');
                        option.value = category.id;
                        option.textContent = category.name;
                        categorySelect.appendChild(option);
                    });
                }

                // Fetch publishers
                const publishersResponse = await fetch('https://localhost:7018/api/Publisher/getall');
                if (publishersResponse.ok) {
                    const publishers = await publishersResponse.json();
                    const publisherSelect = document.getElementById('publishers');
                    publishers.forEach(publisher => {
                        const option = document.createElement('option');
                        option.value = publisher.id;
                        option.textContent = publisher.name;
                        publisherSelect.appendChild(option);
                    });
                }

                // Fetch cover images
                const coverImagesResponse = await fetch('https://localhost:7018/api/CoverImage/getall');
                if (coverImagesResponse.ok) {
                    const coverImages = await coverImagesResponse.json();
                    const coverImageSelect = document.getElementById('coverImages');
                    const coverImagePreview = document.getElementById('coverImagePreview');
                    coverImages.forEach(coverImage => {
                        const option = document.createElement('option');
                        option.value = coverImage.id;
                        option.textContent = coverImage.id || `Cover Image ${coverImage.id}`;
                        coverImageSelect.appendChild(option);
                    });

                    // Update preview when selection changes
                    coverImageSelect.addEventListener('change', () => {
                        const selectedId = coverImageSelect.value;
                        const selectedCover = coverImages.find(ci => ci.id === selectedId);
                        if (selectedCover && selectedCover.coverImageURL) {
                            coverImagePreview.src = selectedCover.coverImageURL;
                            coverImagePreview.classList.remove('hidden');
                        } else {
                            coverImagePreview.src = '';
                            coverImagePreview.classList.add('hidden');
                        }
                    });
                }
            } catch (error) {
                console.error('Error fetching dropdown options:', error);
                const errorMessageElement = document.getElementById('error-message');
                if (errorMessageElement) {
                    errorMessageElement.textContent = 'Failed to load dropdown options. Please try again later.';
                    errorMessageElement.classList.remove('hidden');
                }
            }
        }

        async function fetchBookDetails(bookId) {
            try {
                const response = await fetch(`https://localhost:7018/api/Book/getbyid/${bookId}`);
                if (!response.ok) {
                    throw new Error('Failed to load book details.');
                }

                const book = await response.json();

                // Prefill the form fields
                document.getElementById('title').value = book.title || '';
                document.getElementById('isbn').value = book.isbn || '';
                document.getElementById('price').value = book.price || '';
                document.getElementById('stock').value = book.stock || 0;
                document.getElementById('discountPercentage').value = book.discountPercentage || 0;
                document.getElementById('isOnSale').value = book.isOnSale.toString();
                document.getElementById('discountStartDate').value = book.discountStartDate ? new Date(book.discountStartDate).toISOString().split('T')[0] : '';
                document.getElementById('discountEndDate').value = book.discountEndDate ? new Date(book.discountEndDate).toISOString().split('T')[0] : '';
                document.getElementById('language').value = book.language || '';
                document.getElementById('edition').value = book.edition || 1;
                document.getElementById('format').value = book.format || 0;
                document.getElementById('publishedDate').value = book.publishedDate ? new Date(book.publishedDate).toISOString().split('T')[0] : '';
                document.getElementById('synopsis').value = book.synopsis || '';

                // Prefill authors
                const authorSelect = document.getElementById('authors');
                if (book.authorBooks && book.authorBooks.length > 0) {
                    const selectedAuthorIds = book.authorBooks.map(ab => ab.authorId);
                    Array.from(authorSelect.options).forEach(option => {
                        if (selectedAuthorIds.includes(option.value)) {
                            option.selected = true;
                        }
                    });
                }

                // Prefill genres
                const genreSelect = document.getElementById('genres');
                if (book.genreBooks && book.genreBooks.length > 0) {
                    const selectedGenreIds = book.genreBooks.map(gb => gb.genreId);
                    Array.from(genreSelect.options).forEach(option => {
                        if (selectedGenreIds.includes(option.value)) {
                            option.selected = true;
                        }
                    });
                }

                // Prefill categories
                const categorySelect = document.getElementById('categories');
                if (book.categoryBooks && book.categoryBooks.length > 0) {
                    const selectedCategoryIds = book.categoryBooks.map(cb => cb.categoryId);
                    Array.from(categorySelect.options).forEach(option => {
                        if (selectedCategoryIds.includes(option.value)) {
                            option.selected = true;
                        }
                    });
                }

                // Prefill publishers
                const publisherSelect = document.getElementById('publishers');
                if (book.publisherBooks && book.publisherBooks.length > 0) {
                    const selectedPublisherIds = book.publisherBooks.map(pb => pb.publisherId);
                    Array.from(publisherSelect.options).forEach(option => {
                        if (selectedPublisherIds.includes(option.value)) {
                            option.selected = true;
                        }
                    });
                }

                // Prefill cover image
                const coverImageSelect = document.getElementById('coverImages');
                const coverImagePreview = document.getElementById('coverImagePreview');
                if (book.coverImageId) {
                    coverImageSelect.value = book.coverImageId;
                    const coverImagesResponse = await fetch('https://localhost:7018/api/CoverImage/getall');
                    if (coverImagesResponse.ok) {
                        const coverImages = await coverImagesResponse.json();
                        const selectedCover = coverImages.find(ci => ci.id === book.coverImageId);
                        if (selectedCover && selectedCover.coverImageURL) {
                            coverImagePreview.src = selectedCover.coverImageURL;
                            coverImagePreview.classList.remove('hidden');
                        }
                    }
                }
            } catch (error) {
                console.error('Error fetching book details:', error);
                const errorMessageElement = document.getElementById('error-message');
                if (errorMessageElement) {
                    errorMessageElement.textContent = error.message;
                    errorMessageElement.classList.remove('hidden');
                }
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            const form = document.getElementById('update-book-form');
            const errorMessageElement = document.getElementById('error-message');
            const successMessageElement = document.getElementById('success-message');

            // Extract book ID from the URL
            const bookId = window.location.pathname.split('/').pop();
            if (!bookId) {
                errorMessageElement.textContent = 'Book ID not found in URL.';
                errorMessageElement.classList.remove('hidden');
                return;
            }

            // Fetch dropdown options and book details
            fetchDropdownOptions().then(() => {
                fetchBookDetails(bookId);
            });

            form.addEventListener('submit', async (e) => {
                e.preventDefault();

                errorMessageElement.classList.add('hidden');
                successMessageElement.classList.add('hidden');

                const formData = new FormData(form);
                const discountStartDate = formData.get('discountStartDate');
                const discountEndDate = formData.get('discountEndDate');

                if (discountStartDate && discountEndDate && new Date(discountStartDate) > new Date(discountEndDate)) {
                    errorMessageElement.textContent = 'Discount start date cannot be after end date.';
                    errorMessageElement.classList.remove('hidden');
                    return;
                }

                const bookData = {
                    title: formData.get('title'),
                    isbn: formData.get('isbn'),
                    price: parseFloat(formData.get('price')),
                    discountPercentage: parseFloat(formData.get('discountPercentage')) || 0,
                    isOnSale: formData.get('isOnSale') === 'true',
                    discountStartDate: discountStartDate || null,
                    discountEndDate: discountEndDate || null,
                    synopsis: formData.get('synopsis'),
                    publishedDate: formData.get('publishedDate'),
                    stock: parseInt(formData.get('stock')),
                    language: formData.get('language'),
                    format: parseInt(formData.get('format')),
                    edition: parseInt(formData.get('edition')),
                    authorIds: Array.from(formData.getAll('authorIds')),
                    genreIds: Array.from(formData.getAll('genreIds')),
                    categoryIds: Array.from(formData.getAll('categoryIds')),
                    publisherIds: Array.from(formData.getAll('publisherIds')),
                    coverImageId: formData.get('coverImageId')
                };

                try {
                    const response = await fetch(`https://localhost:7018/api/Book/update/${bookId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${window.jwtToken}`
                        },
                        body: JSON.stringify(bookData)
                    });

                    if (!response.ok) {
                        const text = await response.text();
                        try {
                            const errorData = JSON.parse(text);
                            throw new Error(errorData.message || 'Failed to update book.');
                        } catch (jsonError) {
                            throw new Error(text || 'An unexpected error occurred.');
                        }
                    }

                    successMessageElement.textContent = 'Book updated successfully!';
                    successMessageElement.classList.remove('hidden');

                    setTimeout(() => {
                        window.location.href = '/Book/ManageBook';
                    }, 1000);
                } catch (error) {
                    console.error('Error updating book:', error);
                    errorMessageElement.textContent = error.message;
                    errorMessageElement.classList.remove('hidden');
                }
            });
        });
    </script>
}