@page
@model Whisperwood.Pages.Book.BrowseByCategoryModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Browse Books by Category";
}

<div class="px-4 py-8">
    <div class="mb-4 flex items-center justify-between">
        <h1 class="text-accent3 text-center text-4xl font-bold">Browse Books by Category</h1>
        <button id="toggle-filter" class="bg-accent3 rounded px-4 py-2 text-white hover:bg-accent4">Filter Books</button>
    </div>

    <div id="filter-section" class="bg-primary border-accent3 mb-8 hidden rounded border p-6 shadow-md">
        <form id="filter-form" class="grid grid-cols-1 gap-4 md:grid-cols-3 lg:grid-cols-4">
            <div>
                <label for="search" class="text-accent3 mb-1 block font-medium">Search</label>
                <input type="text" id="search" name="search" class="border-accent1 w-full rounded border p-2" placeholder="Search by title, ISBN, or Synopsis">
            </div>
            <div>
                <label for="minPrice" class="text-accent3 mb-1 block font-medium">Price Range</label>
                <div class="flex gap-2">
                    <input type="number" id="minPrice" name="minPrice" class="border-accent1 w-1/2 rounded border p-2" placeholder="Min">
                    <input type="number" id="maxPrice" name="maxPrice" class="border-accent1 w-1/2 rounded border p-2" placeholder="Max">
                </div>
            </div>
            <div>
                <label for="minRating" class="text-accent3 mb-1 block font-medium">Minimum Rating</label>
                <input type="number" id="minRating" name="minRating" min="0" max="5" step="0.1" class="border-accent1 w-full rounded border p-2" placeholder="0-5">
            </div>
            <div>
                <label for="language" class="text-accent3 mb-1 block font-medium">Language</label>
                <input type="text" id="language" name="language" class="border-accent1 w-full rounded border p-2" placeholder="e.g., English">
            </div>
            <div>
                <label for="authors" class="text-accent3 mb-1 block font-medium">Authors</label>
                <select id="authors" name="authorIds" multiple class="border-accent1 w-full rounded border p-2"></select>
            </div>
            <div>
                <label for="genres" class="text-accent3 mb-1 block font-medium">Genres</label>
                <select id="genres" name="genreIds" multiple class="border-accent1 w-full rounded border p-2"></select>
            </div>
            <div>
                <label for="publishers" class="text-accent3 mb-1 block font-medium">Publishers</label>
                <select id="publishers" name="publisherIds" multiple class="border-accent1 w-full rounded border p-2"></select>
            </div>
            <div>
                <label for="format" class="text-accent3 mb-1 block font-medium">Format</label>
                <select id="format" name="formats" multiple class="border-accent1 w-full rounded border p-2">
                    <option value="0">Paperback</option>
                    <option value="1">Hardcover</option>
                    <option value="2">Signed Edition</option>
                    <option value="3">Limited Edition</option>
                    <option value="4">First Edition</option>
                    <option value="5">Collectors Edition</option>
                    <option value="6">Authors Edition</option>
                    <option value="7">Deluxe Edition</option>
                    <option value="8">Ebook</option>
                    <option value="9">Audiobook</option>
                </select>
            </div>
            <div>
                <label for="isAvailable" class="text-accent3 mb-1 block font-medium">Availability</label>
                <select id="isAvailable" name="isAvailable" class="border-accent1 w-full rounded border p-2">
                    <option value="">All</option>
                    <option value="true">In Stock</option>
                    <option value="false">Out of Stock</option>
                </select>
            </div>
            <div>
                <label for="sortBy" class="text-accent3 mb-1 block font-medium">Sort By</label>
                <select id="sortBy" name="sortBy" class="border-accent1 w-full rounded border p-2">
                    <option value="0">Title</option>
                    <option value="1">Publication Date</option>
                    <option value="2">Price</option>
                    <option value="3">Popularity</option>
                </select>
            </div>
            <div>
                <label for="sortOrder" class="text-accent3 mb-1 block font-medium">Sort Order</label>
                <select id="sortOrder" name="sortOrder" class="border-accent1 w-full rounded border p-2">
                    <option value="0">Ascending</option>
                    <option value="1">Descending</option>
                </select>
            </div>
            <div class="flex items-end justify-end gap-2">
                <button type="submit" class="bg-accent3 rounded px-4 py-2 text-white hover:bg-accent4">Apply Filters</button>
                <button type="button" id="clear-filters" class="bg-secondary rounded px-4 py-2 text-white hover:bg-gray-600">Clear Filters</button>
            </div>
        </form>
    </div>

    <div id="category-tabs" class="mb-6 flex flex-wrap gap-2">
        <button id="tab-all" class="bg-accent3 rounded px-4 py-2 text-white hover:bg-accent4 active:bg-accent4">All Books</button>
        <button id="tab-bestsellers" class="bg-accent3 rounded px-4 py-2 text-white hover:bg-accent4 active:bg-accent4">Bestsellers</button>
        <button id="tab-award-winners" class="bg-accent3 rounded px-4 py-2 text-white hover:bg-accent4 active:bg-accent4">Award Winners</button>
        <button id="tab-new-releases" class="bg-accent3 rounded px-4 py-2 text-white hover:bg-accent4 active:bg-accent4">New Releases</button>
        <button id="tab-new-arrivals" class="bg-accent3 rounded px-4 py-2 text-white hover:bg-accent4 active:bg-accent4">New Arrivals</button>
        <button id="tab-coming-soon" class="bg-accent3 rounded px-4 py-2 text-white hover:bg-accent4 active:bg-accent4">Coming Soon</button>
        <button id="tab-deals" class="bg-accent3 rounded px-4 py-2 text-white hover:bg-accent4 active:bg-accent4">Deals</button>
    </div>

    <div id="books-container" class="grid grid-cols-1 gap-6 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5">
        <div id="loading" class="text-accent2 col-span-full text-center text-lg">Loading books...</div>
    </div>

    <div id="no-books" class="text-accent2 mt-4 hidden text-center text-lg">No books found.</div>

    <div id="pagination-container" class="mt-6 flex justify-center gap-2"></div>
</div>

@section Scripts {
    <script>
        // caches dom elements
        const elements = {
            booksContainer: document.getElementById('books-container'),
            noBooks: document.getElementById('no-books'),
            loading: document.getElementById('loading'),
            filterSection: document.getElementById('filter-section'),
            filterForm: document.getElementById('filter-form'),
            toggleFilter: document.getElementById('toggle-filter'),
            clearFilters: document.getElementById('clear-filters'),
            categoryTabs: document.getElementById('category-tabs'),
            paginationContainer: document.getElementById('pagination-container')
        };

        let currentPage = 1;
        const pageSize = 5;
        let allBooks = [];
        let originalBooks = [];
        let selectedTab = 'all';

        // selects category tab
        const selectTab = (tabId) => {
            selectedTab = tabId;
            elements.categoryTabs.querySelectorAll('button').forEach(btn => {
                btn.classList.remove('bg-accent4');
                btn.classList.add('bg-accent3');
            });
            const activeTab = document.getElementById(`tab-${tabId}`);
            if (activeTab) {
                activeTab.classList.remove('bg-accent3');
                activeTab.classList.add('bg-accent4');
            }
            currentPage = 1;
            filterAndRenderBooks();
        };

        // fetches books
        const fetchBooks = async () => {
            Toast.fire({
                icon: 'info',
                title: 'Loading books...',
                timer: 1000
            });

            try {
                const response = await fetch('https://localhost:7018/api/Book/getall');
                if (!response.ok) {
                    throw new Error('Failed to load books. Please try again later.');
                }
                originalBooks = await response.json();
                originalBooks = originalBooks.map(book => ({
                    ...book,
                    publicationDate: book.publishedDate
                }));
                allBooks = [...originalBooks];
                elements.loading.classList.add('hidden');
                filterAndRenderBooks();
            } catch (error) {
                console.error('Error fetching books:', error);
                elements.loading.classList.add('hidden');
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to load books'
                });
            }
        };

        // renders books
        const renderBooks = (page) => {
            elements.booksContainer.innerHTML = '';
            elements.noBooks.classList.add('hidden');
            elements.paginationContainer.innerHTML = '';
            elements.loading.classList.add('hidden');

            if (!allBooks.length) {
                elements.noBooks.classList.remove('hidden');
                return;
            }

            const startIndex = (page - 1) * pageSize;
            const endIndex = Math.min(startIndex + pageSize, allBooks.length);
            const paginatedBooks = allBooks.slice(startIndex, endIndex);

            paginatedBooks.forEach(book => {
                const authorNames = book.authorBooks?.length > 0
                    ? book.authorBooks.map(ab => ab.author.name).join(', ')
                    : 'Unknown Author';
                const isOnSale = window.calculateBookPrice(book) < book.price;
                const finalPrice = window.calculateBookPrice(book);

                const bookElement = document.createElement('a');
                bookElement.href = `/Book/Details/${book.id}`;
                bookElement.className = 'block bg-white border border-accent1 rounded p-4 shadow-md transition-shadow hover:shadow-xl';
                bookElement.innerHTML = `
                    ${book.coverImage?.coverImageURL
                        ? `<img src="${book.coverImage.coverImageURL}" alt="${book.title}" class="mb-4 h-64 w-full rounded-md object-cover" />`
                        : `<div class="text-accent3 mb-4 flex h-64 w-full items-center justify-center rounded-md bg-gray-200">No Image</div>`
                    }
                    <h2 class="text-accent3 truncate text-xl font-semibold">${book.title}</h2>
                    <p class="text-accent1 font-medium">${authorNames}</p>
                    <div class="mb-3 flex justify-between">
                        <p class="text-accent3">★ ${book.averageRating.toFixed(1)}</p>
                        <div class="text-right">
                            ${isOnSale
                                ? `<p class="text-accent4 font-medium">Rs. ${window.calculateBookPrice(book).toFixed(2)} <span class="text-accent1 text-sm line-through">Rs. ${book.price.toFixed(2)}</span></p>
                                    <p class="text-accent4 text-sm">${book.discountPercentage}% Off <span class="bg-accent4 rounded px-1 py-1 text-xs text-white">On Sale</span></p>`
                                : `<p class="text-accent4 font-medium">Rs. ${book.price.toFixed(2)}</p>`
                            }
                        </div>
                    </div>
                    <div class="flex gap-2">
                        <button id="wishlist-${book.id}" class="bg-accent3 flex flex-1 items-center justify-center rounded py-2 text-white hover:bg-accent4">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" height="24" width="24">
                                <path stroke-width="3" fill="none" stroke="#fff" d="M21.3 28.3 16 23l-5.3 5.3c-.6.6-1.7.2-1.7-.7V5c0-.6.4-1 1-1h12c.6 0 1 .4 1 1v22.6c0 .9-1.1 1.3-1.7.7"/>
                            </svg>
                        </button>
                        <button id="cart-${book.id}" class="bg-accent3 flex flex-1 items-center justify-center rounded py-2 text-white hover:bg-accent4">
                            <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" stroke="#fff" stroke-width="2">
                                <path fill="none" stroke-linecap="round" d="M11 20.5h.1m5.9 0h.1M3 3h2.14a1 1 0 0 1 1 .85L6.62 7 8 16l11-1 2-8H6.62"/>
                            </svg>
                        </button>
                    </div>
                `;
                elements.booksContainer.appendChild(bookElement);

                 if (isAuthenticated) {
                    // initialize wishlist and cart buttons for authenticated users only
                    initializeWishlistButton(`wishlist-${book.id}`, book.id, book);
                    initializeCartButton(`cart-${book.id}`, book.id, book);
                } else {
                    // add click listeners to prompt login for unauthenticated users
                    elements.booksContainer.querySelector(`#wishlist-${book.id}`).addEventListener('click', (e) => {
                        e.preventDefault();
                        Toast.fire({
                            icon: 'error',
                            title: 'Please log in to manage wishlist'
                        }).then(() => {
                            window.location.href = '/User/Login';
                        });
                    });
                    elements.booksContainer.querySelector(`#cart-${book.id}`).addEventListener('click', (e) => {
                        e.preventDefault();
                        Toast.fire({
                            icon: 'error',
                            title: 'Please log in to manage cart'
                        }).then(() => {
                            window.location.href = '/User/Login';
                        });
                    });
                }
            });

            const totalPages = Math.ceil(allBooks.length / pageSize);
            createPaginationControls('pagination-container', totalPages, page, (newPage) => {
                currentPage = newPage;
                renderBooks(newPage);
            });
        };

        // applies category tab filter
        const applyCategoryFilter = (books) => {
            const now = new Date();
            const threeMonthsAgo = new Date(now.getFullYear(), now.getMonth() - 3, now.getDate());
            const oneMonthAgo = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());

            switch (selectedTab) {
                case 'bestsellers':
                    return books.filter(b => b.categoryBooks.some(cb => cb.category.name.toLowerCase().includes('best')));
                case 'award-winners':
                    return books.filter(b => b.categoryBooks.some(cb => cb.category.name.toLowerCase().includes('award')));
                case 'new-releases':
                    return books.filter(b => {
                        const pubDate = new Date(b.publicationDate);
                        return !isNaN(pubDate) && pubDate > threeMonthsAgo && pubDate <= now;
                    });
                case 'new-arrivals':
                    return books.filter(b => {
                        const createdAt = new Date(b.createdAt);
                        const pubDate = new Date(b.publicationDate);
                        return !isNaN(createdAt) && createdAt > oneMonthAgo && !isNaN(pubDate) && pubDate > threeMonthsAgo && pubDate <= now;
                    });
                case 'coming-soon':
                    return books.filter(b => {
                        const pubDate = new Date(b.publicationDate);
                        return !isNaN(pubDate) && pubDate > now;
                    });
                case 'deals':
                    return books.filter(b => window.calculateBookPrice(b) < b.price);
                case 'all':
                default:
                    return books;
            }
        };

        // filters and renders books
        const filterAndRenderBooks = () => {
            const params = getBookFilterParams();
            if (!validateBookFilterParams(params)) return;

            // adjust params for discounted price
            if (params.minPrice !== null) params.minPrice = Math.min(params.minPrice, window.calculateBookPrice({ price: params.minPrice }));
            if (params.maxPrice !== null) params.maxPrice = Math.max(params.maxPrice, window.calculateBookPrice({ price: params.maxPrice }));

            // apply category filter first
            let filteredBooks = applyCategoryFilter(originalBooks);
            allBooks = filterBooks(filteredBooks, params);
            renderBooks(currentPage);
        };

        // initializes page
        document.addEventListener('DOMContentLoaded', async () => {
            elements.toggleFilter.addEventListener('click', () => {
                elements.filterSection.classList.toggle('hidden');
            });

            elements.filterForm.addEventListener('submit', (e) => {
                e.preventDefault();
                currentPage = 1;
                filterAndRenderBooks();
            });

            elements.clearFilters.addEventListener('click', () => {
                clearBookFilters();
                currentPage = 1;
                filterAndRenderBooks();
            });

            ['all', 'bestsellers', 'award-winners', 'new-releases', 'new-arrivals', 'coming-soon', 'deals'].forEach(tabId => {
                document.getElementById(`tab-${tabId}`).addEventListener('click', () => {
                    selectTab(tabId);
                });
            });

            await fetchBookDropdownOptions();
            await fetchBooks();
            selectTab('all');
        });
    </script>
}