@page
@model Whisperwood.Pages.Book.BrowseByCategoryModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Browse Books by Category";
}

<div class="px-4 py-8">
    <div class="mb-4 flex justify-between">
        <h1 class="text-accent3 text-center text-4xl font-bold">Browse Books by Category</h1>
        <button id="toggle-filter" class="bg-accent3 rounded px-2 text-white hover:bg-accent4">Add Filter</button>
    </div>

    <div id="error-message" class="mb-4 hidden text-center text-red-600"></div>

    <div id="filter-section" class="bg-primary border-accent3 mb-8 hidden rounded-lg border p-6 shadow-md">
        <form id="filter-form" class="grid grid-cols-1 gap-4 md:grid-cols-3 lg:grid-cols-4">
            <div>
                <label for="search" class="text-accent3 mb-1 block font-medium">Search</label>
                <input type="text" id="search" name="search" class="border-accent1 w-full rounded border p-2" placeholder="Search by title, ISBN, or Synopsis">
            </div>
            <div>
                <label for="minPrice" class="text-accent3 mb-1 block font-medium">Price Range</label>
                <div class="flex gap-2">
                    <input type="number" id="minPrice" name="minPrice" class="border-accent1 w-1/2 rounded border p-2" placeholder="Min">
                    <input type="number" id="maxPrice" name="maxPrice" class="border-accent1 w-1/2 rounded border p-2" placeholder="Max">
                </div>
            </div>
            <div>
                <label for="minRating" class="text-accent3 mb-1 block font-medium">Minimum Rating</label>
                <input type="number" id="minRating" name="minRating" min="0" max="5" step="0.1" class="border-accent1 w-full rounded border p-2" placeholder="0-5">
            </div>
            <div>
                <label for="language" class="text-accent3 mb-1 block font-medium">Language</label>
                <input type="text" id="language" name="language" class="border-accent1 w-full rounded border p-2" placeholder="e.g., English">
            </div>
            <div>
                <label for="authors" class="text-accent3 mb-1 block font-medium">Authors</label>
                <select id="authors" name="authorIds" multiple class="border-accent1 w-full rounded border p-2">
                </select>
            </div>
            <div>
                <label for="genres" class="text-accent3 mb-1 block font-medium">Genres</label>
                <select id="genres" name="genreIds" multiple class="border-accent1 w-full rounded border p-2">
                </select>
            </div>
            <div>
                <label for="publishers" class="text-accent3 mb-1 block font-medium">Publishers</label>
                <select id="publishers" name="publisherIds" multiple class="border-accent1 w-full rounded border p-2">
                </select>
            </div>
            <div>
                <label for="format" class="text-accent3 mb-1 block font-medium">Format</label>
                <select id="format" name="formats" multiple class="border-accent1 w-full rounded border p-2">
                    <option value="0">Paperback</option>
                    <option value="1">Hardcover</option>
                    <option value="2">Signed Edition</option>
                    <option value="3">Limited Edition</option>
                    <option value="4">First Edition</option>
                    <option value="5">Collectors Edition</option>
                    <option value="6">Authors Edition</option>
                    <option value="7">Deluxe Edition</option>
                    <option value="8">Ebook</option>
                    <option value="9">Audiobook</option>
                </select>
            </div>
            <div>
                <label for="isAvailable" class="text-accent3 mb-1 block font-medium">Availability</label>
                <select id="isAvailable" name="isAvailable" class="border-accent1 w-full rounded border p-2">
                    <option value="">All</option>
                    <option value="true">In Stock</option>
                    <option value="false">Out of Stock</option>
                </select>
            </div>
            <div>
                <label for="sortBy" class="text-accent3 mb-1 block font-medium">Sort By</label>
                <select id="sortBy" name="sortBy" class="border-accent1 w-full rounded border p-2">
                    <option value="0">Title</option>
                    <option value="1">Publication Date</option>
                    <option value="2">Price</option>
                    <option value="3">Popularity</option>
                </select>
            </div>
            <div>
                <label for="sortOrder" class="text-accent3 mb-1 block font-medium">Sort Order</label>
                <select id="sortOrder" name="sortOrder" class="border-accent1 w-full rounded border p-2">
                    <option value="0">Ascending</option>
                    <option value="1">Descending</option>
                </select>
            </div>
            <div class="flex items-end justify-end gap-2">
                <button type="submit" class="bg-accent3 rounded px-4 py-2 text-white hover:bg-accent4">Apply Filters</button>
                <button type="button" id="clear-filters" class="rounded bg-gray-500 px-4 py-2 text-white hover:bg-gray-600">Clear Filters</button>
            </div>
        </form>
    </div>

    <div id="category-tabs" class="mb-6 flex flex-wrap gap-2">
        <button id="tab-all" class="bg-accent3 rounded px-4 py-2 text-white hover:bg-accent4 active:bg-accent4">All Books</button>
        <button id="tab-bestsellers" class="bg-accent3 rounded px-4 py-2 text-white hover:bg-accent4 active:bg-accent4">Bestsellers</button>
        <button id="tab-award-winners" class="bg-accent3 rounded px-4 py-2 text-white hover:bg-accent4 active:bg-accent4">Award Winners</button>
        <button id="tab-new-releases" class="bg-accent3 rounded px-4 py-2 text-white hover:bg-accent4 active:bg-accent4">New Releases</button>
        <button id="tab-new-arrivals" class="bg-accent3 rounded px-4 py-2 text-white hover:bg-accent4 active:bg-accent4">New Arrivals</button>
        <button id="tab-coming-soon" class="bg-accent3 rounded px-4 py-2 text-white hover:bg-accent4 active:bg-accent4">Coming Soon</button>
        <button id="tab-deals" class="bg-accent3 rounded px-4 py-2 text-white hover:bg-accent4 active:bg-accent4">Deals</button>
    </div>

    <div id="books-container" class="grid grid-cols-1 gap-6 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5">
        <div id="loading" class="text-accent2 col-span-full text-center text-lg">Loading books...</div>
    </div>

    <div id="no-books" class="text-accent2 mt-4 hidden text-center text-lg">No books found.</div>

    <div id="pagination-container" class="mt-6 flex justify-center gap-2"></div>
</div>

@section Scripts {
    <script>
        let currentPage = 1;
        const pageSize = 10;
        let allBooks = [];
        let originalBooks = [];
        let selectedTab = 'all';

        function selectTab(tabId) {
            selectedTab = tabId;
            document.querySelectorAll('#category-tabs button').forEach(btn => {
                btn.classList.remove('active:bg-accent4', 'bg-accent4');
                btn.classList.add('bg-accent3');
            });
            const activeTab = document.getElementById(`tab-${tabId}`);
            if (activeTab) {
                activeTab.classList.remove('bg-accent3');
                activeTab.classList.add('bg-accent4');
            }
            currentPage = 1;
            filterAndRenderBooks();
        }

        function isBookOnSale(book) {
            const now = new Date();
            const startDate = book.discountStartDate ? new Date(book.discountStartDate) : null;
            const endDate = book.discountEndDate ? new Date(book.discountEndDate) : null;
            const isValidDiscount = typeof book.discountPercentage === 'number' && book.discountPercentage > 0;
            const isSaleActive = book.isOnSale && isValidDiscount &&
                (!startDate || (!isNaN(startDate) && startDate <= now)) &&
                (!endDate || (!isNaN(endDate) && endDate >= now));
            return isSaleActive;
        }

        function calculateDiscountedPrice(book) {
            if (isBookOnSale(book)) {
                const discount = typeof book.discountPercentage === 'number' ? book.discountPercentage : 0;
                return book.price * (1 - discount / 100);
            }
            return book.price;
        }

        function renderBooks(page, books) {
            const booksContainer = document.getElementById('books-container');
            const noBooksElement = document.getElementById('no-books');
            const paginationContainer = document.getElementById('pagination-container');
            const loadingElement = document.getElementById('loading');

            if (loadingElement) {
                loadingElement.classList.add('hidden');
            }
            booksContainer.innerHTML = '';
            if (allBooks.length === 0) {
                noBooksElement.classList.remove('hidden');
                paginationContainer.innerHTML = '';
                return;
            }

            noBooksElement.classList.add('hidden');
            const startIndex = (page - 1) * pageSize;
            const endIndex = Math.min(startIndex + pageSize, allBooks.length);
            const paginatedBooks = allBooks.slice(startIndex, endIndex);

            if (paginatedBooks.length > 0) {
                paginatedBooks.forEach(book => {
                    const authorNames = book.authorBooks && book.authorBooks.length > 0
                        ? book.authorBooks.map(ab => ab.author.name).join(', ')
                        : 'Unknown Author';
                    const isOnSale = isBookOnSale(book);
                    const finalPrice = calculateDiscountedPrice(book);

                    const bookElement = document.createElement('a');
                    bookElement.href = `/Book/Details/${book.id}`;
                    bookElement.className = 'block bg-primary border-accent1 rounded-lg border-[2px] p-4 shadow-md transition-shadow hover:shadow-xl';
                    bookElement.innerHTML = `
                        ${book.coverImage && book.coverImage.coverImageURL
                            ? `<img src="${book.coverImage.coverImageURL}" alt="${book.title}" class="mb-4 h-64 w-full rounded-md object-cover" />`
                            : `<div class="text-accent3 mb-4 h-64 w-full rounded-md flex items-center justify-center">No Image</div>`
                        }
                        <h2 class="text-accent3 truncate text-xl font-semibold">${book.title}</h2>
                        <p class="text-accent1 font-medium">${authorNames}</p>
                        <div class="mb-3 flex justify-between">
                            <p class="text-accent3">★ ${book.averageRating.toFixed(1)}</p>
                            <div class="text-right">
                                ${isOnSale
                                    ? `<p class="text-red-500 font-medium">Rs. ${window.calculateBookPrice(book).toFixed(2)} <span class="line-through text-accent1 text-sm">Rs. ${book.price.toFixed(2)}</span></p>
                                       <p class="text-red-500 text-sm">${book.discountPercentage}% Off <span class="bg-red-500 text-white text-xs px-1 rounded">On Sale</span></p>`
                                    : `<p class="text-accent1 font-medium">Rs. ${book.price.toFixed(2)}</p>`
                                }
                            </div>
                        </div>
                        <div class="flex gap-2">
                            <button id="wishlist-${book.id}" class="bg-accent3 flex flex-1 items-center justify-center rounded py-2 text-white hover:bg-accent4"></button>
                            <a href="/Review/BookReview?BookId=${book.id}" class="bg-accent3 flex flex-1 items-center justify-center rounded py-2 text-white hover:bg-accent4">
                                <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#fff" stroke-width="2" stroke-linejoin="round" d="M12 4 9.22 9.27 3 10.11l4.5 4.1L6.44 20 12 17.27 17.56 20l-1.06-5.79 4.5-4.1-6.22-.84z"/></svg>
                            </a>
                            <button id="cart-${book.id}" class="bg-accent3 flex flex-1 items-center justify-center rounded py-2 text-white hover:bg-accent4"></button>
                        </div>
                    `;
                    booksContainer.appendChild(bookElement);

                    initializeWishlistButton(`wishlist-${book.id}`, book.id);
                    window.initializeCartButton(`cart-${book.id}`, book.id, book);
                });

                const totalPages = Math.ceil(allBooks.length / pageSize);
                createPaginationControls('pagination-container', totalPages, page, (newPage) => {
                    currentPage = newPage;
                    renderBooks(newPage, filterBooks());
                });
            } else {
                noBooksElement.classList.remove('hidden');
                paginationContainer.innerHTML = '';
            }
        }

        async function fetchBooks() {
            const loadingElement = document.getElementById('loading');
            const errorMessageElement = document.getElementById('error-message');

            if (loadingElement) {
                loadingElement.classList.remove('hidden');
            }
            errorMessageElement.classList.add('hidden');

            try {
                const response = await fetch('https://localhost:7018/api/Book/getall');
                if (!response.ok) {
                    throw new Error('Failed to load books. Please try again later.');
                }

                originalBooks = await response.json();
                allBooks = [...originalBooks];
                if (loadingElement) {
                    loadingElement.classList.add('hidden');
                }
                filterAndRenderBooks();
            } catch (error) {
                console.error('Error fetching books:', error);
                if (loadingElement) {
                    loadingElement.classList.add('hidden');
                }
                errorMessageElement.textContent = error.message;
                errorMessageElement.classList.remove('hidden');
            }
        }

        async function fetchDropdownOptions() {
            try {
                // Fetch Authors
                const authorResponse = await fetch('https://localhost:7018/api/Author/getall');
                if (!authorResponse.ok) throw new Error('Failed to load authors.');
                const authors = await authorResponse.json();
                const authorSelect = document.getElementById('authors');
                authorSelect.innerHTML = authors.map(author => `<option value="${author.id}">$(author.name}</option>`).join('');

                // Fetch Genres
                const genreResponse = await fetch('https://localhost:7018/api/Genre/getall');
                if (!genreResponse.ok) throw new Error('Failed to load genres.');
                const genres = await genreResponse.json();
                const genreSelect = document.getElementById('genres');
                genreSelect.innerHTML = genres.map(genre => `<option value="${genre.id}">$(genre.name}</option>`).join('');

                // Fetch Publishers
                const publisherResponse = await fetch('https://localhost:7018/api/Publisher/getall');
                if (!publisherResponse.ok) throw new Error('Failed to load publishers.');
                const publishers = await publisherResponse.json();
                const publisherSelect = document.getElementById('publishers');
                publisherSelect.innerHTML = publishers.map(publisher => `<option value="${publisher.id}">${publisher.name}</option>`).join('');
            } catch (error) {
                console.error('Error fetching dropdown options:', error);
                document.getElementById('error-message').textContent = error.message;
                document.getElementById('error-message').classList.remove('hidden');
            }
        }

        function getFilterParams() {
            return {
                search: document.getElementById('search').value.toLowerCase(),
                minPrice: parseFloat(document.getElementById('minPrice').value) || null,
                maxPrice: parseFloat(document.getElementById('maxPrice').value) || null,
                minRating: parseFloat(document.getElementById('minRating').value) || null,
                language: document.getElementById('language').value.toLowerCase(),
                authorIds: Array.from(document.getElementById('authors').selectedOptions).map(option => option.value),
                genreIds: Array.from(document.getElementById('genres').selectedOptions).map(option => option.value),
                publisherIds: Array.from(document.getElementById('publishers').selectedOptions).map(option => option.value),
                formats: Array.from(document.getElementById('format').selectedOptions).map(option => parseInt(option.value)),
                isAvailable: document.getElementById('isAvailable').value,
                sortBy: parseInt(document.getElementById('sortBy').value),
                sortOrder: parseInt(document.getElementById('sortOrder').value)
            };
        }

        function filterBooks() {
            const params = getFilterParams();
            let filtered = [...originalBooks];

            const now = new Date();
            const threeMonthsAgo = new Date(now.getFullYear(), now.getMonth() - 3, now.getDate());
            const oneMonthAgo = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());

            switch (selectedTab) {
                case 'bestsellers':
                    filtered = filtered.filter(b => b.categoryBooks.some(cb => cb.category.name.toLowerCase().includes('best')));
                    break;
                case 'award-winners':
                    filtered = filtered.filter(b => b.categoryBooks.some(cb => cb.category.name.toLowerCase().includes('award')));
                    break;
                case 'new-releases':
                    filtered = filtered.filter(b => {
                        const pubDate = new Date(b.publishedDate);
                        return !isNaN(pubDate) && pubDate > threeMonthsAgo && pubDate <= now;
                    });
                    break;
                case 'new-arrivals':
                    filtered = filtered.filter(b => {
                        const createdAt = new Date(b.createdAt);
                        return !isNaN(createdAt) && createdAt > oneMonthAgo;
                    });
                    break;
                case 'coming-soon':
                    filtered = filtered.filter(b => {
                        const pubDate = new Date(b.publishedDate);
                        return !isNaN(pubDate) && pubDate > now;
                    });
                    break;
                case 'deals':
                    filtered = filtered.filter(b => isBookOnSale(b));
                    break;
                case 'all':
                default:
                    // No tab-specific filter
                    break;
            }

            // Apply filter-section filters
            if (params.search) {
                filtered = filtered.filter(b =>
                    b.title.toLowerCase().includes(params.search) ||
                    b.isbn.toLowerCase().includes(params.search) ||
                    (b.synopsis || '').toLowerCase().includes(params.search)
                );
            }

            if (params.minPrice !== null) {
                filtered = filtered.filter(b => calculateDiscountedPrice(b) >= params.minPrice);
            }
            if (params.maxPrice !== null) {
                filtered = filtered.filter(b => calculateDiscountedPrice(b) <= params.maxPrice);
            }

            if (params.minRating !== null) {
                filtered = filtered.filter(b => b.averageRating >= params.minRating);
            }

            if (params.language) {
                filtered = filtered.filter(b => (b.language || '').toLowerCase().includes(params.language));
            }

            if (params.authorIds.length > 0) {
                filtered = filtered.filter(b =>
                    b.authorBooks.some(ab => params.authorIds.includes(ab.author.id.toString()))
                );
            }

            if (params.genreIds.length > 0) {
                filtered = filtered.filter(b =>
                    b.genreBooks.some(gb => params.genreIds.includes(gb.genre.id.toString()))
                );
            }

            if (params.publisherIds.length > 0) {
                filtered = filtered.filter(b =>
                    b.publisherBooks.some(pb => params.publisherIds.includes(pb.publisher.id.toString()))
                );
            }

            if (params.formats.length > 0) {
                filtered = filtered.filter(b => params.formats.includes(b.format));
            }

            if (params.isAvailable !== '') {
                const isAvailable = params.isAvailable === 'true';
                filtered = filtered.filter(b => (b.stock > 0 && b.availabilityStatus) === isAvailable);
            }

            // Sort
            filtered.sort((a, b) => {
                let fieldA, fieldB;
                switch (params.sortBy) {
                    case 0: // Title
                        fieldA = a.title.toLowerCase();
                        fieldB = b.title.toLowerCase();
                        break;
                    case 1: // Publication Date
                        fieldA = new Date(a.publishedDate);
                        fieldB = new Date(b.publishedDate);
                        break;
                    case 2: // Price
                        fieldA = calculateDiscountedPrice(a);
                        fieldB = calculateDiscountedPrice(b);
                        break;
                    case 3: // Popularity
                        fieldA = a.salesCount || 0;
                        fieldB = b.salesCount || 0;
                        break;
                }
                const comparison = fieldA > fieldB ? 1 : fieldA < fieldB ? -1 : 0;
                return params.sortOrder === 0 ? comparison : -comparison;
            });

            return filtered;
        }

        function filterAndRenderBooks() {
            allBooks = filterBooks();
            renderBooks(currentPage, allBooks);
        }

        function clearFilters() {
            document.getElementById('search').value = '';
            document.getElementById('minPrice').value = '';
            document.getElementById('maxPrice').value = '';
            document.getElementById('minRating').value = '';
            document.getElementById('language').value = '';
            document.getElementById('authors').selectedIndex = -1;
            document.getElementById('genres').selectedIndex = -1;
            document.getElementById('publishers').selectedIndex = -1;
            document.getElementById('format').selectedIndex = -1;
            document.getElementById('isAvailable').value = '';
            document.getElementById('sortBy').value = '0';
            document.getElementById('sortOrder').value = '0';
        }

        document.addEventListener('DOMContentLoaded', async () => {
            const filterForm = document.getElementById('filter-form');
            const clearFiltersButton = document.getElementById('clear-filters');
            const toggleFilterButton = document.getElementById('toggle-filter');
            const filterSection = document.getElementById('filter-section');

            filterForm.addEventListener('submit', (e) => {
                e.preventDefault();
                currentPage = 1;
                filterAndRenderBooks();
            });

            clearFiltersButton.addEventListener('click', () => {
                clearFilters();
                currentPage = 1;
                filterAndRenderBooks();
            });

            toggleFilterButton.addEventListener('click', () => {
                filterSection.classList.toggle('hidden');
            });

            ['all', 'bestsellers', 'award-winners', 'new-releases', 'new-arrivals', 'coming-soon', 'deals'].forEach(tabId => {
                document.getElementById(`tab-${tabId}`).addEventListener('click', () => {
                    selectTab(tabId);
                });
            });

            await fetchDropdownOptions();
            await fetchBooks();
            selectTab('all');
        });
    </script>
}