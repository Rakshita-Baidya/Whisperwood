@page
@model Whisperwood.Pages.Book.BrowseModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Browse Books";
}

<div class="px-4 py-8">
    <h1 class="text-accent3 mb-6 text-center text-4xl font-bold">Browse Books</h1>

    <div id="error-message" class="mb-4 hidden text-center text-red-600"></div>

    <!-- Filter Form -->
    <form id="filter-form" class="mb-6 bg-primary border-accent1 rounded-lg border-[2px] p-4 shadow-md">
        <div class="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3">
            <!-- Search Term -->
            <div>
                <label for="search-term" class="text-accent2 block mb-1">Search</label>
                <input type="text" id="search-term" placeholder="Title, ISBN, or synopsis" class="border-accent2 w-full rounded border p-2 text-gray-800" />
            </div>

            <!-- Genres -->
            <div>
                <label for="genres" class="text-accent2 block mb-1">Genres</label>
                <select id="genres" multiple class="border-accent2 w-full rounded border p-2 text-gray-800">
                    <!-- Populated dynamically -->
                </select>
            </div>

            <!-- Price Range -->
            <div>
                <label class="text-accent2 block mb-1">Price Range</label>
                <div class="flex gap-2">
                    <input type="number" id="min-price" placeholder="Min" step="0.01" min="0" class="border-accent2 w-full rounded border p-2 text-gray-800" />
                    <input type="number" id="max-price" placeholder="Max" step="0.01" min="0" class="border-accent2 w-full rounded border p-2 text-gray-800" />
                </div>
            </div>

            <!-- Minimum Rating -->
            <div>
                <label for="min-rating" class="text-accent2 block mb-1">Minimum Rating</label>
                <select id="min-rating" class="border-accent2 w-full rounded border p-2 text-gray-800">
                    <option value="">Any</option>
                    <option value="1">1★</option>
                    <option value="2">2★</option>
                    <option value="3">3★</option>
                    <option value="4">4★</option>
                    <option value="5">5★</option>
                </select>
            </div>

            <!-- Availability -->
            <div class="flex items-center">
                <input type="checkbox" id="is-available" class="mr-2">
                <label for="is-available" class="text-accent2">Available Only</label>
            </div>

            <!-- Sort By -->
            <div>
                <label for="sort-by" class="text-accent2 block mb-1">Sort By</label>
                <select id="sort-by" class="border-accent2 w-full rounded border p-2 text-gray-800">
                    <option value="">None</option>
                    <option value="Title">Title</option>
                    <option value="PublicationDate">Publication Date</option>
                    <option value="Price">Price</option>
                    <option value="Popularity">Popularity</option>
                </select>
            </div>

            <!-- Sort Order -->
            <div>
                <label for="sort-order" class="text-accent2 block mb-1">Sort Order</label>
                <select id="sort-order" class="border-accent2 w-full rounded border p-2 text-gray-800">
                    <option value="Ascending">Ascending</option>
                    <option value="Descending">Descending</option>
                </select>
            </div>
        </div>

        <div class="mt-4 flex justify-end gap-2">
            <button type="button" id="clear-filters" class="bg-gray-500 rounded px-3 py-1 text-white hover:bg-gray-600">Clear Filters</button>
            <button type="submit" class="bg-accent3 rounded px-3 py-1 text-white hover:bg-accent2">Apply Filters</button>
        </div>
    </form>

    <div id="books-container" class="grid grid-cols-1 gap-6 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
        <!-- Books will be injected here by JavaScript -->
        <div id="loading" class="text-accent2 col-span-full text-center text-lg">Loading books...</div>
    </div>

    <div id="no-books" class="text-accent2 mt-4 hidden text-center text-lg">No books found.</div>

    <div id="pagination-container" class="mt-6 flex justify-center gap-2"></div>
</div>

@section Scripts {
    <script src="/js/wishlist.js"></script>
    <script src="/js/cart.js"></script>
    <script src="/js/pagination.js"></script>
    <script>
        let currentPage = 1;
        const pageSize = 8;
        let allBooks = []; // Store all books fetched from API

        function renderBooks(page) {
            const booksContainer = document.getElementById('books-container');
            const noBooksElement = document.getElementById('no-books');
            const paginationContainer = document.getElementById('pagination-container');

            booksContainer.innerHTML = ''; // Clear previous books

            if (allBooks.length === 0) {
                noBooksElement.classList.remove('hidden');
                paginationContainer.innerHTML = '';
                return;
            }

            // Calculate start and end indices for the current page
            const startIndex = (page - 1) * pageSize;
            const endIndex = Math.min(startIndex + pageSize, allBooks.length);
            const paginatedBooks = allBooks.slice(startIndex, endIndex);

            if (paginatedBooks.length > 0) {
                paginatedBooks.forEach(book => {
                    const authorNames = book.authorBooks && book.authorBooks.length > 0
                        ? book.authorBooks.map(ab => ab.author.name).join(', ')
                        : 'Unknown Author';

                    const bookElement = document.createElement('a');
                    bookElement.href = `/Book/Details/${book.id}`;
                    bookElement.className = 'block bg-primary border-accent1 rounded-lg border-[2px] p-4 shadow-md transition-shadow hover:shadow-xl';
                    bookElement.innerHTML = `
                        ${book.coverImage && book.coverImage.coverImageURL
                            ? `<img src="${book.coverImage.coverImageURL}" alt="${book.title}" class="mb-4 h-64 w-full rounded-md object-cover" />`
                            : `<div class="text-accent3 mb-4 h-64 w-full">No Image</div>`
                        }
                        <h2 class="text-accent3 text-xl font-semibold">${book.title}</h2>
                        <p class="text-accent1 font-medium">${authorNames}</p>
                        <div class="mb-3 flex justify-between">
                            <p class="text-accent3"> ★ ${book.averageRating} </p>
                            <p class="text-accent1 font-medium">Rs. ${book.price.toFixed(2)}</p>
                        </div>
                        <div class="flex justify-between gap-2">
                            <button id="wishlist-${book.id}" class="bg-accent3 rounded px-3 py-1 text-white hover:bg-accent2">Wishlist</button>
                            <button id="review-${book.id}" class="bg-accent3 rounded px-3 py-1 text-white hover:bg-accent2">Review</button>
                            <button id="cart-${book.id}" class="bg-accent3 rounded px-3 py-1 text-white hover:bg-accent2">Cart</button>
                        </div>
                    `;
                    booksContainer.appendChild(bookElement);

                    // Initialize wishlist and cart buttons
                    initializeWishlistButton(`wishlist-${book.id}`, book.id);
                    initializeCartButton(`cart-${book.id}`, book.id, book.stock);
                });

                // Render pagination controls
                const totalPages = Math.ceil(allBooks.length / pageSize);
                createPaginationControls('pagination-container', totalPages, page, (newPage) => {
                    currentPage = newPage;
                    renderBooks(newPage);
                });
            } else {
                noBooksElement.classList.remove('hidden');
                paginationContainer.innerHTML = '';
            }
        }

        async function fetchBooks() {
            const loadingElement = document.getElementById('loading');
            const errorMessageElement = document.getElementById('error-message');

            try {
                const response = await fetch('https://localhost:7018/api/Book/getall');
                if (!response.ok) {
                    throw new Error('Failed to load books. Please try again later.');
                }

                allBooks = await response.json();
                loadingElement.classList.add('hidden');
                renderBooks(currentPage);
            } catch (error) {
                loadingElement.classList.add('hidden');
                errorMessageElement.textContent = error.message;
                errorMessageElement.classList.remove('hidden');
            }
        }

        // Call fetchBooks when the page loads
        document.addEventListener('DOMContentLoaded', fetchBooks);
    </script>
}