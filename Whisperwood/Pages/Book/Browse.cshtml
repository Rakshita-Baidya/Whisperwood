@page
@model Whisperwood.Pages.Book.BrowseModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Browse Books";
}

<div class="px-4 py-8">
    
    <div class="mb-4 flex justify-between">
        <h1 class="text-accent3 text-center text-4xl font-bold">Browse Books</h1>
        <button id="toggle-filter" class="bg-accent3 rounded px-2 text-white hover:bg-accent4">Add Filter</button>
    </div>

    <div id="error-message" class="mb-4 hidden text-center text-red-600"></div>


    <div id="filter-section" class="bg-primary border-accent3 mb-8 hidden rounded-lg border p-6 shadow-md">
        <form id="filter-form" class="grid grid-cols-1 gap-4 md:grid-cols-3 lg:grid-cols-4">
            <div>
                <label for="search" class="text-accent3 mb-1 block font-medium">Search</label>
                <input type="text" id="search" name="search" class="border-accent1 w-full rounded border p-2" placeholder="Search by title, ISBN, or Synopsis">
            </div>

            <div>
                <label for="minPrice" class="text-accent3 mb-1 block font-medium">Price Range</label>
                <div class="flex gap-2">
                    <input type="number" id="minPrice" name="minPrice" class="border-accent1 w-1/2 rounded border p-2" placeholder="Min">
                    <input type="number" id="maxPrice" name="maxPrice" class="border-accent1 w-1/2 rounded border p-2" placeholder="Max">
                </div>
            </div>
            <div>
                <label for="minRating" class="text-accent3 mb-1 block font-medium">Minimum Rating</label>
                <input type="number" id="minRating" name="minRating" min="0" max="5" step="0.1" class="border-accent1 w-full rounded border p-2" placeholder="0-5">
            </div>
            <div>
                <label for="language" class="text-accent3 mb-1 block font-medium">Language</label>
                <input type="text" id="language" name="language" class="border-accent1 w-full rounded border p-2" placeholder="e.g., English">
            </div>
            <div>
                <label for="authors" class="text-accent3 mb-1 block font-medium">Authors</label>
                <select id="authors" name="authorIds" multiple class="border-accent1 w-full rounded border p-2">
                </select>
            </div>
            <div>
                <label for="genres" class="text-accent3 mb-1 block font-medium">Genres</label>
                <select id="genres" name="genreIds" multiple class="border-accent1 w-full rounded border p-2">
                </select>
            </div>
            <div>
                <label for="publishers" class="text-accent3 mb-1 block font-medium">Publishers</label>
                <select id="publishers" name="publisherIds" multiple class="border-accent1 w-full rounded border p-2">
                </select>
            </div>
            <div>
                <label for="format" class="text-accent3 mb-1 block font-medium">Format</label>
                <select id="format" name="formats" multiple class="border-accent1 w-full rounded border p-2">
                    <option value="0">Paperback</option>
                    <option value="1">Hardcover</option>
                    <option value="2">Signed Edition</option>
                    <option value="3">Limited Edition</option>
                    <option value="4">First Edition</option>
                    <option value="5">Collectors Edition</option>
                    <option value="6">Authors Edition</option>
                    <option value="7">Deluxe Edition</option>
                    <option value="8">Ebook</option>
                    <option value="9">Audiobook</option>
                </select>
            </div>
            <div>
                <label for="isAvailable" class="text-accent3 mb-1 block font-medium">Availability</label>
                <select id="isAvailable" name="isAvailable" class="border-accent1 w-full rounded border p-2">
                    <option value="">All</option>
                    <option value="true">In Stock</option>
                    <option value="false">Out of Stock</option>
                </select>
            </div>
            <div>
                <label for="sortBy" class="text-accent3 mb-1 block font-medium">Sort By</label>
                <select id="sortBy" name="sortBy" class="border-accent1 w-full rounded border p-2">
                    <option value="0">Title</option>
                    <option value="1">Publication Date</option>
                    <option value="2">Price</option>
                    <option value="3">Popularity</option>
                </select>
            </div>
            <div>
                <label for="sortOrder" class="text-accent3 mb-1 block font-medium">Sort Order</label>
                <select id="sortOrder" name="sortOrder" class="border-accent1 w-full rounded border p-2">
                    <option value="0">Ascending</option>
                    <option value="1">Descending</option>
                </select>
            </div>
            <div class="flex items-end justify-end gap-2">
                <button type="submit" class="bg-accent3 rounded px-4 py-2 text-white hover:bg-accent4">Apply Filters</button>
                <button type="button" id="clear-filters" class="rounded bg-gray-500 px-4 py-2 text-white hover:bg-gray-600">Clear Filters</button>
            </div>
        </form>
    </div>

    <div id="books-container" class="grid grid-cols-1 gap-6 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5">
        @* book loading from js  *@
        <div id="loading" class="text-accent2 col-span-full text-center text-lg">Loading books...</div>
    </div>

    <div id="no-books" class="text-accent2 mt-4 hidden text-center text-lg">No books found.</div>

    <div id="pagination-container" class="mt-6 flex justify-center gap-2"></div>
</div>

@section Scripts {
    <script>
        let currentPage = 1;
        const pageSize = 8;
        let allBooks = [];
        let originalBooks = [];

        function renderBooks(page) {
            const booksContainer = document.getElementById('books-container');
            const noBooksElement = document.getElementById('no-books');
            const paginationContainer = document.getElementById('pagination-container');

            booksContainer.innerHTML = '';

            if (allBooks.length === 0) {
                noBooksElement.classList.remove('hidden');
                paginationContainer.innerHTML = '';
                return;
            }

            const startIndex = (page - 1) * pageSize;
            const endIndex = Math.min(startIndex + pageSize, allBooks.length);
            const paginatedBooks = allBooks.slice(startIndex, endIndex);

            if (paginatedBooks.length > 0) {
                paginatedBooks.forEach(book => {
                    const authorNames = book.authorBooks && book.authorBooks.length > 0
                        ? book.authorBooks.map(ab => ab.author.name).join(', ')
                        : 'Unknown Author';

                    const bookElement = document.createElement('a');
                    bookElement.href = `/Book/Details/${book.id}`;
                    bookElement.className = 'block bg-primary border-accent1 rounded-lg border-[2px] p-4 shadow-md transition-shadow hover:shadow-xl';
                    bookElement.innerHTML = `
                        ${book.coverImage && book.coverImage.coverImageURL
                            ? `<img src="${book.coverImage.coverImageURL}" alt="${book.title}" class="mb-4 h-64 w-full rounded-md object-cover" />`
                            : `<div class="text-accent3 mb-4 h-64 w-full">No Image</div>`
                        }
                        <h2 class="text-accent3 truncate text-xl font-semibold">${book.title}</h2>
                        <p class="text-accent1 font-medium">${authorNames}</p>
                        <div class="mb-3 flex justify-between">
                            <p class="text-accent3"> ★ ${book.averageRating} </p>
                            <p class="text-accent1 font-medium">Rs. ${book.price.toFixed(2)}</p>
                        </div>
                        <div class="flex gap-2">
                            <button id="wishlist-${book.id}" class="bg-accent3 flex flex-1 items-center justify-center rounded hover:bg-accent4"></button>
                            <a href="/Review/BookReview?BookId=${book.id}" class="bg-accent3 flex flex-1 items-center justify-center rounded text-white hover:bg-accent4">
                                <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#fff" stroke-width="2" stroke-linejoin="round" d="M12 4 9.22 9.27 3 10.11l4.5 4.1L6.44 20 12 17.27 17.56 20l-1.06-5.79 4.5-4.1-6.22-.84z"/></svg>
                            </a>
                            <button id="cart-${book.id}" class="bg-accent3 flex flex-1 items-center justify-center rounded py-2 text-white hover:bg-accent4"></button>
                        </div>
                    `;
                    booksContainer.appendChild(bookElement);

                    initializeWishlistButton(`wishlist-${book.id}`, book.id);
                    initializeCartButton(`cart-${book.id}`, book.id, book.stock);
                });

                const totalPages = Math.ceil(allBooks.length / pageSize);
                createPaginationControls('pagination-container', totalPages, page, (newPage) => {
                    currentPage = newPage;
                    renderBooks(newPage);
                });
            } else {
                noBooksElement.classList.remove('hidden');
                paginationContainer.innerHTML = '';
            }
        }

        async function fetchBooks() {
            const loadingElement = document.getElementById('loading');
            const errorMessageElement = document.getElementById('error-message');

            loadingElement.classList.remove('hidden');
            errorMessageElement.classList.add('hidden');

            try {
                const response = await fetch('https://localhost:7018/api/Book/getall');
                if (!response.ok) {
                    throw new Error('Failed to load books. Please try again later.');
                }

                originalBooks = await response.json();
                allBooks = [...originalBooks];
                loadingElement.classList.add('hidden');
                renderBooks(currentPage);
            } catch (error) {
                console.error('Error fetching books:', error);
                loadingElement.classList.add('hidden');
                errorMessageElement.textContent = error.message;
                errorMessageElement.classList.remove('hidden');
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            const filterForm = document.getElementById('filter-form');
            const clearFiltersButton = document.getElementById('clear-filters');
            const toggleFilterButton = document.getElementById('toggle-filter');
            const filterSection = document.getElementById('filter-section');

            filterForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const params = getFilterParams();
                allBooks = filterBooks(originalBooks, params);
                currentPage = 1;
                renderBooks(currentPage);
            });

            clearFiltersButton.addEventListener('click', () => {
                clearFilters();
                allBooks = [...originalBooks];
                currentPage = 1;
                renderBooks(currentPage);
            });

            toggleFilterButton.addEventListener('click', () => {
                filterSection.classList.toggle('hidden');
            });

            fetchDropdownOptions();
            fetchBooks();
        });
    </script>
}