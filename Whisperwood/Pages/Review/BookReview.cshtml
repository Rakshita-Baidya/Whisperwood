@page "{bookId}"
@model Whisperwood.Pages.Review.BookReviewModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Book Reviews";
}

<div class="container mx-auto px-6 py-8">
    <h1 class="text-accent4 mb-6 text-center text-3xl font-bold">Reviews for <span id="book-title">Loading...</span></h1>
    <div class="overflow-x-auto">
        <table class="text-accent2 border-accent1 w-full rounded border">
            <thead>
                <tr class="bg-accent4 text-white">
                    <th class="p-2 text-left">Reviewer</th>
                    <th class="p-2 text-left">Rating</th>
                    <th class="p-2 text-left">Comment</th>
                    <th class="p-2 text-left">Posted</th>
                    <th class="p-2 text-left">Updated</th>
                </tr>
            </thead>
            <tbody id="reviews-table" class="bg-white"></tbody>
        </table>
        <p id="no-reviews" class="text-accent2 hidden text-center text-lg">No reviews yet for this book.</p>
    </div>
</div>

@section Scripts {
    <script>
        // caches dom elements
        const elements = {
            bookTitle: document.getElementById('book-title'),
            reviewsTable: document.getElementById('reviews-table'),
            noReviews: document.getElementById('no-reviews')
        };

        // gets bookId from route
        const getBookId = () => {
            const path = window.location.pathname;
            return path.split('/').pop();
        };

        // fetches book details
        const fetchBookDetails = async (bookId) => {
            try {
                const response = await fetch(`https://localhost:7018/api/Book/getbyid/${bookId}`);
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to load book details');
                }
                return await response.json();
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to load book details'
                }).then(() => {
                    window.location.href = '/Book/Browse';
                });
                return null;
            }
        };

        // fetches user ID
        const fetchUserId = async () => {
            if (!window.checkAuth('view profile')) return null;
            try {
                const response = await fetch('https://localhost:7018/api/Auth/user', {
                    headers: { 'Authorization': `Bearer ${window.jwtToken}` }
                });
                if (response.status === 401) return null;
                if (!response.ok) throw new Error('Failed to fetch user');
                const data = await response.json();
                return data.id;
            } catch (error) {
                return null;
            }
        };

        // fetches reviews for book
        const fetchBookReviews = async (bookId) => {
            try {
                const response = await fetch(`https://localhost:7018/api/Review/getbybook/${bookId}`);
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to fetch reviews');
                }
                return await response.json();
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to fetch reviews'
                });
                return [];
            }
        };

        // renders reviews
        const renderReviews = async () => {
            const bookId = getBookId();
            if (!bookId) {
                Toast.fire({
                    icon: 'error',
                    title: 'Invalid book ID'
                }).then(() => window.location.href = '/Book/Browse');
                return;
            }

            // Fetch book details
            const book = await fetchBookDetails(bookId);
            if (!book) return;
            elements.bookTitle.textContent = book.title || 'Untitled';

            // Fetch user ID
            const currentUserId = await fetchUserId();

            // Fetch reviews
            const reviews = await fetchBookReviews(bookId);
            elements.reviewsTable.innerHTML = '';
            if (reviews.length === 0) {
                elements.noReviews.classList.remove('hidden');
                return;
            }

            elements.noReviews.classList.add('hidden');
            reviews.forEach(review => {
                const row = document.createElement('tr');
                row.className = 'border-b border-accent1';
                row.innerHTML = `
                    <td class="flex justify-center p-2 text-center">
                        <div>
                            <img src="${review.users?.imageURL || 'https://i.imgur.com/L8yG19z.jpeg'}" class="h-12 w-12 rounded-full" alt="${review.users?.name || 'Anonymous'}">
                            ${review.users?.name}
                        </div>
                    </td>
                    <td class="p-2">★ ${review.rating}</td>
                    <td class="max-w-2xl p-2 text-wrap">${review.message || 'No comment'}</td>
                    <td class="p-2">${new Date(review.createdAt).toLocaleString()}</td>
                    <td class="p-2">${review.updatedAt ? new Date(review.updatedAt).toLocaleString() : '-'}</td>
                `;
                elements.reviewsTable.appendChild(row);
            });
        };

        // initializes page
        document.addEventListener('DOMContentLoaded', renderReviews);
    </script>
}