@page "{id}"
@model Whisperwood.Pages.Review.EditReviewModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Update Review";
}

<div class="container mx-auto px-6 py-8">
    <h1 class="text-accent4 mb-6 text-center text-3xl font-bold">Update Review</h1>
    <div id="review-form-container" class="bg-primary mx-auto max-w-lg rounded-lg p-6 shadow-lg">
        <div id="book-details" class="mb-2 flex items-center text-xl">
            <h2 id="book-title" class="text-accent4 mr-2 font-bold">Loading...</h2>
            <p id="book-author" class="text-accent4 italic">Loading...</p>
        </div>
        <form id="review-form" class="space-y-4">
            <div>
                <label for="rating" class="text-accent4 mb-1 block text-lg font-medium">Rating</label>
                <select id="rating" name="rating" class="border-accent1 text-accent4 w-full rounded-md border p-2 focus:border-accent3 focus:outline-none" required>
                    <option value="" disabled>Select a rating</option>
                    <option value="1">★ 1</option>
                    <option value="2">★ 2</option>
                    <option value="3">★ 3</option>
                    <option value="4">★ 4</option>
                    <option value="5">★ 5</option>
                </select>
            </div>
            <div>
                <label for="message" class="text-accent4 mb-1 block text-lg font-medium">Comment (Optional)</label>
                <textarea id="message" name="message" rows="5" class="border-accent1 text-accent4 w-full rounded-md border p-2 focus:border-accent3 focus:outline-none" placeholder="Share your thoughts about the book..."></textarea>
            </div>
            <div class="flex justify-end space-x-2">
                <button type="submit" class="bg-accent3 rounded px-4 py-2 text-white hover:bg-accent4">Update Review</button>
                <div onclick="history.back()" class="cursor-pointer rounded bg-gray-500 px-4 py-2 text-white hover:bg-gray-600">Cancel</div>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        // caches dom elements
        const elements = {
            form: document.getElementById('review-form'),
            formContainer: document.getElementById('review-form-container'),
            rating: document.getElementById('rating'),
            message: document.getElementById('message'),
            bookTitle: document.getElementById('book-title'),
            bookAuthor: document.getElementById('book-author')
        };

        // gets reviewId from route
        const getReviewId = () => {
            const path = window.location.pathname;
            return path.split('/').pop();
        };

        // fetches book details
        const fetchBookDetails = async (bookId) => {
            try {
                const response = await fetch(`https://localhost:7018/api/Book/getbyid/${bookId}`);
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to load book details');
                }
                return await response.json();
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to load book details'
                }).then(() => {
                    window.location.href = '/Book/Browse';
                });
                return null;
            }
        };

        // fetches review details
        const fetchReviewDetails = async (reviewId) => {
            try {
                const response = await fetch(`https://localhost:7018/api/Review/getbyid/${reviewId}`, {
                    headers: { 'Authorization': `Bearer ${window.jwtToken}` }
                });
                if (response.status === 401) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Please log in to update a review'
                    }).then(() => window.location.href = '/User/Login');
                    return null;
                }
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to load review details');
                }
                return await response.json();
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to load review details'
                }).then(() => {
                    window.location.href = '/Book/Browse';
                });
                return null;
            }
        };

        // submits updated review
        const submitReviewUpdate = async (reviewId, bookId, rating, message) => {
            try {
                const response = await fetch(`https://localhost:7018/api/Review/update/${reviewId}`, {
                    method: 'PUT',
                    headers: {
                        'Authorization': `Bearer ${window.jwtToken}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        id: reviewId,
                        bookId: bookId,
                        rating: parseInt(rating),
                        message: message || ''
                    })
                });
                if (response.status === 401) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Please log in to update a review'
                    }).then(() => window.location.href = '/User/Login');
                    return false;
                }
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to update review');
                }
                return true;
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to update review'
                });
                return false;
            }
        };

        // initializes form
        const initForm = async () => {
            if (!window.checkAuth('update a review')) return;

            const reviewId = getReviewId();
            if (!reviewId) {
                Toast.fire({
                    icon: 'error',
                    title: 'Invalid review ID'
                }).then(() => window.location.href = '/Book/Browse');
                return;
            }

            // Fetch review details
            const review = await fetchReviewDetails(reviewId);
            if (!review) return;

            // Fetch book details
            const book = await fetchBookDetails(review.bookId);
            if (!book) return;

            // Display book details
            elements.bookTitle.textContent = book.title || 'Untitled';
            elements.bookAuthor.textContent = book.authorBooks?.length > 0
                ? `- ${book.authorBooks.map(ab => ab.author.name).join(', ')}`
                : '- Unknown Author';

            // Pre-fill form
            elements.rating.value = review.rating || '';
            elements.message.value = review.message || '';

            elements.form.addEventListener('submit', async (e) => {
                e.preventDefault();
                const rating = elements.rating.value;
                const message = elements.message.value.trim();

                if (!rating) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Please select a rating'
                    });
                    return;
                }

                const submitButton = elements.form.querySelector('button[type="submit"]');
                submitButton.disabled = true;
                submitButton.textContent = 'Updating...';

                try {
                    const success = await submitReviewUpdate(reviewId, review.bookId, rating, message);
                    if (success) {
                        Toast.fire({
                            icon: 'success',
                            title: 'Review updated successfully'
                        }).then(() => {
                            window.location.href = `/Book/Details/${review.bookId}`;
                        });
                    }
                } finally {
                    submitButton.disabled = false;
                    submitButton.textContent = 'Update Review';
                }
            });
        };

        // initializes page
        document.addEventListener('DOMContentLoaded', initForm);
    </script>
}