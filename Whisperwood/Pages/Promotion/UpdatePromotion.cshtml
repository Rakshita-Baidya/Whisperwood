@page "{id}"
@model Whisperwood.Pages.Promotion.UpdatePromotionModel
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@{
    var httpContext = HttpContextAccessor.HttpContext;
    string jwtToken = httpContext?.Request.Cookies["JwtToken"];
    bool isAdmin = false;

    if (!string.IsNullOrEmpty(jwtToken))
    {
        try
        {
            var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
            var token = handler.ReadJwtToken(jwtToken);
            isAdmin = token?.Claims.Any(c => c.Type == "IsAdmin" && c.Value.Equals("true", StringComparison.OrdinalIgnoreCase)) ?? false;

            if (token.ValidTo < DateTime.UtcNow)
            {
                isAdmin = false;
            }
        }
        catch
        {
            isAdmin = false;
        }
    }

    if (!isAdmin)
    {
        httpContext.Response.Redirect("/Error");
        return;
    }

    Layout = "_Layout";
    ViewData["Title"] = "Update Promotion";
}

<div class="px-4 py-8">
    <h1 class="text-accent3 mb-6 text-center text-4xl font-bold">Update Promotion</h1>

    <div class="bg-primary border-accent3 mx-auto max-w-2xl rounded border p-6 shadow-md">
        <form id="promotion-form" class="text-accent4 grid grid-cols-1 gap-4 md:grid-cols-2">
            <div>
                <label for="name" class="mb-1 block font-medium">Name</label>
                <input type="text" id="name" name="name" class="border-accent1 w-full rounded border p-2" placeholder="Enter promotion name" required>
            </div>
            <div>
                <label for="discountPercent" class="mb-1 block font-medium">Discount (%)</label>
                <input type="number" id="discountPercent" name="discountPercent" class="border-accent1 w-full rounded border p-2" min="0" max="100" step="0.01" placeholder="e.g., 10" required>
            </div>
            <div class="md:col-span-2">
                <label for="description" class="mb-1 block font-medium">Description</label>
                <textarea id="description" name="description" class="border-accent1 w-full rounded border p-2" rows="4" placeholder="Enter promotion description"></textarea>
            </div>

            <div>
                <label for="startDate" class="mb-1 block font-medium">Start Date</label>
                <input type="date" id="startDate" name="startDate" class="border-accent1 w-full rounded border p-[6px]" required>
            </div>
            <div>
                <label for="endDate" class="mb-1 block font-medium">End Date</label>
                <input type="date" id="endDate" name="endDate" class="border-accent1 w-full rounded border p-[6px]" required>
            </div>
            <div class="flex justify-end gap-4 md:col-span-2">
                <button type="submit" class="bg-accent3 rounded px-6 py-2 text-white hover:bg-accent4">Update Promotion</button>
                <a href="/Promotion/ManagePromotion" class="rounded bg-gray-500 px-4 py-2 text-white hover:bg-gray-600">Cancel</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        // fetches promotion details from api
        const fetchPromotionDetails = async (promotionId) => {
            if (!window.checkAuth('update promotions')) return null;

            try {
                const response = await fetch(`https://localhost:7018/api/Promotion/getbyid/${promotionId}`, {
                    headers: { 'Authorization': `Bearer ${window.jwtToken}` }
                });

                if (response.status === 401) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Please log in to update promotions'
                    }).then(() => {
                        window.location.href = '/User/Login';
                    });
                    return null;
                }

                if (!response.ok) throw new Error('Failed to load promotion details');

                const promotion = await response.json();
                return promotion;
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to load promotion details'
                });
                return null;
            }
        };

        // populates form with promotion details
        const populateForm = (promotion, elements) => {
            if (!promotion) return;

            elements.name.value = promotion.name || '';
            elements.description.value = promotion.description || '';
            elements.discountPercent.value = promotion.discountPercent || '';
            elements.startDate.value = promotion.startDate ? promotion.startDate.split('T')[0] : '';
            elements.endDate.value = promotion.endDate ? promotion.endDate.split('T')[0] : '';
        };

        // validates form inputs
        const validateForm = (formData) => {
            const name = formData.get('name')?.trim();
            if (!name || !/^[a-zA-Z\s]+$/.test(name)) {
                Toast.fire({ icon: 'error', title: 'Name must contain only letters and spaces' });
                return false;
            }

            const discountPercent = parseFloat(formData.get('discountPercent'));
            if (isNaN(discountPercent) || discountPercent < 0 || discountPercent > 100) {
                Toast.fire({ icon: 'error', title: 'Discount must be between 0 and 100' });
                return false;
            }

            const startDate = formData.get('startDate');
            if (!startDate) {
                Toast.fire({ icon: 'error', title: 'Start date is required' });
                return false;
            }

            const endDate = formData.get('endDate');
            if (!endDate || new Date(endDate) < new Date(startDate)) {
                Toast.fire({ icon: 'error', title: 'End date must not be before start date' });
                return false;
            }

            return true;
        };

        // submits updated promotion to api
        const submitForm = async (form, promotionId) => {
            if (!window.checkAuth('update promotions')) return;

            const formData = new FormData(form);
            if (!validateForm(formData)) return;

            const promotionData = {
                name: formData.get('name').trim(),
                description: formData.get('description')?.trim() || null,
                discountPercent: parseFloat(formData.get('discountPercent')),
                startDate: formData.get('startDate'),
                endDate: formData.get('endDate'),
            };

            try {
                const response = await fetch(`https://localhost:7018/api/Promotion/update/${promotionId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${window.jwtToken}`
                    },
                    body: JSON.stringify(promotionData)
                });

                if (response.status === 401) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Please log in to update promotions'
                    }).then(() => {
                        window.location.href = '/User/Login';
                    });
                    return;
                }

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to update promotion');
                }

                Toast.fire({
                    icon: 'success',
                    title: 'Promotion updated successfully'
                }).then(() => {
                    window.location.href = '/Promotion/ManagePromotion';
                });
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to update promotion'
                });
            }
        };

        // initializes event listeners
        document.addEventListener('DOMContentLoaded', async () => {
            const elements = {
                form: document.getElementById('promotion-form'),
                name: document.getElementById('name'),
                description: document.getElementById('description'),
                discountPercent: document.getElementById('discountPercent'),
                startDate: document.getElementById('startDate'),
                endDate: document.getElementById('endDate'),
            };

            if (!window.checkAuth('update promotions')) return;

            const promotionId = window.location.pathname.split('/').pop();
            if (!promotionId) {
                Toast.fire({
                    icon: 'error',
                    title: 'Promotion ID not found in URL'
                });
                return;
            }

            const promotion = await fetchPromotionDetails(promotionId);
            populateForm(promotion, elements);

            elements.form.addEventListener('submit', (e) => {
                e.preventDefault();
                submitForm(elements.form, promotionId);
            });
        });
    </script>
}