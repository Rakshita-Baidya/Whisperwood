@page
@model Whisperwood.Pages.Promotion.ManagePromotionModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Manage Promotions";
}

@* displays promotion management page *@
<div class="px-4 py-8">
    @* header with title and action buttons *@
    <div class="mb-4 flex items-center justify-between">
        <h1 class="text-accent4 text-4xl font-bold">Manage Promotions</h1>
        <div class="flex space-x-4 text-white">
            <a href="/Promotion/AddPromotion" class="bg-accent3 rounded px-4 py-2 hover:bg-accent4">Add Promotion</a>
            <button id="filter-button" class="bg-accent3 rounded px-4 py-2 hover:bg-accent4">Filter Promotion</button>
        </div>
    </div>

    @* filter form section *@
    <div id="filter-section" class="bg-primary border-accent3 mb-8 hidden rounded-lg border p-6 shadow-md">
        <form id="filter-form" class="text-accent4 grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-4">
            <div>
                <label for="search" class="mb-1 block font-medium">Search</label>
                <input type="text" id="search" name="search" class="border-accent1 w-full rounded border p-2" placeholder="Search by name or code">
            </div>
            <div>
                <label for="sortBy" class="mb-1 block font-medium">Sort By</label>
                <select id="sortBy" name="sortBy" class="border-accent1 w-full rounded border p-[10px]">
                    <option value="name">Name</option>
                    <option value="startDate">Start Date</option>
                    <option value="endDate">End Date</option>
                    <option value="discountPercent">Discount Percent</option>
                </select>
            </div>
            <div>
                <label for="sortOrder" class="mb-1 block font-medium">Sort Order</label>
                <select id="sortOrder" name="sortOrder" class="border-accent1 w-full rounded border p-[10px]">
                    <option value="asc">Ascending</option>
                    <option value="desc">Descending</option>
                </select>
            </div>
            <div>
                <label for="isActive" class="mb-1 block font-medium">Status</label>
                <select id="isActive" name="isActive" class="border-accent1 w-full rounded border p-[10px]">
                    <option value="">All</option>
                    <option value="true">Active</option>
                    <option value="false">Inactive</option>
                </select>
            </div>
            <div>
                <label for="minStartDate" class="mb-1 block font-medium">Min Start Date</label>
                <input type="date" id="minStartDate" name="minStartDate" class="border-accent1 w-full rounded border p-[6px]">
            </div>
            <div>
                <label for="maxEndDate" class="mb-1 block font-medium">Max End Date</label>
                <input type="date" id="maxEndDate" name="maxEndDate" class="border-accent1 w-full rounded border p-[6px]">
            </div>
            <div class="col-start-4 flex items-end justify-end gap-2">
                <button type="submit" class="bg-accent3 rounded px-4 py-2 text-white hover:bg-accent4">Apply Filters</button>
                <button type="button" id="clear-filters" class="rounded bg-gray-500 px-4 py-2 text-white hover:bg-gray-600">Clear</button>
            </div>
        </form>
    </div>

    @* promotion table *@
    <div id="promotion-list" class="space-y-4">
        <div class="overflow-x-auto">
            <table id="promotions-table" class="border-accent3 min-w-full border">
                <thead>
                    <tr class="bg-accent4 text-white">
                        <th class="px-4 py-2 text-left">Name</th>
                        <th class="px-4 py-2 text-left">Description</th>
                        <th class="px-4 py-2 text-left">Code</th>
                        <th class="px-4 py-2 text-left">Discount (%)</th>
                        <th class="px-4 py-2 text-left">Start Date</th>
                        <th class="px-4 py-2 text-left">End Date</th>
                        <th class="px-4 py-2 text-left">Status</th>
                        <th class="px-4 py-2 text-center">Actions</th>
                    </tr>
                </thead>
                <tbody id="promotions-table-body" class="bg-primary"></tbody>
            </table>
        </div>
    </div>

    @* no promotions message *@
    <div id="no-promotions" class="text-accent4 mt-4 hidden text-center text-lg">No promotions found.</div>

    @* pagination controls *@
    <div id="pagination-container" class="mt-6 flex justify-center gap-2"></div>
</div>

@section Scripts {
    <script>
        // checks authentication and redirects if unauthorized
        const checkAuth = () => {
            if (!window.jwtToken) {
                Toast.fire({
                    icon: 'error',
                    title: 'Please log in to manage promotions'
                }).then(() => {
                    window.location.href = '/User/Login';
                });
                return false;
            }
            return true;
        };

        // renders promotion table
        const renderPromotions = (page, elements, promotions, pageSize) => {
            elements.tableBody.innerHTML = '';
            elements.pagination.innerHTML = '';

            if (promotions.length === 0) {
                elements.noPromotions.classList.remove('hidden');
                return;
            }

            elements.noPromotions.classList.add('hidden');

            const startIndex = (page - 1) * pageSize;
            const endIndex = Math.min(startIndex + pageSize, promotions.length);
            const paginatedPromotions = promotions.slice(startIndex, endIndex);

            paginatedPromotions.forEach(promotion => {
                const row = document.createElement('tr');
                row.className = 'border-t border-accent3';
                row.innerHTML = `
                    <td class="text-accent4 max-w-xs truncate px-4 py-2 font-semibold">${promotion.name}</td>
                    <td class="text-accent4 max-w-xs truncate px-4 py-2">${promotion.description || ''}</td>
                    <td class="text-accent4 px-4 py-2">${promotion.code}</td>
                    <td class="text-accent4 px-4 py-2">${promotion.discountPercent}</td>
                    <td class="text-accent4 px-4 py-2">${new Date(promotion.startDate).toLocaleDateString()}</td>
                    <td class="text-accent4 px-4 py-2">${new Date(promotion.endDate).toLocaleDateString()}</td>
                    <td class="text-accent4 px-4 py-2">${promotion.isActive ? 'Active' : 'Inactive'}</td>
                    <td class="px-4 py-2 text-center">
                        <div class="flex justify-center space-x-2">
                            <a href="/Promotion/UpdatePromotion/${promotion.id}" class="bg-accent3 rounded px-3 py-1 text-white hover:bg-accent4">Update</a>
                            <button class="bg-accent3 delete-promotion rounded px-3 py-1 text-white hover:bg-accent4" data-id="${promotion.id}" data-name="${promotion.name}">Delete</button>
                        </div>
                    </td>
                `;
                elements.tableBody.appendChild(row);
            });

            const totalPages = Math.ceil(promotions.length / pageSize);
            createPaginationControls('pagination-container', totalPages, page, (newPage) => {
                currentPage = newPage;
                renderPromotions(newPage, elements, promotions, pageSize);
            });
        };

        // fetches promotions from api
        const fetchPromotions = async (elements) => {
            if (!checkAuth()) return;

            try {
                const response = await fetch('https://localhost:7018/api/Promotion/getall', {
                    headers: { 'Authorization': `Bearer ${window.jwtToken}` }
                });

                if (response.status === 401) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Please log in to manage promotions'
                    }).then(() => {
                        window.location.href = '/User/Login';
                    });
                    return;
                }

                if (!response.ok) throw new Error('Failed to load promotions');

                originalPromotions = await response.json();
                allPromotions = [...originalPromotions];
                renderPromotions(currentPage, elements, allPromotions, pageSize);
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to load promotions'
                });
            }
        };

        // deletes a promotion
        const deletePromotion = async (promotionId, promotionName, elements) => {
            const result = await Swal.fire({
                title: `Are you sure you want to delete the promotion "${promotionName}"?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: 'red',
                cancelButtonColor: 'grey',
                confirmButtonText: 'Delete'
            });

            if (!result.isConfirmed) return;

            if (!checkAuth()) return;

            try {
                const response = await fetch(`https://localhost:7018/api/Promotion/delete/${promotionId}`, {
                    method: 'DELETE',
                    headers: { 'Authorization': `Bearer ${window.jwtToken}` }
                });

                if (response.status === 401) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Please log in to manage promotions'
                    }).then(() => {
                        window.location.href = '/User/Login';
                    });
                    return;
                }

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to delete promotion');
                }

                Toast.fire({
                    icon: 'success',
                    title: 'Promotion deleted successfully'
                });
                await fetchPromotions(elements);
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to delete promotion'
                });
            }
        };

        // collects filter parameters
        const getFilterParams = (form) => {
            const formData = new FormData(form);
            return {
                search: formData.get('search')?.toLowerCase() || '',
                minStartDate: formData.get('minStartDate'),
                maxEndDate: formData.get('maxEndDate'),
                isActive: formData.get('isActive'),
                sortBy: formData.get('sortBy') || 'name',
                sortOrder: formData.get('sortOrder') || 'asc'
            };
        };

        // filters promotions based on parameters
        const filterPromotions = (promotions, params) => {
            let filtered = [...promotions];

            if (params.search) {
                filtered = filtered.filter(p =>
                    p.name.toLowerCase().includes(params.search) ||
                    p.code.toLowerCase().includes(params.search)
                );
            }

            if (params.minStartDate) {
                const minDate = new Date(params.minStartDate);
                filtered = filtered.filter(p => new Date(p.startDate) >= minDate);
            }

            if (params.maxEndDate) {
                const maxDate = new Date(params.maxEndDate);
                filtered = filtered.filter(p => new Date(p.endDate) <= maxDate);
            }

            if (params.isActive !== '') {
                const isActive = params.isActive === 'true';
                filtered = filtered.filter(p => p.isActive === isActive);
            }

            filtered.sort((a, b) => {
                const fieldA = params.sortBy === 'name' ? a.name.toLowerCase() :
                              params.sortBy === 'startDate' ? new Date(a.startDate) :
                              params.sortBy === 'endDate' ? new Date(a.endDate) :
                              a.discountPercent;
                const fieldB = params.sortBy === 'name' ? b.name.toLowerCase() :
                              params.sortBy === 'startDate' ? new Date(b.startDate) :
                              params.sortBy === 'endDate' ? new Date(b.endDate) :
                              b.discountPercent;
                const comparison = fieldA > fieldB ? 1 : fieldA < fieldB ? -1 : 0;
                return params.sortOrder === 'asc' ? comparison : -comparison;
            });

            return filtered;
        };

        // clears filter form
        const clearFilters = (form) => {
            form.reset();
        };

        // initializes event listeners
        let currentPage = 1;
        const pageSize = 10;
        let allPromotions = [];
        let originalPromotions = [];

        document.addEventListener('DOMContentLoaded', () => {
            const elements = {
                filterButton: document.getElementById('filter-button'),
                filterSection: document.getElementById('filter-section'),
                filterForm: document.getElementById('filter-form'),
                clearFilters: document.getElementById('clear-filters'),
                tableBody: document.getElementById('promotions-table-body'),
                noPromotions: document.getElementById('no-promotions'),
                pagination: document.getElementById('pagination-container')
            };

            if (!elements.filterButton || !elements.filterSection || !elements.filterForm ||
                !elements.clearFilters || !elements.tableBody || !elements.noPromotions || !elements.pagination) {
                Toast.fire({
                    icon: 'error',
                    title: 'Promotion management elements not found'
                });
                return;
            }

            elements.filterButton.addEventListener('click', () => {
                elements.filterSection.classList.toggle('hidden');
            });

            elements.filterForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const params = getFilterParams(elements.filterForm);
                allPromotions = filterPromotions(originalPromotions, params);
                currentPage = 1;
                renderPromotions(currentPage, elements, allPromotions, pageSize);
            });

            elements.clearFilters.addEventListener('click', () => {
                clearFilters(elements.filterForm);
                allPromotions = [...originalPromotions];
                currentPage = 1;
                renderPromotions(currentPage, elements, allPromotions, pageSize);
            });

            elements.tableBody.addEventListener('click', (e) => {
                const button = e.target.closest('.delete-promotion');
                if (button) {
                    const id = button.dataset.id;
                    const name = button.dataset.name;
                    deletePromotion(id, name, elements);
                }
            });

            fetchPromotions(elements);
        });
    </script>
}