@page "{id}"
@model Whisperwood.Pages.Author.UpdateAuthorModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Update Author";
}

<div class="px-4 py-8">
    <h1 class="text-accent3 mb-6 text-center text-4xl font-bold">Update Author</h1>

    <div class="bg-primary border-accent3 mx-auto max-w-3xl rounded border p-6 shadow-md">
        <form id="author-form" class="grid grid-cols-2 gap-6">
            <div>
                <label for="name" class="text-accent3 mb-1 block font-medium">Name</label>
                <input type="text" id="name" name="name" class="border-accent1 w-full rounded border p-2" placeholder="Author Name" required />
            </div>
            <div>
                <label for="email" class="text-accent3 mb-1 block font-medium">Email</label>
                <input type="email" id="email" name="email" class="border-accent1 w-full rounded border p-2" placeholder="Author Email" />
            </div>
            <div>
                <label for="address" class="text-accent3 mb-1 block font-medium">Address</label>
                <input type="text" id="address" name="address" class="border-accent1 w-full rounded border p-2" placeholder="Author Address" />
            </div>
            <div>
                <label for="nationality" class="text-accent3 mb-1 block font-medium">Nationality</label>
                <input type="text" id="nationality" name="nationality" class="border-accent1 w-full rounded border p-2" placeholder="Author Nationality" />
            </div>
            <div>
                <label for="dob" class="text-accent3 mb-1 block font-medium">Date of Birth</label>
                <input type="date" id="dob" name="dob" class="border-accent1 w-full rounded border p-2" />
            </div>
            <div>
                <label for="contact" class="text-accent3 mb-1 block font-medium">Contact</label>
                <input type="text" id="contact" name="contact" class="border-accent1 w-full rounded border p-2" placeholder="Author Contact" />
            </div>
            <div class="flex justify-end gap-2 col-span-full">
                <button type="submit" class="bg-accent3 rounded px-4 py-2 text-white hover:bg-accent2">Update Author</button>
                <a href="/Author/ManageAuthors" class="rounded bg-gray-500 px-4 py-2 text-white hover:bg-gray-600">Cancel</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        // fetches author details by ID and populates the form
        const fetchAuthorDetails = async (authorId) => {
            try {
                const response = await fetch(`https://localhost:7018/api/Author/getbyid/${authorId}`, {
                    headers: {
                        'Authorization': `Bearer ${window.jwtToken}`
                    }
                });

                if (response.status === 401) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Please log in to view author details.'
                    }).then(() => {
                        window.location.href = '/User/Login';
                    });
                    return;
                }

                if (!response.ok) {
                    throw new Error('Failed to load author details.');
                }

                const author = await response.json();
                document.getElementById('name').value = author.name || '';
                document.getElementById('email').value = author.email || '';
                document.getElementById('address').value = author.address || '';
                document.getElementById('nationality').value = author.nationality || '';
                document.getElementById('dob').value = author.dob ? new Date(author.dob).toISOString().split('T')[0] : '';
                document.getElementById('contact').value = author.contact || '';
            } catch (error) {
                // handle fetch error
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to load author details.'
                });
            }
        };

        // initializes form event listeners on DOM load
        document.addEventListener('DOMContentLoaded', () => {
            // check authentication
           if (!window.checkAuth('update author')) return;

            const form = document.getElementById('author-form');
            const authorId = window.location.pathname.split('/').pop();

            // validate author ID
            if (!authorId) {
                Toast.fire({
                    icon: 'error',
                    title: 'Author ID not found.'
                });
                return;
            }

            // fetch and populate author details
            fetchAuthorDetails(authorId);

            // handle form submission
            form.addEventListener('submit', async (e) => {
                e.preventDefault();

                // collect form data
                const name = document.getElementById('name').value.trim();
                const email = document.getElementById('email').value.trim();
                const address = document.getElementById('address').value.trim();
                const nationality = document.getElementById('nationality').value.trim();
                const dob = document.getElementById('dob').value;
                const contact = document.getElementById('contact').value.trim();

                // validate name
                if (!name) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Name is required.'
                    });
                    return;
                }

                // validate email format if provided
                if (email && !/^[^\s]+[^\s]+\.[^\s]+/.test(email)) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Invalid email format.'
                    });
                    return;
                }

                // validate DOB if provided
                if (dob) {
                    const dobDate = new Date(dob);
                    const today = new Date();
                    if (isNaN(dobDate) || dobDate > today) {
                        Toast.fire({
                            icon: 'error',
                            title: 'Date of birth must be a valid past date.'
                        });
                        return;
                    }
                }

                // prepare API payload
                const authorUpdateDto = {
                    name,
                    email: email || null,
                    address: address || null,
                    nationality: nationality || null,
                    dob: dob || null,
                    contact: contact || null
                };

                try {
                    // send author update request
                    const response = await fetch(`https://localhost:7018/api/Author/update/${authorId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${window.jwtToken}`
                        },
                        body: JSON.stringify(authorUpdateDto)
                    });

                    if (response.status === 401) {
                        Toast.fire({
                            icon: 'error',
                            title: 'Please log in to update the author.'
                        }).then(() => {
                            window.location.href = '/User/Login';
                        });
                        return;
                    }

                    if (response.ok) {
                        // show success toast and redirect
                        Toast.fire({
                            icon: 'success',
                            title: 'Author updated successfully!'
                        }).then(() => {
                            window.location.href = '/Author/ManageAuthor';
                        });
                    } else {
                        // handle API error
                        const data = await response.json();
                        Toast.fire({
                            icon: 'error',
                            title: data.message || 'Failed to update author.'
                        });
                    }
                } catch (error) {
                    // handle network error
                    Toast.fire({
                        icon: 'error',
                        title: 'Failed to connect to the server. Please try again.'
                    });
                }
            });
        });
    </script>
}