@page
@model Whisperwood.Pages.Announcement.AddAnnouncementModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Add Announcement";
}

<div class="px-4 py-8">
    <h1 class="text-accent3 mb-6 text-center text-4xl font-bold">Add Announcement</h1>

    <div id="error-message" class="mb-4 hidden text-center text-red-600"></div>
    <div id="success-message" class="mb-4 hidden text-center text-green-600"></div>

    <div class="bg-primary border-accent3 mx-auto max-w-2xl rounded-lg border p-6 shadow-md">
        <form id="announcement-form" class="space-y-4">
            <div>
                <label for="title" class="text-accent3 mb-1 block font-medium">Title</label>
                <input type="text" id="title" name="title" class="border-accent1 w-full rounded border p-2" placeholder="Announcement Title" required>
            </div>
            <div>
                <label for="message" class="text-accent3 mb-1 block font-medium">Message</label>
                <textarea id="message" name="message" class="border-accent1 w-full rounded border p-2" rows="3" placeholder="Announcement Message" required></textarea>
            </div>
            <div class="grid grid-cols-2 gap-4">
            <div>
                <label for="startDate" class="text-accent3 mb-1 block font-medium">Start Date</label>
                <input type="date" id="startDate" name="startDate" class="border-accent1 w-full rounded border p-2" required>
            </div>
            <div>
                <label for="endDate" class="text-accent3 mb-1 block font-medium">End Date</label>
                <input type="date" id="endDate" name="endDate" class="border-accent1 w-full rounded border p-2" required>
            </div>
            </div>
            <div>
                <label for="recipientGroups" class="text-accent3 mb-1 block font-medium">Recipient Groups</label>
                <select id="recipientGroups" name="recipientGroups" multiple class="border-accent1 w-full rounded border p-2" required>
                    <option value="All Users" selected>All Users</option>
                    <option value="Staff">Staff</option>
                    <option value="Admin">Admins</option>
                </select>
            </div>
            <div class="flex justify-end gap-2">
                <button type="submit" class="bg-accent3 rounded px-4 py-2 text-white hover:bg-accent2">Create Announcement</button>
                <button type="button" id="clear-form" class="rounded bg-gray-500 px-4 py-2 text-white hover:bg-gray-600">Clear</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        function clearForm() {
            const form = document.getElementById('announcement-form');
            form.reset();
            const errorMessage = document.getElementById('error-message');
            const successMessage = document.getElementById('success-message');
            if (errorMessage) errorMessage.classList.add('hidden');
            if (successMessage) successMessage.classList.add('hidden');
        }

        document.addEventListener('DOMContentLoaded', () => {

            if (!window.jwtToken) {
                window.location.href = '/User/Login';
                return;
            }
            const form = document.getElementById('announcement-form');
            const clearButton = document.getElementById('clear-form');
            const errorMessage = document.getElementById('error-message');
            const successMessage = document.getElementById('success-message');

            form.addEventListener('submit', async (e) => {
                e.preventDefault();

                const title = document.getElementById('title').value;
                const message = document.getElementById('message').value;
                const startDate = document.getElementById('startDate').value;
                const endDate = document.getElementById('endDate').value;
                const recipientGroups = Array.from(document.getElementById('recipientGroups').selectedOptions).map(option => option.value);

                if (new Date(startDate) > new Date(endDate)) {
                    errorMessage.textContent = 'Start Date cannot be after End Date.';
                    errorMessage.classList.remove('hidden');
                    successMessage.classList.add('hidden');
                    return;
                }
                if (!recipientGroups.length) {
                    errorMessage.textContent = 'At least one recipient group must be selected.';
                    errorMessage.classList.remove('hidden');
                    successMessage.classList.add('hidden');
                    return;
                }

                const announcementDto = { title,message,startDate,endDate,recipientGroups};

                try {
                    const response = await fetch('https://localhost:7018/api/Announcement/add', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${window.jwtToken || ''}`
                        },
                        body: JSON.stringify(announcementDto)
                    });

                    const data = await response.json();

                    if (response.ok) {
                        successMessage.textContent = 'Announcement created successfully!';
                        successMessage.classList.remove('hidden');
                        errorMessage.classList.add('hidden');
                        form.reset();
                    } else {
                        errorMessage.textContent = data.message || 'Failed to create announcement.';
                        errorMessage.classList.remove('hidden');
                        successMessage.classList.add('hidden');
                    }
                } catch (error) {
                    console.error('Error creating announcement:', error);
                    errorMessage.textContent = 'An error occurred while creating the announcement.';
                    errorMessage.classList.remove('hidden');
                    successMessage.classList.add('hidden');
                }
            });

            clearButton.addEventListener('click', clearForm);
        });
    </script>
}