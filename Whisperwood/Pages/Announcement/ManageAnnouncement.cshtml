@page
@model Whisperwood.Pages.Announcement.ManageAnnouncementModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Manage Announcements";
}

<div class="px-4 py-8">
    <div class="mb-4 flex justify-between">
        <h1 class="text-accent4 text-center text-4xl font-bold">Manage Announcements</h1>
        <div class="flex space-x-4 text-white">
            <a href="/Announcement/AddAnnouncement" class="bg-accent3 rounded px-4 py-2 hover:bg-accent4">Add Announcement</a>
            <button id="filter-button" class="bg-accent3 rounded px-4 py-2 hover:bg-accent4">Filter Announcement</button>
        </div>
    </div>
    <div id="filter-section" class="bg-primary border-accent3 mb-8 hidden rounded border p-6 shadow-md">
        <form id="filter-form" class="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3">
            <div>
                <label for="search" class="text-accent3 mb-1 block font-medium">Search</label>
                <input type="text" id="search" name="search" class="border-accent1 w-full rounded border p-2" placeholder="Search by title or message" />
            </div>
            <div>
                <label for="sortBy" class="text-accent3 mb-1 block font-medium">Sort By</label>
                <select id="sortBy" name="sortBy" class="border-accent1 w-full rounded border p-[10px]">
                    <option value="title">Title</option>
                    <option value="startDate">Start Date</option>
                    <option value="endDate">End Date</option>
                </select>
            </div>
            <div>
                <label for="sortOrder" class="text-accent3 mb-1 block font-medium">Sort Order</label>
                <select id="sortOrder" name="sortOrder" class="border-accent1 w-full rounded border p-[10px]">
                    <option value="asc">Ascending</option>
                    <option value="desc">Descending</option>
                </select>
            </div>
            <div class="col-start-1">
                <div>
                    <label for="minStartDate" class="text-accent3 block font-medium">Min Start Date</label>
                    <input type="date" id="minStartDate" name="minStartDate" class="border-accent1 w-full rounded border p-1.5" />
                </div>
                <div>
                    <label for="maxEndDate" class="text-accent3 block font-medium">Max End Date</label>
                    <input type="date" id="maxEndDate" name="maxEndDate" class="border-accent1 w-full rounded border p-1.5" />
                </div>
            </div>
            <div>
                <label for="recipientGroups" class="text-accent3 block font-medium">Recipient Groups</label>
                <select id="recipientGroups" name="recipientGroups" multiple class="border-accent1 w-full rounded border p-3">
                    <option value="Admin">Admin</option>
                    <option value="Staff">Staff</option>
                    <option value="All Users">All Users</option>
                </select>
            </div>

            <div class="flex items-end justify-end gap-2">
                <button type="submit" class="bg-accent3 rounded px-4 py-2 text-white hover:bg-accent4">Apply Filters</button>
                <button type="button" id="clear-filters" class="rounded bg-gray-500 px-4 py-2 text-white hover:bg-gray-600">Clear Filters</button>
            </div>
        </form>
    </div>

    <div id="announcement-list" class="hidden">
        <table class="text-accent2 border-accent1 w-full border">
            <thead>
                <tr class="bg-accent4 text-white">
                    <th class="p-2 text-left">Title</th>
                    <th class="p-2 text-left">Message</th>
                    <th class="p-2 text-left">Recipient Groups</th>
                    <th class="p-2 text-left">Start Date</th>
                    <th class="p-2 text-left">End Date</th>
                    <th class="p-2 text-center">Actions</th>
                </tr>
            </thead>
            <tbody id="announcements-table-body" class="bg-white"></tbody>
        </table>
    </div>

    <div id="no-announcements" class="text-accent2 mt-4 hidden text-center text-lg">No announcements found.</div>

    <div id="pagination-container" class="mt-6 flex justify-center gap-2"></div>
</div>

@section Scripts {
    <script>
        // configuration constants
        const pageSize = 8;
        let currentPage = 1;
        let allAnnouncements = [];
        let originalAnnouncements = [];

        // formats date string to locale date
        const formatDate = (dateStr) => {
            return dateStr ? new Date(dateStr).toLocaleDateString() : '-';
        };

        // validates filter inputs
        const validateFilters = (params) => {
            // validate max end date (not before min start date if both provided)
            if (params.maxEndDate && params.minStartDate) {
                const maxEnd = new Date(params.maxEndDate);
                const minStart = new Date(params.minStartDate);
                if (isNaN(maxEnd) || maxEnd < minStart) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Max end date cannot be before min start date.'
                    });
                    return false;
                }
            } else if (params.maxEndDate) {
                const maxEnd = new Date(params.maxEndDate);
                if (isNaN(maxEnd)) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Max end date must be a valid date.'
                    });
                    return false;
                }
            }

            // validate recipient groups (at least one if selected)
            if (params.recipientGroups.length === 0 && document.getElementById('recipientGroups').selectedOptions.length > 0) {
                Toast.fire({
                    icon: 'error',
                    title: 'At least one recipient group must be selected.'
                });
                return false;
            }

            return true;
        };

        // fetches all announcements from API
        const fetchAnnouncements = async () => {
            // check authentication
            if (!window.jwtToken) {
                Toast.fire({
                    icon: 'error',
                    title: 'Please log in to view announcements.'
                }).then(() => {
                    window.location.href = '/User/Login';
                });
                return;
            }

            try {
                const response = await fetch('https://localhost:7018/api/Announcement/getall', {
                    headers: {
                        'Authorization': 'Bearer ${window.jwtToken}'
                    }
                });

                if (response.status === 401) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Please log in to view announcements.'
                    }).then(() => {
                        window.location.href = '/User/Login';
                    });
                    return;
                }

                if (!response.ok) {
                    throw new Error('Failed to load announcements.');
                }

                originalAnnouncements = await response.json();
                allAnnouncements = [...originalAnnouncements];
                renderAnnouncements(currentPage);
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to load announcements.'
                });
            }
        };

        // deletes an announcement by ID
        const deleteAnnouncement = async (announcementId, announcementTitle) => {
            // confirm deletion
            const result = await Swal.fire({
                title: `Are you sure you want to delete the announcement "${announcementTitle}"?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: 'red',
                cancelButtonColor: 'grey',
                confirmButtonText: 'Delete'
            });

            if (!result.isConfirmed) return;

            // check authentication
            if (!window.jwtToken) {
                Toast.fire({
                    icon: 'error',
                    title: 'Please log in to delete announcements.'
                }).then(() => {
                    window.location.href = '/User/Login';
                });
                return;
            }

            try {
                const response = await fetch(`https://localhost:7018/api/Announcement/delete/${announcementId}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${window.jwtToken}`
                    }
                });

                if (response.status === 401) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Please log in to delete announcements.'
                    }).then(() => {
                        window.location.href = '/User/Login';
                    });
                    return;
                }

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to delete announcement.');
                }

                Toast.fire({
                    icon: 'success',
                    title: 'Announcement deleted successfully!'
                }).then(() => {
                    fetchAnnouncements();
                });
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to delete announcement.'
                });
            }
        };

        // renders announcements for the current page
        const renderAnnouncements = (page) => {
            const announcementsTableBody = document.getElementById('announcements-table-body');
            const noAnnouncementsElement = document.getElementById('no-announcements');
            const paginationContainer = document.getElementById('pagination-container');
            const announcementList = document.getElementById('announcement-list');

            announcementsTableBody.innerHTML = '';

            if (allAnnouncements.length === 0) {
                noAnnouncementsElement.classList.remove('hidden');
                announcementList.classList.add('hidden');
                paginationContainer.innerHTML = '';
                return;
            }

            const startIndex = (page - 1) * pageSize;
            const endIndex = Math.min(startIndex + pageSize, allAnnouncements.length);
            const paginatedAnnouncements = allAnnouncements.slice(startIndex, endIndex);

            if (paginatedAnnouncements.length > 0) {
                announcementList.classList.remove('hidden');
                noAnnouncementsElement.classList.add('hidden');

                paginatedAnnouncements.forEach(announcement => {
                    const row = document.createElement('tr');
                    row.className = 'border-b border-accent1';
                    row.innerHTML = `
                        <td class="p-2">${announcement.title}</td>
                        <td class="p-2">${announcement.message}</td>
                        <td class="p-2">${announcement.recipientGroups.join(', ')}</td>
                        <td class="p-2">${formatDate(announcement.startDate)}</td>
                        <td class="p-2">${formatDate(announcement.endDate)}</td>
                        <td class="p-2">
                            <div class="flex justify-center space-x-2">
                                <a href="/Announcement/UpdateAnnouncement/${announcement.id}" class="bg-accent3 rounded px-3 py-1 text-white hover:bg-accent4">Update</a>
                                <button class="bg-accent3 delete-btn rounded px-3 py-1 text-white hover:bg-accent4" data-id="${announcement.id}" data-title="${announcement.title}">Delete</button>
                            </div>
                        </td>
                    `;
                    announcementsTableBody.appendChild(row);
                });

                const totalPages = Math.ceil(allAnnouncements.length / pageSize);
                createPaginationControls('pagination-container', totalPages, page, (newPage) => {
                    currentPage = newPage;
                    renderAnnouncements(newPage);
                });
            } else {
                noAnnouncementsElement.classList.remove('hidden');
                announcementList.classList.add('hidden');
                paginationContainer.innerHTML = '';
            }
        };

        // gets filter parameters from form
        const getAnnouncementFilterParams = () => ({
            search: document.getElementById('search').value.trim().toLowerCase(),
            minStartDate: document.getElementById('minStartDate').value,
            maxEndDate: document.getElementById('maxEndDate').value,
            recipientGroups: Array.from(document.getElementById('recipientGroups').selectedOptions).map(option => option.value),
            sortBy: document.getElementById('sortBy').value,
            sortOrder: document.getElementById('sortOrder').value
        });

        // filters announcements based on parameters
        const filterAnnouncements = (announcements, params) => {
            return announcements
                .filter(a => {
                    // filter by search (title or message)
                    if (params.search) {
                        return a.title.toLowerCase().includes(params.search) || a.message.toLowerCase().includes(params.search);
                    }
                    return true;
                })
                .filter(a => {
                    // filter by min start date
                    if (params.minStartDate) {
                        const startDate = new Date(a.startDate);
                        const minDate = new Date(params.minStartDate);
                        return startDate >= minDate;
                    }
                    return true;
                })
                .filter(a => {
                    // filter by max end date
                    if (params.maxEndDate) {
                        const endDate = new Date(a.endDate);
                        const maxDate = new Date(params.maxEndDate);
                        return endDate <= maxDate;
                    }
                    return true;
                })
                .filter(a => {
                    // filter by recipient groups
                    if (params.recipientGroups.length > 0) {
                        const announcementGroups = a.recipientGroups || [];
                        return params.recipientGroups.some(group => announcementGroups.includes(group));
                    }
                    return true;
                })
                .sort((a, b) => {
                    // sort by selected field and order
                    const fieldA = params.sortBy === 'title' ? a.title.toLowerCase() :
                                  params.sortBy === 'startDate' ? new Date(a.startDate) :
                                  new Date(a.endDate);
                    const fieldB = params.sortBy === 'title' ? b.title.toLowerCase() :
                                  params.sortBy === 'startDate' ? new Date(b.startDate) :
                                  new Date(b.endDate);
                    const comparison = fieldA > fieldB ? 1 : fieldA < fieldB ? -1 : 0;
                    return params.sortOrder === 'asc' ? comparison : -comparison;
                });
        };

        // clears filter form inputs
        const clearAnnouncementFilters = () => {
            document.getElementById('search').value = '';
            document.getElementById('minStartDate').value = '';
            document.getElementById('maxEndDate').value = '';
            document.getElementById('recipientGroups').selectedIndex = -1;
            document.getElementById('sortBy').value = 'title';
            document.getElementById('sortOrder').value = 'asc';
        };

        // initializes event listeners on DOM load
        document.addEventListener('DOMContentLoaded', () => {
            // cache DOM elements
            const filterButton = document.getElementById('filter-button');
            const filterSection = document.getElementById('filter-section');
            const filterForm = document.getElementById('filter-form');
            const clearAnnouncementFiltersButton = document.getElementById('clear-filters');
            const announcementsTableBody = document.getElementById('announcements-table-body');

            // toggle filter section visibility
            filterButton.addEventListener('click', () => {
                filterSection.classList.toggle('hidden');
            });

            // handle filter form submission
            filterForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const params = getAnnouncementFilterParams();
                if (!validateFilters(params)) return;
                allAnnouncements = filterAnnouncements(originalAnnouncements, params);
                currentPage = 1;
                renderAnnouncements(currentPage);
            });

            // handle clear filters
            clearAnnouncementFiltersButton.addEventListener('click', () => {
                clearAnnouncementFilters();
                allAnnouncements = [...originalAnnouncements];
                currentPage = 1;
                renderAnnouncements(currentPage);
            });

            // handle delete button clicks
            announcementsTableBody.addEventListener('click', (e) => {
                const deleteBtn = e.target.closest('.delete-btn');
                if (deleteBtn) {
                    const { id, title } = deleteBtn.dataset;
                    deleteAnnouncement(id, title);
                }
            });

            // fetch initial announcements
            fetchAnnouncements();
        });
    </script>
}