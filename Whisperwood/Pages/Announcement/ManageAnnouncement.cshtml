@page
@model Whisperwood.Pages.Announcement.ManageAnnouncementModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Manage Announcements";
}

<div class="px-4 py-8">
    <div class="mb-4 flex justify-between">
        <h1 class="text-accent4 text-center text-4xl font-bold">Manage Announcements</h1>
        <div class="flex space-x-4 text-white">
            <a href="/Announcement/AddAnnouncement" class="bg-accent3 rounded px-4 py-2 hover:bg-accent4">Add Announcement</a>
            <button id="filter-button" class="bg-accent3 rounded px-4 py-2 hover:bg-accent4">Add Filter</button>
        </div>
    </div>
    <div id="error-message" class="mb-4 hidden text-center text-red-600"></div>
    <div id="success-message" class="mb-4 hidden text-center text-green-600"></div>
    <div id="filter-section" class="bg-primary border-accent3 mb-8 hidden rounded-lg border p-6 shadow-md">
        <form id="filter-form" class="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-4">
            <div>
                <label for="search" class="text-accent3 mb-1 block font-medium">Search</label>
                <input type="text" id="search" name="search" class="border-accent1 w-full rounded border p-2" placeholder="Search by title or message">
            </div>
            <div>
                <label for="sortBy" class="text-accent3 mb-1 block font-medium">Sort By</label>
                <select id="sortBy" name="sortBy" class="border-accent1 w-full rounded border p-[10px]">
                    <option value="title">Title</option>
                    <option value="startDate">Start Date</option>
                    <option value="endDate">End Date</option>
                </select>
            </div>
            <div>
                <label for="sortOrder" class="text-accent3 mb-1 block font-medium">Sort Order</label>
                <select id="sortOrder" name="sortOrder" class="border-accent1 w-full rounded border p-[10px]">
                    <option value="asc">Ascending</option>
                    <option value="desc">Descending</option>
                </select>
            </div>
            <div>
                <label for="recipientGroups" class="text-accent3 mb-1 block font-medium">Recipient Groups</label>
                <select id="recipientGroups" name="recipientGroups" multiple class="border-accent1 w-full rounded border p-2">
                    <option value="Admin">Admin</option>
                    <option value="Staff">Staff</option>
                    <option value="All Users">Everyone</option>
                </select>
            </div>
            <div>
                <label for="minStartDate" class="text-accent3 mb-1 block font-medium">Min Start Date</label>
                <input type="date" id="minStartDate" name="minStartDate" class="border-accent1 w-full rounded border p-2">
            </div>
            <div>
                <label for="maxEndDate" class="text-accent3 mb-1 block font-medium">Max End Date</label>
                <input type="date" id="maxEndDate" name="maxEndDate" class="border-accent1 w-full rounded border p-2">
            </div>
            <div class="flex items-end col-start-4 justify-end gap-2">
                <button type="submit" class="bg-accent3 rounded px-4 py-2 text-white hover:bg-accent4">Apply Filters</button>
                <button type="button" id="clear-filters" class="rounded bg-gray-500 px-4 py-2 text-white hover:bg-gray-600">Clear Filters</button>
            </div>
        </form>
    </div>

    <div id="announcement-list" class="hidden">
        <div class="overflow-x-auto">
            <table class="w-full text-accent2 border border-accent1">
                <thead>
                    <tr class="bg-accent3 text-white">
                        <th class="p-2 text-left">Title</th>
                        <th class="p-2 text-left">Message</th>
                        <th class="p-2 text-left">Recipient Groups</th>
                        <th class="p-2 text-left">Start Date</th>
                        <th class="p-2 text-left">End Date</th>
                        <th class="p-2 text-center">Actions</th>
                    </tr>
                </thead>
                <tbody id="announcements-table-body"></tbody>
            </table>
        </div>
    </div>

    <div id="no-announcements" class="text-accent2 mt-4 hidden text-center text-lg">No announcements found.</div>

    <div id="pagination-container" class="mt-6 flex justify-center gap-2"></div>
</div>

@section Scripts {
    <script>
        let currentPage = 1;
        const pageSize = 10;
        let allAnnouncements = [];
        let originalAnnouncements = [];

        function escapeHtml(unsafe) {
            return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

        function formatDate(dateStr) {
            return dateStr ? new Date(dateStr).toLocaleDateString() : '-';
        }

        function renderAnnouncements(page) {
            const announcementsTableBody = document.getElementById('announcements-table-body');
            const noAnnouncementsElement = document.getElementById('no-announcements');
            const paginationContainer = document.getElementById('pagination-container');
            const announcementList = document.getElementById('announcement-list');

            announcementsTableBody.innerHTML = '';

            if (allAnnouncements.length === 0) {
                noAnnouncementsElement.classList.remove('hidden');
                announcementList.classList.add('hidden');
                paginationContainer.innerHTML = '';
                return;
            }

            const startIndex = (page - 1) * pageSize;
            const endIndex = Math.min(startIndex + pageSize, allAnnouncements.length);
            const paginatedAnnouncements = allAnnouncements.slice(startIndex, endIndex);

            if (paginatedAnnouncements.length > 0) {
                announcementList.classList.remove('hidden');
                noAnnouncementsElement.classList.add('hidden');

                paginatedAnnouncements.forEach(announcement => {
                    const row = document.createElement('tr');
                    row.className = 'border-b border-accent1';
                    row.innerHTML = `
                        <td class="p-2 truncate">${escapeHtml(announcement.title)}</td>
                        <td class="p-2 truncate">${escapeHtml(announcement.message)}</td>
                        <td class="p-2">${escapeHtml(announcement.recipientGroups.join(', '))}</td>
                        <td class="p-2">${formatDate(announcement.startDate)}</td>
                        <td class="p-2">${formatDate(announcement.endDate)}</td>
                        <td class="p-2">
                            <div class="flex space-x-2 justify-center">
                                <a href="/Announcement/UpdateAnnouncement/${announcement.id}" class="bg-accent3 rounded px-3 py-1 text-white hover:bg-accent4">Update</a>
                                <button class="bg-accent3 rounded px-3 py-1 text-white hover:bg-accent4" onclick="deleteAnnouncement('${announcement.id}', '${escapeHtml(announcement.title)}')">Delete</button>
                            </div>
                        </td>
                    `;
                    announcementsTableBody.appendChild(row);
                });

                const totalPages = Math.ceil(allAnnouncements.length / pageSize);
                createPaginationControls('pagination-container', totalPages, page, (newPage) => {
                    currentPage = newPage;
                    renderAnnouncements(newPage);
                });
            } else {
                noAnnouncementsElement.classList.remove('hidden');
                announcementList.classList.add('hidden');
                paginationContainer.innerHTML = '';
            }
        }

        async function fetchAnnouncements() {
            const errorMessageElement = document.getElementById('error-message');

            if (!errorMessageElement) {
                console.error('Error message element not found');
                return;
            }

            errorMessageElement.classList.add('hidden');

            try {
                const response = await fetch('https://localhost:7018/api/Announcement/getall');
                if (!response.ok) {
                    throw new Error('Failed to load announcements. Please try again later.');
                }

                originalAnnouncements = await response.json();
                allAnnouncements = [...originalAnnouncements];
                renderAnnouncements(currentPage);
            } catch (error) {
                console.error('Error fetching announcements:', error);
                errorMessageElement.textContent = error.message;
                errorMessageElement.classList.remove('hidden');
            }
        }

        async function deleteAnnouncement(announcementId, announcementTitle) {
            if (!confirm(`Are you sure you want to delete ${announcementTitle}?`)) {
                return;
            }

            const errorMessageElement = document.getElementById('error-message');
            const successMessageElement = document.getElementById('success-message');

            if (!errorMessageElement || !successMessageElement) {
                console.error('Message elements not found');
                return;
            }

            errorMessageElement.classList.add('hidden');
            successMessageElement.classList.add('hidden');

            try {
                const response = await fetch(`https://localhost:7018/api/Announcement/delete/${announcementId}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${window.jwtToken}`
                    }
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to delete announcement.');
                }

                successMessageElement.textContent = 'Announcement deleted successfully!';
                successMessageElement.classList.remove('hidden');

                await fetchAnnouncements();
            } catch (error) {
                console.error('Error deleting announcement:', error);
                errorMessageElement.textContent = error.message;
                errorMessageElement.classList.remove('hidden');
            }
        }

        function getFilterParams() {
            return {
                search: document.getElementById('search').value.toLowerCase(),
                minStartDate: document.getElementById('minStartDate').value,
                maxEndDate: document.getElementById('maxEndDate').value,
                recipientGroups: Array.from(document.getElementById('recipientGroups').selectedOptions).map(option => option.value),
                sortBy: document.getElementById('sortBy').value,
                sortOrder: document.getElementById('sortOrder').value
            };
        }

        function filterAnnouncements(announcements, params) {
            let filtered = [...announcements];

            // Filter by title, message
            if (params.search) {
                filtered = filtered.filter(a =>
                    a.title.toLowerCase().includes(params.search) ||
                    a.message.toLowerCase().includes(params.search)
                );
            }

            // Filter by minStartDate
            if (params.minStartDate) {
                filtered = filtered.filter(a => {
                    const startDate = new Date(a.startDate);
                    const minDate = new Date(params.minStartDate);
                    return startDate >= minDate;
                });
            }

            // Filter by maxEndDate
            if (params.maxEndDate) {
                filtered = filtered.filter(a => {
                    const endDate = new Date(a.endDate);
                    const maxDate = new Date(params.maxEndDate);
                    return endDate <= maxDate;
                });
            }

            // Filter by recipient groups
            if (params.recipientGroups.length > 0) {
                filtered = filtered.filter(a => {
                    const announcementGroups = a.recipientGroups || [];
                    return params.recipientGroups.some(group => announcementGroups.includes(group));
                });
            }

            // Sort
            filtered.sort((a, b) => {
                const fieldA = params.sortBy === 'title' ? a.title.toLowerCase() :
                              params.sortBy === 'startDate' ? new Date(a.startDate) :
                              new Date(a.endDate);
                const fieldB = params.sortBy === 'title' ? b.title.toLowerCase() :
                              params.sortBy === 'startDate' ? new Date(b.startDate) :
                              new Date(b.endDate);
                const comparison = fieldA > fieldB ? 1 : fieldA < fieldB ? -1 : 0;
                return params.sortOrder === 'asc' ? comparison : -comparison;
            });

            return filtered;
        }

        function clearFilters() {
            document.getElementById('search').value = '';
            document.getElementById('minStartDate').value = '';
            document.getElementById('maxEndDate').value = '';
            document.getElementById('recipientGroups').selectedIndex = -1;
            document.getElementById('sortBy').value = 'title';
            document.getElementById('sortOrder').value = 'asc';
        }

        document.addEventListener('DOMContentLoaded', () => {
            const filterButton = document.getElementById('filter-button');
            const filterSection = document.getElementById('filter-section');
            const filterForm = document.getElementById('filter-form');
            const clearFiltersButton = document.getElementById('clear-filters');

            filterButton.addEventListener('click', () => {
                filterSection.classList.toggle('hidden');
            });

            filterForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const params = getFilterParams();
                allAnnouncements = filterAnnouncements(originalAnnouncements, params);
                currentPage = 1;
                renderAnnouncements(currentPage);
            });

            clearFiltersButton.addEventListener('click', () => {
                clearFilters();
                allAnnouncements = [...originalAnnouncements];
                currentPage = 1;
                renderAnnouncements(currentPage);
            });

            fetchAnnouncements();
        });
    </script>
}