@page "{id}"
@model Whisperwood.Pages.Announcement.UpdateAnnouncementModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Update Announcement";
}

<div class="px-4 py-8">
    <h1 class="text-accent3 mb-6 text-center text-4xl font-bold">Update Announcement</h1>

    <div class="bg-primary border-accent3 mx-auto max-w-2xl rounded-lg border p-6 shadow-md">
        <form id="announcement-form" class="space-y-4">
            <div>
                <label for="title" class="text-accent3 mb-1 block font-medium">Title</label>
                <input type="text" id="title" name="title" class="border-accent1 w-full rounded border p-2" placeholder="Announcement Title" required />
            </div>
            <div>
                <label for="message" class="text-accent3 mb-1 block font-medium">Message</label>
                <textarea id="message" name="message" class="border-accent1 w-full rounded border p-2" rows="3" placeholder="Announcement Message" required></textarea>
            </div>
            <div class="grid grid-cols-2 gap-4">
                <div>
                    <label for="startDate" class="text-accent3 mb-1 block font-medium">Start Date</label>
                    <input type="date" id="startDate" name="startDate" class="border-accent1 w-full rounded border p-2" required />
                </div>
                <div>
                    <label for="endDate" class="text-accent3 mb-1 block font-medium">End Date</label>
                    <input type="date" id="endDate" name="endDate" class="border-accent1 w-full rounded border p-2" required />
                </div>
            </div>
            <div>
                <label for="recipientGroups" class="text-accent3 mb-1 block font-medium">Recipient Groups</label>
                <select id="recipientGroups" name="recipientGroups" multiple class="border-accent1 w-full rounded border p-2" required>
                    <option value="All Users">All Users</option>
                    <option value="Staff">Staff</option>
                    <option value="Admin">Admins</option>
                </select>
            </div>
            <div class="flex justify-end gap-2">
                <button type="submit" class="bg-accent3 rounded px-4 py-2 text-white hover:bg-accent2">Update Announcement</button>
                <a href="/Announcement/ManageAnnouncement" class="rounded bg-gray-500 px-4 py-2 text-white hover:bg-gray-600">Cancel</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        // fetches announcement details by ID and populates the form
        const fetchAnnouncementDetails = async (announcementId) => {
            try {
                const response = await fetch(`https://localhost:7018/api/Announcement/getbyid/${announcementId}`, {
                    headers: {
                        'Authorization': `Bearer ${window.jwtToken}`
                    }
                });

                if (response.status === 401) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Please log in to view announcement details.'
                    }).then(() => {
                        window.location.href = '/User/Login';
                    });
                    return;
                }

                if (!response.ok) {
                    throw new Error('Failed to load announcement details.');
                }

                const announcement = await response.json();
                document.getElementById('title').value = announcement.title || '';
                document.getElementById('message').value = announcement.message || '';
                document.getElementById('startDate').value = announcement.startDate ? new Date(announcement.startDate).toISOString().split('T')[0] : '';
                document.getElementById('endDate').value = announcement.endDate ? new Date(announcement.endDate).toISOString().split('T')[0] : '';
                const recipientGroupsSelect = document.getElementById('recipientGroups');
                Array.from(recipientGroupsSelect.options).forEach(option => {
                    option.selected = (announcement.recipientGroups || []).includes(option.value);
                });
            } catch (error) {
                // handle fetch error
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to load announcement details.'
                });
            }
        };

        // initializes form event listeners on DOM load
        document.addEventListener('DOMContentLoaded', () => {
            // check authentication
            if (!window.jwtToken) {
                Toast.fire({
                    icon: 'error',
                    title: 'Please log in to update an announcement.'
                }).then(() => {
                    window.location.href = '/User/Login';
                });
                return;
            }

            const form = document.getElementById('announcement-form');
            const announcementId = window.location.pathname.split('/').pop();
            // validate announcement ID
            if (!announcementId) {
                Toast.fire({
                    icon: 'error',
                    title: 'Announcement ID not found.'
                });
                return;
            }

            // fetch and populate announcement details
            fetchAnnouncementDetails(announcementId);

            // handle form submission
            form.addEventListener('submit', async (e) => {
                e.preventDefault();

                // collect form data
                const title = document.getElementById('title').value.trim();
                const message = document.getElementById('message').value.trim();
                const startDate = document.getElementById('startDate').value;
                const endDate = document.getElementById('endDate').value;
                const recipientGroups = Array.from(document.getElementById('recipientGroups').selectedOptions).map(option => option.value);


                // validate end date (after start date)
                const start = new Date(startDate);
                const end = new Date(endDate);
                if (isNaN(end) || end < start) {
                    Toast.fire({
                        icon: 'error',
                        title: 'End date must be after start date.'
                    });
                    return;
                }

                // validate recipient groups (at least one selected)
                if (!recipientGroups.length) {
                    Toast.fire({
                        icon: 'error',
                        title: 'At least one recipient group must be selected.'
                    });
                    return;
                }

                // prepare API payload
                const announcementDto = {
                    title,
                    message,
                    startDate,
                    endDate,
                    recipientGroups
                };

                try {
                    // send announcement update request
                    const response = await fetch(`https://localhost:7018/api/Announcement/update/${announcementId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${window.jwtToken}`
                        },
                        body: JSON.stringify(announcementDto)
                    });

                    if (response.status === 401) {
                        Toast.fire({
                            icon: 'error',
                            title: 'Please log in to update the announcement.'
                        }).then(() => {
                            window.location.href = '/User/Login';
                        });
                        return;
                    }

                    if (response.ok) {
                        // show success toast and redirect
                        Toast.fire({
                            icon: 'success',
                            title: 'Announcement updated successfully!'
                        }).then(() => {
                            window.location.href = '/Announcement/ManageAnnouncement';
                        });
                    } else {
                        // handle API error
                        const data = await response.json();
                        Toast.fire({
                            icon: 'error',
                            title: data.message || 'Failed to update announcement.'
                        });
                    }
                } catch (error) {
                    // handle network error
                    Toast.fire({
                        icon: 'error',
                        title: 'Failed to connect to the server. Please try again.'
                    });
                }
            });
        });
    </script>
}