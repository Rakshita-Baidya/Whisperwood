@page "{id}"
@model Whisperwood.Pages.Announcement.UpdateAnnouncementModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Update Announcement";
}

<div class="px-4 py-8">
    <h1 class="text-accent3 mb-6 text-center text-4xl font-bold">Update Announcement</h1>

    <div id="error-message" class="mb-4 hidden text-center text-red-600"></div>
    <div id="success-message" class="mb-4 hidden text-center text-green-600"></div>

    <div class="bg-primary border-accent3 mx-auto max-w-2xl rounded-lg border p-6 shadow-md">
        <form id="announcement-form" class="space-y-4">
            <div>
                <label for="title" class="text-accent3 mb-1 block font-medium">Title</label>
                <input type="text" id="title" name="title" class="border-accent1 w-full rounded border p-2" placeholder="Announcement Title" required>
            </div>
            <div>
                <label for="message" class="text-accent3 mb-1 block font-medium">Message</label>
                <textarea id="message" name="message" class="border-accent1 w-full rounded border p-2" rows="3" placeholder="Announcement Message" required></textarea>
            </div>
            <div class="grid grid-cols-2 gap-4">
                <div>
                    <label for="startDate" class="text-accent3 mb-1 block font-medium">Start Date</label>
                    <input type="date" id="startDate" name="startDate" class="border-accent1 w-full rounded border p-2" required>
                </div>
                <div>
                    <label for="endDate" class="text-accent3 mb-1 block font-medium">End Date</label>
                    <input type="date" id="endDate" name="endDate" class="border-accent1 w-full rounded border p-2" required>
                </div>
            </div>
            <div>
                <label for="recipientGroups" class="text-accent3 mb-1 block font-medium">Recipient Groups</label>
                <select id="recipientGroups" name="recipientGroups" multiple class="border-accent1 w-full rounded border p-2" required>
                    <option value="All Users">All Users</option>
                    <option value="Staff">Staff</option>
                    <option value="Admin">Admins</option>
                </select>
            </div>
            <div class="flex justify-end gap-2">
                <button type="submit" class="bg-accent3 rounded px-4 py-2 text-white hover:bg-accent2">Update Announcement</button>
                <a href="/Announcement/ManageAnnouncement" class="rounded bg-gray-500 px-4 py-2 text-white hover:bg-gray-600">Cancel</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        async function fetchAnnouncementDetails(announcementId) {
            const errorMessage = document.getElementById('error-message');
            try {
                const response = await fetch(`https://localhost:7018/api/Announcement/getbyid/${announcementId}`, {
                    headers: {
                        'Authorization': `Bearer ${window.jwtToken || ''}`
                    }
                });
                if (!response.ok) {
                    if (response.status === 401) {
                        window.location.href = '/User/Login';
                        return;
                    }
                    throw new Error('Failed to load announcement details.');
                }
                const announcement = await response.json();
                document.getElementById('title').value = announcement.title || '';
                document.getElementById('message').value = announcement.message || '';
                document.getElementById('startDate').value = announcement.startDate ? new Date(announcement.startDate).toISOString().split('T')[0] : '';
                document.getElementById('endDate').value = announcement.endDate ? new Date(announcement.endDate).toISOString().split('T')[0] : '';
                const recipientGroupsSelect = document.getElementById('recipientGroups');
                Array.from(recipientGroupsSelect.options).forEach(option => {
                    option.selected = (announcement.recipientGroups || []).includes(option.value);
                });
            } catch (error) {
                console.error('Error fetching announcement details:', error);
                if (errorMessage) {
                    errorMessage.textContent = error.message;
                    errorMessage.classList.remove('hidden');
                }
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            if (!window.jwtToken) {
                window.location.href = '/User/Login';
                return;
            }

            const form = document.getElementById('announcement-form');
            const errorMessage = document.getElementById('error-message');
            const successMessage = document.getElementById('success-message');

            const announcementId = window.location.pathname.split('/').pop();
            if (!announcementId) {
                errorMessage.textContent = 'Announcement ID not found in URL.';
                errorMessage.classList.remove('hidden');
                return;
            }

            fetchAnnouncementDetails(announcementId);

            form.addEventListener('submit', async (e) => {
                e.preventDefault();

                const title = document.getElementById('title').value;
                const message = document.getElementById('message').value;
                const startDate = document.getElementById('startDate').value;
                const endDate = document.getElementById('endDate').value;
                const recipientGroups = Array.from(document.getElementById('recipientGroups').selectedOptions).map(option => option.value);

                // Client-side validation
                if (new Date(startDate) > new Date(endDate)) {
                    errorMessage.textContent = 'Start Date cannot be after End Date.';
                    errorMessage.classList.remove('hidden');
                    successMessage.classList.add('hidden');
                    return;
                }
                if (!recipientGroups.length) {
                    errorMessage.textContent = 'At least one recipient group must be selected.';
                    errorMessage.classList.remove('hidden');
                    successMessage.classList.add('hidden');
                    return;
                }

                const announcementDto = {
                    title,
                    message,
                    startDate,
                    endDate,
                    recipientGroups
                };

                try {
                    const response = await fetch(`https://localhost:7018/api/Announcement/update/${announcementId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${window.jwtToken || ''}`
                        },
                        body: JSON.stringify(announcementDto)
                    });

                    const data = await response.json();

                    if (response.ok) {
                        successMessage.textContent = 'Announcement updated successfully!';
                        successMessage.classList.remove('hidden');
                        errorMessage.classList.add('hidden');

                        setTimeout(() => {
                            window.location.href = '/Announcement/ManageAnnouncement';
                        }, 1000);

                    } else {
                        if (response.status === 401) {
                            window.location.href = '/User/Login';
                            return;
                        }
                        errorMessage.textContent = data.message || 'Failed to update announcement.';
                        errorMessage.classList.remove('hidden');
                        successMessage.classList.add('hidden');
                    }
                } catch (error) {
                    console.error('Error updating announcement:', error);
                    errorMessage.textContent = 'An error occurred while updating the announcement.';
                    errorMessage.classList.remove('hidden');
                    successMessage.classList.add('hidden');
                }
            });
        });
    </script>
}