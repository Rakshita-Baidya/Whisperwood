@page
@model Whisperwood.Pages.Order.ManageOrdersModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Manage Orders";
}

@* displays manage orders *@
<div class="container mx-auto px-6 py-8">
    <div class="mb-6 flex items-center justify-between">
        <h1 class="text-accent4 text-2xl font-bold">Manage Orders</h1>
        <button id="filter-button" class="bg-accent3 rounded px-4 py-2 text-white hover:bg-accent4">Filter Orders</button>
    </div>
    <div id="filter-section" class="bg-primary border-accent1 mb-8 hidden rounded border p-6 shadow-sm">
        <h2 class="text-accent4 mb-4 text-xl font-semibold">Filter Orders</h2>
        <form id="filter-form" class="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-4">
            <div>
                <label for="search" class="text-accent2 mb-1 block font-medium">Search</label>
                <input type="text" id="search" name="search" class="border-accent1 w-full rounded border p-2" placeholder="Search by user name or order ID">
            </div>
            <div>
                <label for="status" class="text-accent2 mb-1 block font-medium">Status</label>
                <select id="status" name="status" class="border-accent1 w-full rounded border p-2">
                    <option value="">All</option>
                    <option value="0">Pending</option>
                    <option value="1">Cancelled</option>
                    <option value="2">Fulfilled</option>
                </select>
            </div>
            <div>
                <label for="sortBy" class="text-accent2 mb-1 block font-medium">Sort By</label>
                <select id="sortBy" name="sortBy" class="border-accent1 w-full rounded border p-2">
                    <option value="orderedAt">Order Date</option>
                    <option value="userName">User Name</option>
                    <option value="totalAmount">Total Amount</option>
                    <option value="status">Status</option>
                </select>
            </div>
            <div>
                <label for="sortOrder" class="text-accent2 mb-1 block font-medium">Sort Order</label>
                <select id="sortOrder" name="sortOrder" class="border-accent1 w-full rounded border p-2">
                    <option value="asc">Ascending</option>
                    <option value="desc">Descending</option>
                </select>
            </div>
            <div>
                <label for="minStartDate" class="text-accent2 mb-1 block font-medium">Min Order Date</label>
                <input type="date" id="minStartDate" name="minStartDate" class="border-accent1 w-full rounded border p-2">
            </div>
            <div>
                <label for="maxEndDate" class="text-accent2 mb-1 block font-medium">Max Order Date</label>
                <input type="date" id="maxEndDate" name="maxEndDate" class="border-accent1 w-full rounded border p-2">
            </div>
            <div class="col-start-4 flex items-end justify-end gap-2">
                <button type="submit" class="bg-accent3 rounded px-4 py-2 text-white hover:bg-accent4">Apply Filters</button>
                <button type="button" id="clear-filters" class="bg-secondary rounded px-4 py-2 text-white hover:bg-gray-600">Clear Filters</button>
            </div>
        </form>
    </div>
    <div id="order-list" class="hidden">
        <div class="overflow-x-auto">
            <table class="border-accent1 text-accent2 w-full border shadow-sm">
                <thead>
                    <tr class="bg-accent4 text-white">
                        <th class="p-3 text-left">Order ID</th>
                        <th class="p-3 text-left">User</th>
                        <th class="p-3 text-left">Date</th>
                        <th class="p-3 text-left">Status</th>
                        <th class="p-3 text-left">Total</th>
                        <th class="p-3 text-left">Claim Code</th>
                        <th class="p-3 text-left">Actions</th>
                    </tr>
                </thead>
                <tbody id="order-table-body"></tbody>
            </table>
        </div>
    </div>
    <p id="no-orders" class="text-accent2 mt-4 hidden text-center text-lg">No orders found.</p>
    <div id="pagination-container" class="mt-6 flex justify-center gap-2"></div>
</div>

@section Scripts {
    <script>
        // caches dom elements
        const elements = {
            list: document.getElementById('order-list'),
            tableBody: document.getElementById('order-table-body'),
            noOrders: document.getElementById('no-orders'),
            filterSection: document.getElementById('filter-section'),
            filterForm: document.getElementById('filter-form'),
            filterButton: document.getElementById('filter-button'),
            clearFilters: document.getElementById('clear-filters'),
            paginationContainer: document.getElementById('pagination-container')
        };

        let currentPage = 1;
        const pageSize = 8;
        let allOrders = [];
        let originalOrders = [];
        const billCache = {};

        // fetches bill
        const fetchBill = async (orderId) => {
            if (billCache[orderId]) return billCache[orderId];
            try {
                const response = await fetch(`https://localhost:7018/api/Bill/getbyorderid/${orderId}`, {
                    headers: { 'Authorization': `Bearer ${window.jwtToken}` }
                });
                if (response.status === 401) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Please log in to fetch bill'
                    }).then(() => {
                        window.location.href = '/User/Login';
                    });
                    return { claimCode: null };
                }
                if (!response.ok) throw new Error(`Failed to fetch bill for order ${orderId}`);
                const bill = await response.json();
                billCache[orderId] = bill || { claimCode: null };
                return billCache[orderId];
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: error.message || `Failed to fetch bill for order ${orderId}`
                });
                billCache[orderId] = { claimCode: null };
                return billCache[orderId];
            }
        };

        // fetches orders
        const fetchOrders = async () => {
            try {
                const response = await fetch('https://localhost:7018/api/Order/getall', {
                    headers: { 'Authorization': `Bearer ${window.jwtToken}` }
                });
                if (response.status === 401) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Please log in to manage orders'
                    }).then(() => {
                        window.location.href = '/User/Login';
                    });
                    return [];
                }
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to fetch orders');
                }
                return await response.json();
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to fetch orders'
                });
                return [];
            }
        };

        // updates order
        const updateOrder = async (orderId, status, claimCode) => {
            const result = await Swal.fire({
                title: 'Update Order',
                text: 'Are you sure you want to update this order?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#E74C3C',
                cancelButtonColor: 'grey',
                confirmButtonText: 'Update Order',
                cancelButtonText: 'Cancel'
            });
            if (!result.isConfirmed) return false;

            try {
                const response = await fetch(`https://localhost:7018/api/Order/update/${orderId}`, {
                    method: 'PUT',
                    headers: {
                        'Authorization': `Bearer ${window.jwtToken}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ status, claimCode: claimCode || null })
                });
                if (response.status === 401) {
                    Toast.fire({
                        icon: 'error',
                        title: 'Please log in to update order'
                    }).then(() => {
                        window.location.href = '/User/Login';
                    });
                    return false;
                }
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to update order');
                }
                return true;
            } catch (error) {
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to update order'
                });
                return false;
            }
        };

        // gets status text and badge class
        const getStatusText = (status) => {
            switch (status) {
                case 0: return { text: 'Pending'};
                case 1: return { text: 'Cancelled'};
                case 2: return { text: 'Fulfilled'};
                default: return { text: 'Unknown'};
            }
        };

        // gets filter parameters
        const getFilterParams = () => ({
            search: document.getElementById('search').value.toLowerCase(),
            status: document.getElementById('status').value,
            minStartDate: document.getElementById('minStartDate').value,
            maxEndDate: document.getElementById('maxEndDate').value,
            sortBy: document.getElementById('sortBy').value,
            sortOrder: document.getElementById('sortOrder').value
        });

        // filters orders
        const filterOrders = (orders, params) => {
            let filtered = [...orders];

            if (params.search) {
                filtered = filtered.filter(o =>
                    (o.user?.name?.toLowerCase() || '').includes(params.search) ||
                    o.id.toLowerCase().includes(params.search)
                );
            }

            if (params.status !== '') {
                const status = parseInt(params.status);
                filtered = filtered.filter(o => o.status === status);
            }

            if (params.minStartDate) {
                filtered = filtered.filter(o => new Date(o.orderedAt) >= new Date(params.minStartDate));
            }

            if (params.maxEndDate) {
                filtered = filtered.filter(o => new Date(o.orderedAt) <= new Date(params.maxEndDate));
            }

            filtered.sort((a, b) => {
                const fieldA = params.sortBy === 'userName' ? (a.user?.name?.toLowerCase() || '') :
                              params.sortBy === 'orderedAt' ? new Date(a.orderedAt) :
                              params.sortBy === 'totalAmount' ? a.totalAmount : a.status;
                const fieldB = params.sortBy === 'userName' ? (b.user?.name?.toLowerCase() || '') :
                              params.sortBy === 'orderedAt' ? new Date(b.orderedAt) :
                              params.sortBy === 'totalAmount' ? b.totalAmount : b.status;
                const comparison = fieldA > fieldB ? 1 : fieldA < fieldB ? -1 : 0;
                return params.sortOrder === 'asc' ? comparison : -comparison;
            });

            return filtered;
        };

        // clears filters
        const clearFilters = () => {
            document.getElementById('search').value = '';
            document.getElementById('status').value = '';
            document.getElementById('minStartDate').value = '';
            document.getElementById('maxEndDate').value = '';
            document.getElementById('sortBy').value = 'orderedAt';
            document.getElementById('sortOrder').value = 'asc';
        };

        // renders orders
        const renderOrders = async (page, orders) => {
            elements.tableBody.innerHTML = '';
            elements.noOrders.classList.add('hidden');
            elements.paginationContainer.innerHTML = '';

            if (!orders.length) {
                elements.noOrders.classList.remove('hidden');
                return;
            }

            const startIndex = (page - 1) * pageSize;
            const endIndex = Math.min(startIndex + pageSize, orders.length);
            const paginatedOrders = orders.slice(startIndex, endIndex);

            for (const order of paginatedOrders) {
                await fetchBill(order.id); // Ensure bill is fetched
                const statusInfo = getStatusText(order.status);
                const row = document.createElement('tr');
                row.className = 'border-b border-accent1 bg-white';
                row.innerHTML = `
                    <td class="p-3">${order.id}</td>
                    <td class="p-3">${order.user?.name || 'Unknown User'}</td>
                    <td class="p-3">${new Date(order.orderedAt).toLocaleDateString()}</td>
                    <td class="p-3">${statusInfo.text}</td>
                    <td class="p-3">Rs. ${order.totalAmount.toFixed(2)}</td>
                    <td class="p-3">${billCache[order.id]?.claimCode || '-'}</td>
                    <td class="p-3">
                        ${order.status === 0 ? `
                            <button class="edit-order bg-accent3 rounded px-3 py-1 text-white hover:bg-accent4" data-order-id="${order.id}" data-status="${order.status}" data-claim-code="${billCache[order.id]?.claimCode || ''}">Edit</button>
                        ` : ''}
                    </td>
                `;
                elements.tableBody.appendChild(row);
            }

            const totalPages = Math.ceil(orders.length / pageSize);
            createPaginationControls('pagination-container', totalPages, page, (newPage) => {
                currentPage = newPage;
                renderOrders(newPage, allOrders);
            });

            document.querySelectorAll('.edit-order').forEach(button => {
                button.addEventListener('click', () => {
                    const orderId = button.dataset.orderId;
                    const currentStatus = parseInt(button.dataset.status);
                    const currentClaimCode = button.dataset.claimCode;

                    Swal.fire({
                        title: 'Edit Order',
                        html: `
                            <div class="text-left">
                                <label class="text-accent2 mb-1 block">Status</label>
                                <select id="edit-status" class="border-accent1 w-full rounded border p-2">
                                    <option value="0" ${currentStatus === 0 ? 'selected' : ''}>Pending</option>
                                    <option value="1" ${currentStatus === 1 ? 'selected' : ''}>Cancelled</option>
                                    <option value="2" ${currentStatus === 2 ? 'selected' : ''}>Fulfilled</option>
                                </select>
                                <label class="text-accent2 mt-4 mb-1 block">Claim Code</label>
                                <input id="edit-claim-code" type="text" value="${currentClaimCode}" class="border-accent1 w-full rounded border p-2" maxlength="6">
                            </div>
                        `,
                        showCancelButton: true,
                        confirmButtonColor: '#E74C3C',
                        cancelButtonColor: 'grey',
                        confirmButtonText: 'Update',
                        cancelButtonText: 'Cancel',
                        customClass: {
                            popup: 'bg-primary rounded shadow-lg max-w-md w-full p-6'
                        },
                        preConfirm: () => {
                            const status = parseInt(document.getElementById('edit-status').value);
                            const claimCode = document.getElementById('edit-claim-code').value.trim();
                            if (status === 2 && !claimCode) {
                                Swal.showValidationMessage('Claim code is required for Fulfilled status');
                                return false;
                            }
                            return { status, claimCode };
                        }
                    }).then(async (result) => {
                        if (result.isConfirmed) {
                            const { status, claimCode } = result.value;
                            const success = await updateOrder(orderId, status, claimCode);
                            if (success) {
                                Toast.fire({
                                    icon: 'success',
                                    title: 'Order updated successfully'
                                }).then(() => {
                                    loadOrders();
                                });
                            }
                        }
                    });
                });
            });
        };

        // loads orders
        const loadOrders = async () => {
            Toast.fire({
                icon: 'info',
                title: 'Loading orders...',
                timer: 1000
            });

            const orders = await fetchOrders();
            if (!orders?.length) {
                elements.noOrders.classList.remove('hidden');
                return;
            }

            for (const order of orders) {
                await fetchBill(order.id);
            }

            originalOrders = [...orders];
            orders.sort((a, b) => {
            // status
            if (a.status !== b.status) {
                return a.status - b.status; // ascending
            }
            // date
            return new Date(b.orderedAt) - new Date(a.orderedAt);
        });

            allOrders = [...orders];
            elements.list.classList.remove('hidden');
            renderOrders(currentPage, allOrders);
        };

        // initializes page
        document.addEventListener('DOMContentLoaded', () => {
            elements.filterButton.addEventListener('click', () => {
                elements.filterSection.classList.toggle('hidden');
            });

            elements.filterForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const params = getFilterParams();
                allOrders = filterOrders(originalOrders, params);
                currentPage = 1;
                renderOrders(currentPage, allOrders);
            });

            elements.clearFilters.addEventListener('click', () => {
                clearFilters();
                allOrders = [...originalOrders];
                currentPage = 1;
                renderOrders(currentPage, allOrders);
            });

            loadOrders();
        });
    </script>
}