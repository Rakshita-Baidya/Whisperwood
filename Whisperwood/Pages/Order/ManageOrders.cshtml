@page
@model Whisperwood.Pages.Order.ManageOrdersModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Manage Orders";
}

<div class="container mx-auto px-6 py-8">
    <h1 class="text-3xl font-bold text-center text-accent4 mb-6">Manage Orders</h1>

    <div id="error-message" class="hidden mb-4 text-center text-red-600"></div>
    <div id="success-message" class="hidden mb-4 text-center text-green-600"></div>
    <div id="loading-message" class="text-center text-accent2 text-lg">Loading orders...</div>

    <div id="order-list" class="hidden">
        <table class="w-full text-accent2 border border-accent1">
            <thead>
                <tr class="bg-accent3 text-white">
                    <th class="p-2 text-left">Order ID</th>
                    <th class="p-2 text-left">User</th>
                    <th class="p-2 text-left">Date</th>
                    <th class="p-2 text-left">Status</th>
                    <th class="p-2 text-left">Total</th>
                    <th class="p-2 text-left">Claim Code</th>
                    <th class="p-2 text-left">Actions</th>
                </tr>
            </thead>
            <tbody id="order-table-body"></tbody>
        </table>
    </div>
    <p id="no-orders" class="hidden text-center text-accent2 text-lg">No orders found.</p>
</div>

@section Scripts {
    <script>
        const orderList = document.getElementById("order-list");
        const orderTableBody = document.getElementById("order-table-body");
        const error = document.getElementById("error-message");
        const success = document.getElementById("success-message");
        const noOrders = document.getElementById("no-orders");
        const loading = document.getElementById("loading-message");

        const billCache = {};

        async function fetchBill(orderId) {
            if (billCache[orderId]) {
                return billCache[orderId];
            }
            try {
                const response = await fetch(`https://localhost:7018/api/Bill/getbyorderid/${orderId}`, {
                    headers: { "Authorization": `Bearer ${window.jwtToken || ''}` }
                });
                if (!response.ok) {
                    throw new Error(`Failed to fetch bill for order ${orderId}`);
                }
                const bill = await response.json();
                billCache[orderId] = bill || { claimCode: null };
                return billCache[orderId];
            } catch (err) {
                console.error(`Error fetching bill for order ${orderId}:`, err);
                billCache[orderId] = { claimCode: null };
                return billCache[orderId];
            }
        }

        function showError(message) {
            error.textContent = message;
            error.classList.remove("hidden");
            success.classList.add("hidden");
            loading.classList.add("hidden");
            orderList.classList.add("hidden");
        }

        function showSuccess(message) {
            success.textContent = message;
            success.classList.remove("hidden");
            error.classList.add("hidden");
            loading.classList.add("hidden");
        }

        async function fetchOrders() {
            try {
                const response = await fetch(`https://localhost:7018/api/Order/getall`, {
                    headers: { "Authorization": `Bearer ${window.jwtToken || ''}` }
                });
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || "Failed to fetch orders.");
                }
                return await response.json();
            } catch (err) {
                showError(err.message);
                return [];
            }
        }

        async function updateOrder(orderId, status, claimCode) {
            try {
                const response = await fetch(`https://localhost:7018/api/Order/update/${orderId}`, {
                    method: 'PUT',
                    headers: {
                        "Authorization": `Bearer ${window.jwtToken || ''}`,
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({ status, claimCode })
                });
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || "Failed to update order.");
                }
                return true;
            } catch (err) {
                showError(err.message);
                return false;
            }
        }

        function getStatusText(status) {
            return status === 0 ? "Pending" : status === 1 ? "Cancelled" : status === 2 ? "Fulfilled" : "Unknown";
        }
        
        function escapeHtml(unsafe) {
            return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

        async function loadOrders() {
            if (!window.isAuthenticated || (!window.isAdmin && !window.isStaff)) {
                showError("Access restricted to admins and staff.");
                setTimeout(() => window.location.href = '/', 1000);
                return;
            }

            const orders = await fetchOrders();
            if (!orders || orders.length === 0) {
                loading.classList.add("hidden");
                noOrders.classList.remove("hidden");
                return;
            }

            // Fetch bill details for each order
            const bills = {};
            for (const order of orders) {
                bills[order.id] = await fetchBill(order.id);
            }

            loading.classList.add("hidden");
            orderList.classList.remove("hidden");
            orderTableBody.innerHTML = orders.map(order => `
                <tr class="border-b border-accent1">
                    <td class="p-2">${order.id}</td>
                    <td class="p-2">${order.user?.name || 'Unknown User'}</td>
                    <td class="p-2">${new Date(order.orderedAt).toLocaleDateString()}</td>
                    <td class="p-2">${getStatusText(order.status)}</td>
                    <td class="p-2">Rs. ${order.totalAmount.toFixed(2)}</td>
                    <td class="p-2">${bills[order.id].claimCode || '-'}</td>
                    
                    <td class="p-2">
                        ${order.status == 0 ? `<button class="edit-order text-accent3 hover:text-accent4" data-order-id="${escapeHtml(order.id)}" data-status="${order.status}" data-claim-code="${escapeHtml(bills[order.id].claimCode || '')}">Edit</button>` : ''}
                    </td>
                </tr>
            `).join('');

            document.querySelectorAll('.edit-order').forEach(button => {
                button.addEventListener('click', () => {
                    const orderId = button.dataset.orderId;
                    const currentStatus = parseInt(button.dataset.status);
                    const currentClaimCode = button.dataset.claimCode;

                    const editForm = document.createElement('div');
                    editForm.className = 'fixed inset-0 bg-gray-800 bg-opacity-50 flex items-center justify-center z-50';
                    editForm.innerHTML = `
                        <div class="bg-primary p-6 rounded shadow-lg max-w-md w-full">
                            <h2 class="text-xl font-semibold text-accent3 mb-4">Edit Order</h2>
                            <div class="mb-4">
                                <label class="block text-accent2 mb-1">Status</label>
                                <select id="edit-status" class="w-full p-2 border border-accent1 rounded">
                                    <option value="0" ${currentStatus === 0 ? 'selected' : ''}>Pending</option>
                                    <option value="1" ${currentStatus === 1 ? 'selected' : ''}>Cancelled</option>
                                    <option value="2" ${currentStatus === 2 ? 'selected' : ''}>Fulfilled</option>
                                </select>
                            </div>
                            <div class="mb-4">
                                <label class="block text-accent2 mb-1">Claim Code</label>
                                <input id="edit-claim-code" type="text" value="${currentClaimCode}" class="w-full p-2 border border-accent1 rounded" maxlength="6">
                            </div>
                            <div class="flex justify-end space-x-2">
                                <button id="save-order" class="bg-accent3 text-white px-4 py-2 rounded hover:bg-accent2">Save</button>
                                <button id="cancel-edit" class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600">Cancel</button>
                            </div>
                            <p id="edit-error" class="hidden text-red-600 mt-2"></p>
                        </div>
                    `;
                    document.body.appendChild(editForm);

                    const saveButton = document.getElementById('save-order');
                    const cancelButton = document.getElementById('cancel-edit');
                    const editError = document.getElementById('edit-error');

                    saveButton.addEventListener('click', async () => {
                        const status = parseInt(document.getElementById('edit-status').value);
                        const claimCode = document.getElementById('edit-claim-code').value.trim();

                        if (status === 2 && !claimCode) {
                            editError.textContent = "Claim code is required for Fulfilled status.";
                            editError.classList.remove('hidden');
                            return;
                        }

                        const success = await updateOrder(orderId, status, claimCode || null);
                        if (success) {
                            document.body.removeChild(editForm);
                            showSuccess("Order updated successfully.");
                            setTimeout(() => location.reload(), 1000);
                        }
                    });

                    cancelButton.addEventListener('click', () => {
                        document.body.removeChild(editForm);
                    });
                });
            });
        }

        document.addEventListener("DOMContentLoaded", loadOrders);
    </script>
}